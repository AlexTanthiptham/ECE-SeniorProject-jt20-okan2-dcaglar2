
helloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d60  08006d60  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d68  08006d68  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08006de0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08006e80  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000874  200001b0  08006f20  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a24  08006f20  00020a24  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c2d1  00000000  00000000  000201de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000316a  00000000  00000000  0003c4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001670  00000000  00000000  0003f620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001518  00000000  00000000  00040c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b1c8  00000000  00000000  000421a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ba10  00000000  00000000  0006d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001068e7  00000000  00000000  00088d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018f667  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006434  00000000  00000000  0018f6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	08006c8c 	.word	0x08006c8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	08006c8c 	.word	0x08006c8c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <lidarInit>:
 *      Author: okano
 */

#include "lidar.h"
#include "main.h"
int lidarInit(LIDAR *lidar, I2C_HandleTypeDef *port) {
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	uint8_t cmd[1];
	lidar->port = port;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	601a      	str	r2, [r3, #0]
	cmd[0] = 0x04;
 80005f4:	2304      	movs	r3, #4
 80005f6:	733b      	strb	r3, [r7, #12]
	return 0;
 80005f8:	2300      	movs	r3, #0
//	return HAL_I2C_Mem_Write(lidar->port, LIDAR_WRITE_ADD, 0x00, 1, cmd, 1, 0x100);
//	return 0;

}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b0d1      	sub	sp, #324	; 0x144
 800060c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f001 fc54 	bl	8001eba <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f8ab 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fbd1 	bl	8000dbc <MX_GPIO_Init>
  MX_ETH_Init();
 800061a:	f000 f917 	bl	800084c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800061e:	f000 fb6f 	bl	8000d00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000622:	f000 fb9d 	bl	8000d60 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000626:	f000 f99f 	bl	8000968 <MX_TIM1_Init>
  MX_I2C1_Init();
 800062a:	f000 f95d 	bl	80008e8 <MX_I2C1_Init>
  MX_UART4_Init();
 800062e:	f000 fb37 	bl	8000ca0 <MX_UART4_Init>
  MX_TIM3_Init();
 8000632:	f000 fa45 	bl	8000ac0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000636:	f000 fabb 	bl	8000bb0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#define dutyCycle 1.1
	TIM3->CCR1 = (int) (driverSpeed / dutyCycle);
 800063a:	4b42      	ldr	r3, [pc, #264]	; (8000744 <main+0x13c>)
 800063c:	f242 3282 	movw	r2, #9090	; 0x2382
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1 = (int) (driverSpeed / dutyCycle);
 8000642:	4b41      	ldr	r3, [pc, #260]	; (8000748 <main+0x140>)
 8000644:	f242 3282 	movw	r2, #9090	; 0x2382
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800064a:	2100      	movs	r1, #0
 800064c:	483f      	ldr	r0, [pc, #252]	; (800074c <main+0x144>)
 800064e:	f003 fefb 	bl	8004448 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000652:	2100      	movs	r1, #0
 8000654:	483e      	ldr	r0, [pc, #248]	; (8000750 <main+0x148>)
 8000656:	f003 fef7 	bl	8004448 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_StatusTypeDef ret;
	int distance = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	// UART INIT---------------------
	UARTClient PC;
	PC.port = &huart3;
 8000660:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <main+0x14c>)
 8000662:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	UARTClient *PCptr = &PC;
 8000666:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800066a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	//-------------------------------

	UARTPrintln(PCptr, "Starting the code...");
 800066e:	493a      	ldr	r1, [pc, #232]	; (8000758 <main+0x150>)
 8000670:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8000674:	f001 f848 	bl	8001708 <UARTPrintln>
	//init lidar
	LIDAR  lidar;
	ret = lidarInit(&lidar,&hi2c1);
 8000678:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800067c:	4937      	ldr	r1, [pc, #220]	; (800075c <main+0x154>)
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffb0 	bl	80005e4 <lidarInit>
 8000684:	4603      	mov	r3, r0
 8000686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(ret!=HAL_OK){
 800068a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <main+0x98>
		UARTPrintln(&PC, "lidar FAILED to init");
 8000692:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000696:	4932      	ldr	r1, [pc, #200]	; (8000760 <main+0x158>)
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f835 	bl	8001708 <UARTPrintln>
		while(1){};
 800069e:	e7fe      	b.n	800069e <main+0x96>
	}
	UARTPrintln(&PC, "lidar init and configed");
 80006a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006a4:	492f      	ldr	r1, [pc, #188]	; (8000764 <main+0x15c>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f82e 	bl	8001708 <UARTPrintln>
	//---------------------
	//Motor
	MotorDriver MD;
    double xdist = 0;
 80006ac:	f04f 0200 	mov.w	r2, #0
 80006b0:	f04f 0300 	mov.w	r3, #0
 80006b4:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    double ydist = 0;
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0300 	mov.w	r3, #0
 80006c0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    double xout = 0;
 80006c4:	f04f 0200 	mov.w	r2, #0
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    double yout = 0.0;
 80006d0:	f04f 0200 	mov.w	r2, #0
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	PID_TypeDef xctrl;
	PID_TypeDef yctrl;
	MotorDriverInit(&MD, &xdist, &ydist, &xout, &yout, &xctrl, &yctrl);
 80006dc:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 80006e0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80006e4:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80006e8:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80006ec:	463b      	mov	r3, r7
 80006ee:	9302      	str	r3, [sp, #8]
 80006f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	4623      	mov	r3, r4
 80006fe:	f000 fc5a 	bl	8000fb6 <MotorDriverInit>
	goForward(&MD);
 8000702:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fcc8 	bl	800109c <goForward>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		motorDriverUpdate(&MD);
 800070c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fcb1 	bl	8001078 <motorDriverUpdate>
		UARTPrintf(&PC, "Xctrl out: %d, Yctrl out: %d \n\r",*(MD.xcontOut), *(MD.ycontOut));
 8000716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800071a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800071e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000726:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800072a:	e9cd 2300 	strd	r2, r3, [sp]
 800072e:	4602      	mov	r2, r0
 8000730:	460b      	mov	r3, r1
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <main+0x160>)
 8000734:	4620      	mov	r0, r4
 8000736:	f000 ffbf 	bl	80016b8 <UARTPrintf>
		HAL_Delay(5000);
 800073a:	f241 3088 	movw	r0, #5000	; 0x1388
 800073e:	f001 fc19 	bl	8001f74 <HAL_Delay>
		motorDriverUpdate(&MD);
 8000742:	e7e3      	b.n	800070c <main+0x104>
 8000744:	40000400 	.word	0x40000400
 8000748:	40000800 	.word	0x40000800
 800074c:	20000354 	.word	0x20000354
 8000750:	200003a0 	.word	0x200003a0
 8000754:	20000474 	.word	0x20000474
 8000758:	08006ca4 	.word	0x08006ca4
 800075c:	200002b4 	.word	0x200002b4
 8000760:	08006cbc 	.word	0x08006cbc
 8000764:	08006cd4 	.word	0x08006cd4
 8000768:	08006cec 	.word	0x08006cec

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2234      	movs	r2, #52	; 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f005 fe10 	bl	80063a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <SystemClock_Config+0xd8>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <SystemClock_Config+0xd8>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <SystemClock_Config+0xd8>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <SystemClock_Config+0xdc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b0:	4a25      	ldr	r2, [pc, #148]	; (8000848 <SystemClock_Config+0xdc>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b23      	ldr	r3, [pc, #140]	; (8000848 <SystemClock_Config+0xdc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d8:	2304      	movs	r3, #4
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007dc:	2360      	movs	r3, #96	; 0x60
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fc75 	bl	80030e0 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007fc:	f000 fbd6 	bl	8000fac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000800:	f002 fc1e 	bl	8003040 <HAL_PWREx_EnableOverDrive>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800080a:	f000 fbcf 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2103      	movs	r1, #3
 800082a:	4618      	mov	r0, r3
 800082c:	f002 ff06 	bl	800363c <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000836:	f000 fbb9 	bl	8000fac <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	; 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_ETH_Init+0x84>)
 8000852:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <MX_ETH_Init+0x88>)
 8000854:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_ETH_Init+0x8c>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_ETH_Init+0x8c>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_ETH_Init+0x8c>)
 8000864:	22e1      	movs	r2, #225	; 0xe1
 8000866:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_ETH_Init+0x8c>)
 800086a:	2200      	movs	r2, #0
 800086c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_ETH_Init+0x8c>)
 8000870:	2200      	movs	r2, #0
 8000872:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_ETH_Init+0x8c>)
 8000876:	2200      	movs	r2, #0
 8000878:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_ETH_Init+0x84>)
 800087c:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <MX_ETH_Init+0x8c>)
 800087e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_ETH_Init+0x84>)
 8000882:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000886:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_ETH_Init+0x84>)
 800088a:	4a14      	ldr	r2, [pc, #80]	; (80008dc <MX_ETH_Init+0x90>)
 800088c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_ETH_Init+0x84>)
 8000890:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_ETH_Init+0x94>)
 8000892:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_ETH_Init+0x84>)
 8000896:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800089a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_ETH_Init+0x84>)
 800089e:	f001 fc73 	bl	8002188 <HAL_ETH_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008a8:	f000 fb80 	bl	8000fac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008ac:	2238      	movs	r2, #56	; 0x38
 80008ae:	2100      	movs	r1, #0
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_ETH_Init+0x98>)
 80008b2:	f005 fd75 	bl	80063a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_ETH_Init+0x98>)
 80008b8:	2221      	movs	r2, #33	; 0x21
 80008ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_ETH_Init+0x98>)
 80008be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_ETH_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000204 	.word	0x20000204
 80008d4:	40028000 	.word	0x40028000
 80008d8:	20000a04 	.word	0x20000a04
 80008dc:	20000110 	.word	0x20000110
 80008e0:	20000070 	.word	0x20000070
 80008e4:	200001cc 	.word	0x200001cc

080008e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_I2C1_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <MX_I2C1_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_I2C1_Init+0x74>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <MX_I2C1_Init+0x7c>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_I2C1_Init+0x74>)
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_I2C1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_I2C1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <MX_I2C1_Init+0x74>)
 8000924:	f002 f91c 	bl	8002b60 <HAL_I2C_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800092e:	f000 fb3d 	bl	8000fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <MX_I2C1_Init+0x74>)
 8000936:	f002 f9a3 	bl	8002c80 <HAL_I2CEx_ConfigAnalogFilter>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 fb34 	bl	8000fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_I2C1_Init+0x74>)
 8000948:	f002 f9e5 	bl	8002d16 <HAL_I2CEx_ConfigDigitalFilter>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 fb2b 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200002b4 	.word	0x200002b4
 8000960:	40005400 	.word	0x40005400
 8000964:	20303e5d 	.word	0x20303e5d

08000968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09a      	sub	sp, #104	; 0x68
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]
 800099a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	222c      	movs	r2, #44	; 0x2c
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f005 fcfc 	bl	80063a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a8:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <MX_TIM1_Init+0x150>)
 80009aa:	4a44      	ldr	r2, [pc, #272]	; (8000abc <MX_TIM1_Init+0x154>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80009ae:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <MX_TIM1_Init+0x150>)
 80009b0:	225f      	movs	r2, #95	; 0x5f
 80009b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <MX_TIM1_Init+0x150>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009ba:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <MX_TIM1_Init+0x150>)
 80009bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80009c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <MX_TIM1_Init+0x150>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c8:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <MX_TIM1_Init+0x150>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_TIM1_Init+0x150>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d4:	4838      	ldr	r0, [pc, #224]	; (8000ab8 <MX_TIM1_Init+0x150>)
 80009d6:	f003 fc7f 	bl	80042d8 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 fae4 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009ee:	4619      	mov	r1, r3
 80009f0:	4831      	ldr	r0, [pc, #196]	; (8000ab8 <MX_TIM1_Init+0x150>)
 80009f2:	f003 ff37 	bl	8004864 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009fc:	f000 fad6 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a00:	482d      	ldr	r0, [pc, #180]	; (8000ab8 <MX_TIM1_Init+0x150>)
 8000a02:	f003 fcc0 	bl	8004386 <HAL_TIM_PWM_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a0c:	f000 face 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a20:	4619      	mov	r1, r3
 8000a22:	4825      	ldr	r0, [pc, #148]	; (8000ab8 <MX_TIM1_Init+0x150>)
 8000a24:	f004 fba6 	bl	8005174 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a2e:	f000 fabd 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a32:	2360      	movs	r3, #96	; 0x60
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_TIM1_Init+0x150>)
 8000a58:	f003 fdf0 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a62:	f000 faa3 	bl	8000fac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <MX_TIM1_Init+0x150>)
 8000a9c:	f004 fbf8 	bl	8005290 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000aa6:	f000 fa81 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <MX_TIM1_Init+0x150>)
 8000aac:	f000 ffc4 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 8000ab0:	bf00      	nop
 8000ab2:	3768      	adds	r7, #104	; 0x68
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000308 	.word	0x20000308
 8000abc:	40010000 	.word	0x40010000

08000ac0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000af4:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <MX_TIM3_Init+0xec>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000afa:	225f      	movs	r2, #95	; 0x5f
 8000afc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = driverSpeed -1;
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b06:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b18:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b1a:	f003 fbdd 	bl	80042d8 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b24:	f000 fa42 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b32:	4619      	mov	r1, r3
 8000b34:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b36:	f003 fe95 	bl	8004864 <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b40:	f000 fa34 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b46:	f003 fc1e 	bl	8004386 <HAL_TIM_PWM_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b50:	f000 fa2c 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b64:	f004 fb06 	bl	8005174 <HAL_TIMEx_MasterConfigSynchronization>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b6e:	f000 fa1d 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b72:	2360      	movs	r3, #96	; 0x60
 8000b74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b8a:	f003 fd57 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000b94:	f000 fa0a 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000b9a:	f000 ff4d 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 8000b9e:	bf00      	nop
 8000ba0:	3738      	adds	r7, #56	; 0x38
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000354 	.word	0x20000354
 8000bac:	40000400 	.word	0x40000400

08000bb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000be2:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000be4:	4a2d      	ldr	r2, [pc, #180]	; (8000c9c <MX_TIM4_Init+0xec>)
 8000be6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000bea:	225f      	movs	r2, #95	; 0x5f
 8000bec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = driverSpeed -1;
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000bf6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c08:	4823      	ldr	r0, [pc, #140]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000c0a:	f003 fb65 	bl	80042d8 <HAL_TIM_Base_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000c14:	f000 f9ca 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c22:	4619      	mov	r1, r3
 8000c24:	481c      	ldr	r0, [pc, #112]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000c26:	f003 fe1d 	bl	8004864 <HAL_TIM_ConfigClockSource>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000c30:	f000 f9bc 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000c36:	f003 fba6 	bl	8004386 <HAL_TIM_PWM_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000c40:	f000 f9b4 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4811      	ldr	r0, [pc, #68]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000c54:	f004 fa8e 	bl	8005174 <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000c5e:	f000 f9a5 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c62:	2360      	movs	r3, #96	; 0x60
 8000c64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000c7a:	f003 fcdf 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000c84:	f000 f992 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_TIM4_Init+0xe8>)
 8000c8a:	f000 fed5 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 8000c8e:	bf00      	nop
 8000c90:	3738      	adds	r7, #56	; 0x38
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200003a0 	.word	0x200003a0
 8000c9c:	40000800 	.word	0x40000800

08000ca0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <MX_UART4_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000ce4:	f004 fb52 	bl	800538c <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 f95d 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200003ec 	.word	0x200003ec
 8000cfc:	40004c00 	.word	0x40004c00

08000d00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <MX_USART3_UART_Init+0x5c>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART3_UART_Init+0x58>)
 8000d44:	f004 fb22 	bl	800538c <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d4e:	f000 f92d 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000474 	.word	0x20000474
 8000d5c:	40004800 	.word	0x40004800

08000d60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6e:	2206      	movs	r2, #6
 8000d70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da4:	f002 f803 	bl	8002dae <HAL_PCD_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dae:	f000 f8fd 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200004fc 	.word	0x200004fc

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	; 0x38
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b70      	ldr	r3, [pc, #448]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a6f      	ldr	r2, [pc, #444]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b6d      	ldr	r3, [pc, #436]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	623b      	str	r3, [r7, #32]
 8000de8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	4b6a      	ldr	r3, [pc, #424]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a69      	ldr	r2, [pc, #420]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b67      	ldr	r3, [pc, #412]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a63      	ldr	r2, [pc, #396]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b61      	ldr	r3, [pc, #388]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b5e      	ldr	r3, [pc, #376]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a5d      	ldr	r2, [pc, #372]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e32:	4b58      	ldr	r3, [pc, #352]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a57      	ldr	r2, [pc, #348]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0320 	and.w	r3, r3, #32
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	4b52      	ldr	r3, [pc, #328]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a51      	ldr	r2, [pc, #324]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b4f      	ldr	r3, [pc, #316]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b49      	ldr	r3, [pc, #292]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7a:	4b46      	ldr	r3, [pc, #280]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a45      	ldr	r2, [pc, #276]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <MX_GPIO_Init+0x1d8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000e98:	483f      	ldr	r0, [pc, #252]	; (8000f98 <MX_GPIO_Init+0x1dc>)
 8000e9a:	f001 fe47 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotorBIn1_GPIO_Port, MotorBIn1_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea4:	483d      	ldr	r0, [pc, #244]	; (8000f9c <MX_GPIO_Init+0x1e0>)
 8000ea6:	f001 fe41 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotorBIn2_GPIO_Port, MotorBIn2_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb0:	483b      	ldr	r0, [pc, #236]	; (8000fa0 <MX_GPIO_Init+0x1e4>)
 8000eb2:	f001 fe3b 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|MotorAIn1_Pin|MotorAIn2_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f244 2140 	movw	r1, #16960	; 0x4240
 8000ebc:	4839      	ldr	r0, [pc, #228]	; (8000fa4 <MX_GPIO_Init+0x1e8>)
 8000ebe:	f001 fe35 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4833      	ldr	r0, [pc, #204]	; (8000fa8 <MX_GPIO_Init+0x1ec>)
 8000eda:	f001 fc7b 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB6 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_6|LD2_Pin;
 8000ede:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4828      	ldr	r0, [pc, #160]	; (8000f98 <MX_GPIO_Init+0x1dc>)
 8000ef8:	f001 fc6c 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotorBIn1_Pin */
  GPIO_InitStruct.Pin = MotorBIn1_Pin;
 8000efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MotorBIn1_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	4821      	ldr	r0, [pc, #132]	; (8000f9c <MX_GPIO_Init+0x1e0>)
 8000f16:	f001 fc5d 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotorBIn2_Pin */
  GPIO_InitStruct.Pin = MotorBIn2_Pin;
 8000f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MotorBIn2_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <MX_GPIO_Init+0x1e4>)
 8000f34:	f001 fc4e 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <MX_GPIO_Init+0x1e8>)
 8000f50:	f001 fc40 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <MX_GPIO_Init+0x1e8>)
 8000f68:	f001 fc34 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorAIn1_Pin MotorAIn2_Pin */
  GPIO_InitStruct.Pin = MotorAIn1_Pin|MotorAIn2_Pin;
 8000f6c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <MX_GPIO_Init+0x1e8>)
 8000f86:	f001 fc25 	bl	80027d4 <HAL_GPIO_Init>

}
 8000f8a:	bf00      	nop
 8000f8c:	3738      	adds	r7, #56	; 0x38
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40021800 	.word	0x40021800
 8000fa8:	40020800 	.word	0x40020800

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>

08000fb6 <MotorDriverInit>:

#include "main.h"
#include "motorDriver.h"
#include "pid.h"
void MotorDriverInit(MotorDriver *driver, int *xdist, int *ydist, int *xout,
		float *yout, PID_TypeDef *xctrl, PID_TypeDef *yctrl) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	603b      	str	r3, [r7, #0]
	driver->xdistance = xdist;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	601a      	str	r2, [r3, #0]
	driver->ydistance = ydist;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	605a      	str	r2, [r3, #4]
	driver->xcontOut = xout;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	609a      	str	r2, [r3, #8]
	driver->ycontOut = yout;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]
	driver->X_Controller = xctrl;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	611a      	str	r2, [r3, #16]
	driver->Y_Controller = yctrl;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6a3a      	ldr	r2, [r7, #32]
 8000fe6:	615a      	str	r2, [r3, #20]
	initPIDController(driver->X_Controller, driver->xdistance, driver->xcontOut, 0);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6918      	ldr	r0, [r3, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6819      	ldr	r1, [r3, #0]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f000 f80f 	bl	8001018 <initPIDController>
	initPIDController(driver->Y_Controller, driver->ydistance, driver->ycontOut,
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6958      	ldr	r0, [r3, #20]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6859      	ldr	r1, [r3, #4]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	f000 f806 	bl	8001018 <initPIDController>
			TARGET_DISTANCE);
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0000      	movs	r0, r0
	...

08001018 <initPIDController>:
void initPIDController(PID_TypeDef *cont, int *inputVar, int *outputVar,
		int steadyState) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
	PID(cont, inputVar, outputVar, steadyState, Kp, Ki, Kd, _PID_P_ON_E,
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	9201      	str	r2, [sp, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	9200      	str	r2, [sp, #0]
 8001030:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8001034:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
 8001038:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 f88d 	bl	8001160 <PID>
			_PID_CD_DIRECT);
	PID_SetMode(cont, _PID_MODE_AUTOMATIC);
 8001046:	2101      	movs	r1, #1
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f000 f9a5 	bl	8001398 <PID_SetMode>
	PID_SetSampleTime(cont, CONTROLLER_SAMPLE_RATE);
 800104e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 fafc 	bl	8001650 <PID_SetSampleTime>
	PID_SetOutputLimits(cont, 1, CONTROLLER_OUTPUT_LIMIT);
 8001058:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001070 <initPIDController+0x58>
 800105c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f9b7 	bl	80013d4 <PID_SetOutputLimits>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	00000000 	.word	0x00000000
 8001074:	40590000 	.word	0x40590000

08001078 <motorDriverUpdate>:
void motorDriverUpdate(MotorDriver * motorDriver){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	PID_Compute(motorDriver->X_Controller);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f8b7 	bl	80011f8 <PID_Compute>
	PID_Compute(motorDriver->Y_Controller);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f8b2 	bl	80011f8 <PID_Compute>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <goForward>:
void goForward(MotorDriver *motorDriver) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	// code to make the motor driver move forward

	HAL_GPIO_WritePin(MotorAIn1_GPIO_Port, MotorAIn1_Pin, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <goForward+0x40>)
 80010ac:	f001 fd3e 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIn2_GPIO_Port, MotorAIn2_Pin, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b6:	4809      	ldr	r0, [pc, #36]	; (80010dc <goForward+0x40>)
 80010b8:	f001 fd38 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBIn1_GPIO_Port, MotorBIn1_Pin, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <goForward+0x44>)
 80010c4:	f001 fd32 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBIn2_GPIO_Port, MotorBIn2_Pin, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <goForward+0x48>)
 80010d0:	f001 fd2c 	bl	8002b2c <HAL_GPIO_WritePin>

}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40021000 	.word	0x40021000

080010e8 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001118:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd06      	ble.n	8001130 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 800112e:	e011      	b.n	8001154 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800113c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001144:	d400      	bmi.n	8001148 <PID_Init+0x60>
}
 8001146:	e005      	b.n	8001154 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6278      	str	r0, [r7, #36]	; 0x24
 8001168:	6239      	str	r1, [r7, #32]
 800116a:	61fa      	str	r2, [r7, #28]
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001172:	ed87 1b02 	vstr	d1, [r7, #8]
 8001176:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	6a3a      	ldr	r2, [r7, #32]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	2200      	movs	r2, #0
 8001190:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001192:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80011e8 <PID+0x88>
 8001196:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80011f0 <PID+0x90>
 800119a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800119c:	f000 f91a 	bl	80013d4 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	2264      	movs	r2, #100	; 0x64
 80011a4:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80011a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011aa:	4619      	mov	r1, r3
 80011ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011ae:	f000 fa13 	bl	80015d8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80011b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011b6:	4619      	mov	r1, r3
 80011b8:	ed97 2b00 	vldr	d2, [r7]
 80011bc:	ed97 1b02 	vldr	d1, [r7, #8]
 80011c0:	ed97 0b04 	vldr	d0, [r7, #16]
 80011c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011c6:	f000 f977 	bl	80014b8 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80011ca:	f000 fec7 	bl	8001f5c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	1ad2      	subs	r2, r2, r3
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	605a      	str	r2, [r3, #4]
	
}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	00000000 	.word	0x00000000
 80011ec:	406fe000 	.word	0x406fe000
	...

080011f8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <PID_Compute+0x14>
	{
		return _FALSE;
 8001208:	2300      	movs	r3, #0
 800120a:	e0c1      	b.n	8001390 <PID_Compute+0x198>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800120c:	f000 fea6 	bl	8001f5c <HAL_GetTick>
 8001210:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	6a3a      	ldr	r2, [r7, #32]
 8001222:	429a      	cmp	r2, r3
 8001224:	f0c0 80b3 	bcc.w	800138e <PID_Compute+0x196>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001238:	ed93 6b00 	vldr	d6, [r3]
 800123c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001240:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001244:	ed87 7b04 	vstr	d7, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800124e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001252:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001256:	ed87 7b02 	vstr	d7, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001266:	ed97 7b04 	vldr	d7, [r7, #16]
 800126a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800126e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10e      	bne.n	800129e <PID_Compute+0xa6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800128c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001290:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001294:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80012aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	dd06      	ble.n	80012c2 <PID_Compute+0xca>
		{
			uPID->OutputSum = uPID->OutMax;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80012c0:	e010      	b.n	80012e4 <PID_Compute+0xec>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80012ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	d505      	bpl.n	80012e4 <PID_Compute+0xec>
		{
			uPID->OutputSum = uPID->OutMin;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d009      	beq.n	8001300 <PID_Compute+0x108>
		{
			output = uPID->Kp * error;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80012f2:	ed97 6b04 	vldr	d6, [r7, #16]
 80012f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012fa:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 80012fe:	e005      	b.n	800130c <PID_Compute+0x114>
		}
		else
		{
			output = 0;
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8001318:	ed97 7b02 	vldr	d7, [r7, #8]
 800131c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001320:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001324:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001328:	ee36 7b07 	vadd.f64	d7, d6, d7
 800132c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001336:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 800133a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	dd05      	ble.n	8001350 <PID_Compute+0x158>
		{
			output = uPID->OutMax;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800134a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800134e:	e00e      	b.n	800136e <PID_Compute+0x176>
		}
		else if (output < uPID->OutMin)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001356:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 800135a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	d504      	bpl.n	800136e <PID_Compute+0x176>
		{
			output = uPID->OutMin;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800136a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001376:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001380:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <PID_Compute+0x198>
		
	}
	else
	{
		return _FALSE;
 800138e:	2300      	movs	r3, #0
	}
	
}
 8001390:	4618      	mov	r0, r3
 8001392:	3730      	adds	r7, #48	; 0x30
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	bf0c      	ite	eq
 80013aa:	2301      	moveq	r3, #1
 80013ac:	2300      	movne	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <PID_SetMode+0x2e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fe91 	bl	80010e8 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	705a      	strb	r2, [r3, #1]
	
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6178      	str	r0, [r7, #20]
 80013dc:	ed87 0b02 	vstr	d0, [r7, #8]
 80013e0:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80013e4:	ed97 6b02 	vldr	d6, [r7, #8]
 80013e8:	ed97 7b00 	vldr	d7, [r7]
 80013ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	da58      	bge.n	80014a8 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013fc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8001400:	6979      	ldr	r1, [r7, #20]
 8001402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001406:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d04b      	beq.n	80014aa <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	ed93 6b00 	vldr	d6, [r3]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001420:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd07      	ble.n	800143a <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001434:	e9c1 2300 	strd	r2, r3, [r1]
 8001438:	e012      	b.n	8001460 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	ed93 6b00 	vldr	d6, [r3]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001448:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	d506      	bpl.n	8001460 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800146c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	dd06      	ble.n	8001484 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800147c:	6979      	ldr	r1, [r7, #20]
 800147e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001482:	e012      	b.n	80014aa <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001490:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	d507      	bpl.n	80014aa <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80014a0:	6979      	ldr	r1, [r7, #20]
 80014a2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80014a6:	e000      	b.n	80014aa <PID_SetOutputLimits+0xd6>
		return;
 80014a8:	bf00      	nop
		}
		else { }
		
	}
	
}
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	0000      	movs	r0, r0
	...

080014b8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	61f8      	str	r0, [r7, #28]
 80014c0:	ed87 0b04 	vstr	d0, [r7, #16]
 80014c4:	ed87 1b02 	vstr	d1, [r7, #8]
 80014c8:	ed87 2b00 	vstr	d2, [r7]
 80014cc:	460b      	mov	r3, r1
 80014ce:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80014d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80014d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d46e      	bmi.n	80015bc <PID_SetTunings2+0x104>
 80014de:	ed97 7b02 	vldr	d7, [r7, #8]
 80014e2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	d467      	bmi.n	80015bc <PID_SetTunings2+0x104>
 80014ec:	ed97 7b00 	vldr	d7, [r7]
 80014f0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	d460      	bmi.n	80015bc <PID_SetTunings2+0x104>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	7efa      	ldrb	r2, [r7, #27]
 80014fe:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001500:	7efb      	ldrb	r3, [r7, #27]
 8001502:	2b01      	cmp	r3, #1
 8001504:	bf0c      	ite	eq
 8001506:	2301      	moveq	r3, #1
 8001508:	2300      	movne	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001512:	69f9      	ldr	r1, [r7, #28]
 8001514:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001518:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800151c:	69f9      	ldr	r1, [r7, #28]
 800151e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001522:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001526:	69f9      	ldr	r1, [r7, #28]
 8001528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800152c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800153c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80015c8 <PID_SetTunings2+0x110>
 8001540:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001544:	ed87 7b08 	vstr	d7, [r7, #32]
	
	uPID->Kp = Kp;
 8001548:	69f9      	ldr	r1, [r7, #28]
 800154a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800154e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001552:	ed97 6b02 	vldr	d6, [r7, #8]
 8001556:	ed97 7b08 	vldr	d7, [r7, #32]
 800155a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001564:	ed97 5b00 	vldr	d5, [r7]
 8001568:	ed97 6b08 	vldr	d6, [r7, #32]
 800156c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	78db      	ldrb	r3, [r3, #3]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d11f      	bne.n	80015be <PID_SetTunings2+0x106>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001584:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80015d0 <PID_SetTunings2+0x118>
 8001588:	ee36 7b47 	vsub.f64	d7, d6, d7
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001598:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80015d0 <PID_SetTunings2+0x118>
 800159c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80015ac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80015d0 <PID_SetTunings2+0x118>
 80015b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 80015ba:	e000      	b.n	80015be <PID_SetTunings2+0x106>
		return;
 80015bc:	bf00      	nop
		
	}
	
}
 80015be:	372c      	adds	r7, #44	; 0x2c
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	00000000 	.word	0x00000000
 80015cc:	408f4000 	.word	0x408f4000
	...

080015d8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d022      	beq.n	8001632 <PID_SetControllerDirection+0x5a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	78db      	ldrb	r3, [r3, #3]
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d01d      	beq.n	8001632 <PID_SetControllerDirection+0x5a>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80015fc:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001648 <PID_SetControllerDirection+0x70>
 8001600:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001610:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001648 <PID_SetControllerDirection+0x70>
 8001614:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001624:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001648 <PID_SetControllerDirection+0x70>
 8001628:	ee36 7b47 	vsub.f64	d7, d6, d7
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	70da      	strb	r2, [r3, #3]
	
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	f3af 8000 	nop.w
	...

08001650 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	dd25      	ble.n	80016ac <PID_SetSampleTime+0x5c>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001676:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800167a:	ed87 7b02 	vstr	d7, [r7, #8]
		
		uPID->Ki *= ratio;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8001684:	ed97 7b02 	vldr	d7, [r7, #8]
 8001688:	ee26 7b07 	vmul.f64	d7, d6, d7
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd /= ratio;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8001698:	ed97 6b02 	vldr	d6, [r7, #8]
 800169c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <UARTPrintf>:
#include <stdarg.h>
#include <main.h>
#include "serial.h"


void UARTPrintf(UARTClient * client,  char *formattedString,...){
 80016b8:	b40e      	push	{r1, r2, r3}
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b099      	sub	sp, #100	; 0x64
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
    char  str[80]= "";
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	224c      	movs	r2, #76	; 0x4c
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fe66 	bl	80063a0 <memset>

    /*Extract the the argument list using VA apis */
    va_list args;
    va_start(args, formattedString);
 80016d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016d8:	60fb      	str	r3, [r7, #12]
    vsprintf(str, formattedString,args);
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 fe7a 	bl	80063dc <vsiprintf>
    va_end(args);
    HAL_UART_Transmit(client->port, (uint8_t * )str, sizeof(str),HAL_MAX_DELAY);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f107 0110 	add.w	r1, r7, #16
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	2250      	movs	r2, #80	; 0x50
 80016f6:	f003 fe97 	bl	8005428 <HAL_UART_Transmit>


}
 80016fa:	bf00      	nop
 80016fc:	3764      	adds	r7, #100	; 0x64
 80016fe:	46bd      	mov	sp, r7
 8001700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001704:	b003      	add	sp, #12
 8001706:	4770      	bx	lr

08001708 <UARTPrintln>:

void UARTPrintln(UARTClient * client, char *formattedString,...){
 8001708:	b40e      	push	{r1, r2, r3}
 800170a:	b580      	push	{r7, lr}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	UARTPrintf(client, "%s\n\r",formattedString);
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4905      	ldr	r1, [pc, #20]	; (800172c <UARTPrintln+0x24>)
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffce 	bl	80016b8 <UARTPrintf>
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001726:	b003      	add	sp, #12
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	08006d0c 	.word	0x08006d0c

08001730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x44>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_MspInit+0x44>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x44>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x44>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_MspInit+0x44>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_MspInit+0x44>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <HAL_ETH_MspInit+0x158>)
 8001796:	4293      	cmp	r3, r2
 8001798:	f040 8096 	bne.w	80018c8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800179c:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a6:	6313      	str	r3, [r2, #48]	; 0x30
 80017a8:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	623b      	str	r3, [r7, #32]
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	4a46      	ldr	r2, [pc, #280]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017be:	6313      	str	r3, [r2, #48]	; 0x30
 80017c0:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4a40      	ldr	r2, [pc, #256]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
 80017d8:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	4a3a      	ldr	r2, [pc, #232]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6313      	str	r3, [r2, #48]	; 0x30
 80017f0:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 8001832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_ETH_MspInit+0x15c>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001844:	2332      	movs	r3, #50	; 0x32
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001854:	230b      	movs	r3, #11
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185c:	4619      	mov	r1, r3
 800185e:	481e      	ldr	r0, [pc, #120]	; (80018d8 <HAL_ETH_MspInit+0x160>)
 8001860:	f000 ffb8 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001864:	2386      	movs	r3, #134	; 0x86
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001874:	230b      	movs	r3, #11
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	4817      	ldr	r0, [pc, #92]	; (80018dc <HAL_ETH_MspInit+0x164>)
 8001880:	f000 ffa8 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001896:	230b      	movs	r3, #11
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	480f      	ldr	r0, [pc, #60]	; (80018e0 <HAL_ETH_MspInit+0x168>)
 80018a2:	f000 ff97 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018b8:	230b      	movs	r3, #11
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c0:	4619      	mov	r1, r3
 80018c2:	4808      	ldr	r0, [pc, #32]	; (80018e4 <HAL_ETH_MspInit+0x16c>)
 80018c4:	f000 ff86 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	3738      	adds	r7, #56	; 0x38
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40028000 	.word	0x40028000
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40021800 	.word	0x40021800

080018e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0ae      	sub	sp, #184	; 0xb8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2290      	movs	r2, #144	; 0x90
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fd49 	bl	80063a0 <memset>
  if(hi2c->Instance==I2C1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_I2C_MspInit+0xb4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d13c      	bne.n	8001992 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800191c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800191e:	2300      	movs	r3, #0
 8001920:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f8ae 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001932:	f7ff fb3b 	bl	8000fac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_I2C_MspInit+0xb8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_I2C_MspInit+0xb8>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_I2C_MspInit+0xb8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800194e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001956:	2312      	movs	r3, #18
 8001958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195c:	2301      	movs	r3, #1
 800195e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001968:	2304      	movs	r3, #4
 800196a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001972:	4619      	mov	r1, r3
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <HAL_I2C_MspInit+0xbc>)
 8001976:	f000 ff2d 	bl	80027d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_I2C_MspInit+0xb8>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_I2C_MspInit+0xb8>)
 8001980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_I2C_MspInit+0xb8>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	37b8      	adds	r7, #184	; 0xb8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40005400 	.word	0x40005400
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020400 	.word	0x40020400

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_TIM_Base_MspInit+0x80>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10c      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019d2:	e022      	b.n	8001a1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_TIM_Base_MspInit+0x88>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10c      	bne.n	80019f8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
}
 80019f6:	e010      	b.n	8001a1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10b      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800

08001a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a34      	ldr	r2, [pc, #208]	; (8001b28 <HAL_TIM_MspPostInit+0xf0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d11d      	bne.n	8001a96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_TIM_MspPostInit+0xf4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <HAL_TIM_MspPostInit+0xf4>)
 8001a60:	f043 0310 	orr.w	r3, r3, #16
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_TIM_MspPostInit+0xf4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4828      	ldr	r0, [pc, #160]	; (8001b30 <HAL_TIM_MspPostInit+0xf8>)
 8001a90:	f000 fea0 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a94:	e043      	b.n	8001b1e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <HAL_TIM_MspPostInit+0xfc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d11c      	bne.n	8001ada <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_TIM_MspPostInit+0xf4>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <HAL_TIM_MspPostInit+0xf4>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <HAL_TIM_MspPostInit+0xf4>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab8:	2340      	movs	r3, #64	; 0x40
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4819      	ldr	r0, [pc, #100]	; (8001b38 <HAL_TIM_MspPostInit+0x100>)
 8001ad4:	f000 fe7e 	bl	80027d4 <HAL_GPIO_Init>
}
 8001ad8:	e021      	b.n	8001b1e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_TIM_MspPostInit+0x104>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d11c      	bne.n	8001b1e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_TIM_MspPostInit+0xf4>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_TIM_MspPostInit+0xf4>)
 8001aea:	f043 0308 	orr.w	r3, r3, #8
 8001aee:	6313      	str	r3, [r2, #48]	; 0x30
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_TIM_MspPostInit+0xf4>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4809      	ldr	r0, [pc, #36]	; (8001b40 <HAL_TIM_MspPostInit+0x108>)
 8001b1a:	f000 fe5b 	bl	80027d4 <HAL_GPIO_Init>
}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40000800 	.word	0x40000800
 8001b40:	40020c00 	.word	0x40020c00

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0b0      	sub	sp, #192	; 0xc0
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2290      	movs	r2, #144	; 0x90
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 fc1b 	bl	80063a0 <memset>
  if(huart->Instance==UART4)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a43      	ldr	r2, [pc, #268]	; (8001c7c <HAL_UART_MspInit+0x138>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d13d      	bne.n	8001bf0 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b78:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 ff80 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b8e:	f7ff fa0d 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b92:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a3a      	ldr	r2, [pc, #232]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a34      	ldr	r2, [pc, #208]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001be6:	4619      	mov	r1, r3
 8001be8:	4826      	ldr	r0, [pc, #152]	; (8001c84 <HAL_UART_MspInit+0x140>)
 8001bea:	f000 fdf3 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bee:	e041      	b.n	8001c74 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a24      	ldr	r2, [pc, #144]	; (8001c88 <HAL_UART_MspInit+0x144>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d13c      	bne.n	8001c74 <HAL_UART_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 ff3d 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001c14:	f7ff f9ca 	bl	8000fac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_UART_MspInit+0x13c>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c62:	2307      	movs	r3, #7
 8001c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4807      	ldr	r0, [pc, #28]	; (8001c8c <HAL_UART_MspInit+0x148>)
 8001c70:	f000 fdb0 	bl	80027d4 <HAL_GPIO_Init>
}
 8001c74:	bf00      	nop
 8001c76:	37c0      	adds	r7, #192	; 0xc0
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40004c00 	.word	0x40004c00
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40004800 	.word	0x40004800
 8001c8c:	40020c00 	.word	0x40020c00

08001c90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0ae      	sub	sp, #184	; 0xb8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2290      	movs	r2, #144	; 0x90
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 fb75 	bl	80063a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cbe:	d159      	bne.n	8001d74 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001cc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cc4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fed9 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001cdc:	f7ff f966 	bl	8000fac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_PCD_MspInit+0xec>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <HAL_PCD_MspInit+0xec>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6313      	str	r3, [r2, #48]	; 0x30
 8001cec:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_PCD_MspInit+0xec>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cf8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d12:	230a      	movs	r3, #10
 8001d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4818      	ldr	r0, [pc, #96]	; (8001d80 <HAL_PCD_MspInit+0xf0>)
 8001d20:	f000 fd58 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4810      	ldr	r0, [pc, #64]	; (8001d80 <HAL_PCD_MspInit+0xf0>)
 8001d40:	f000 fd48 	bl	80027d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_PCD_MspInit+0xec>)
 8001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d48:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <HAL_PCD_MspInit+0xec>)
 8001d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4e:	6353      	str	r3, [r2, #52]	; 0x34
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_PCD_MspInit+0xec>)
 8001d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_PCD_MspInit+0xec>)
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <HAL_PCD_MspInit+0xec>)
 8001d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d66:	6453      	str	r3, [r2, #68]	; 0x44
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_PCD_MspInit+0xec>)
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d74:	bf00      	nop
 8001d76:	37b8      	adds	r7, #184	; 0xb8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <NMI_Handler+0x4>

08001d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <MemManage_Handler+0x4>

08001d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <BusFault_Handler+0x4>

08001d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <UsageFault_Handler+0x4>

08001da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd0:	f000 f8b0 	bl	8001f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <_sbrk+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <_sbrk+0x60>)
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <_sbrk+0x64>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <_sbrk+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d207      	bcs.n	8001e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e08:	f004 faa0 	bl	800634c <__errno>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	220c      	movs	r2, #12
 8001e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	e009      	b.n	8001e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <_sbrk+0x64>)
 8001e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20080000 	.word	0x20080000
 8001e38:	00000400 	.word	0x00000400
 8001e3c:	20000a0c 	.word	0x20000a0c
 8001e40:	20000a28 	.word	0x20000a28

08001e44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <SystemInit+0x20>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <SystemInit+0x20>)
 8001e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6e:	490e      	ldr	r1, [pc, #56]	; (8001ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e70:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e84:	4c0b      	ldr	r4, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e92:	f7ff ffd7 	bl	8001e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e96:	f004 fa5f 	bl	8006358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9a:	f7fe fbb5 	bl	8000608 <main>
  bx  lr    
 8001e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001eac:	08006d70 	.word	0x08006d70
  ldr r2, =_sbss
 8001eb0:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001eb4:	20000a24 	.word	0x20000a24

08001eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC_IRQHandler>

08001eba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebe:	2003      	movs	r0, #3
 8001ec0:	f000 f92e 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f000 f805 	bl	8001ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eca:	f7ff fc31 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_InitTick+0x54>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x58>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f93b 	bl	800216e <HAL_SYSTICK_Config>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00e      	b.n	8001f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b0f      	cmp	r3, #15
 8001f06:	d80a      	bhi.n	8001f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f000 f911 	bl	8002136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f14:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <HAL_InitTick+0x5c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x20>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x24>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_IncTick+0x24>)
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000a10 	.word	0x20000a10

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000a10 	.word	0x20000a10

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d005      	beq.n	8001f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_Delay+0x44>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9a:	bf00      	nop
 8001f9c:	f7ff ffde 	bl	8001f5c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d8f7      	bhi.n	8001f9c <HAL_Delay+0x28>
  {
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008

08001fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <__NVIC_SetPriorityGrouping+0x40>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__NVIC_SetPriorityGrouping+0x40>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00
 8002000:	05fa0000 	.word	0x05fa0000

08002004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	; (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f7ff ff8e 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff47 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff5c 	bl	8002004 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff8e 	bl	8002074 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5d 	bl	8002020 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffb0 	bl	80020dc <SysTick_Config>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06a      	b.n	8002270 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2223      	movs	r2, #35	; 0x23
 80021a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fae3 	bl	8001778 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_ETH_Init+0xf0>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a30      	ldr	r2, [pc, #192]	; (8002278 <HAL_ETH_Init+0xf0>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_ETH_Init+0xf0>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_ETH_Init+0xf4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a2b      	ldr	r2, [pc, #172]	; (800227c <HAL_ETH_Init+0xf4>)
 80021d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_ETH_Init+0xf4>)
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4927      	ldr	r1, [pc, #156]	; (800227c <HAL_ETH_Init+0xf4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_ETH_Init+0xf4>)
 80021e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002200:	f7ff feac 	bl	8001f5c <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002206:	e011      	b.n	800222c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002208:	f7ff fea8 	bl	8001f5c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002216:	d909      	bls.n	800222c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2204      	movs	r2, #4
 800221c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	22e0      	movs	r2, #224	; 0xe0
 8002224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e021      	b.n	8002270 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1e4      	bne.n	8002208 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f958 	bl	80024f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f9ff 	bl	8002648 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fa55 	bl	80026fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	461a      	mov	r2, r3
 8002256:	2100      	movs	r1, #0
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f9bd 	bl	80025d8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2210      	movs	r2, #16
 800226a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	40013800 	.word	0x40013800

08002280 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4b51      	ldr	r3, [pc, #324]	; (80023dc <ETH_SetMACConfig+0x15c>)
 8002296:	4013      	ands	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	7c1b      	ldrb	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <ETH_SetMACConfig+0x28>
 80022a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022a6:	e000      	b.n	80022aa <ETH_SetMACConfig+0x2a>
 80022a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	7c5b      	ldrb	r3, [r3, #17]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <ETH_SetMACConfig+0x38>
 80022b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022b6:	e000      	b.n	80022ba <ETH_SetMACConfig+0x3a>
 80022b8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	7fdb      	ldrb	r3, [r3, #31]
 80022c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	7f92      	ldrb	r2, [r2, #30]
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d102      	bne.n	80022de <ETH_SetMACConfig+0x5e>
 80022d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022dc:	e000      	b.n	80022e0 <ETH_SetMACConfig+0x60>
 80022de:	2200      	movs	r2, #0
                        macconf->Speed |
 80022e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	7f1b      	ldrb	r3, [r3, #28]
 80022e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	791b      	ldrb	r3, [r3, #4]
 80022f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022fe:	2a00      	cmp	r2, #0
 8002300:	d102      	bne.n	8002308 <ETH_SetMACConfig+0x88>
 8002302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002306:	e000      	b.n	800230a <ETH_SetMACConfig+0x8a>
 8002308:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800230a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	7bdb      	ldrb	r3, [r3, #15]
 8002310:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002312:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002318:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002320:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002322:	4313      	orrs	r3, r2
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff fe1a 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002356:	4013      	ands	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002366:	2a00      	cmp	r2, #0
 8002368:	d101      	bne.n	800236e <ETH_SetMACConfig+0xee>
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	e000      	b.n	8002370 <ETH_SetMACConfig+0xf0>
 800236e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002370:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002376:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800237e:	2a01      	cmp	r2, #1
 8002380:	d101      	bne.n	8002386 <ETH_SetMACConfig+0x106>
 8002382:	2208      	movs	r2, #8
 8002384:	e000      	b.n	8002388 <ETH_SetMACConfig+0x108>
 8002386:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002388:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002390:	2a01      	cmp	r2, #1
 8002392:	d101      	bne.n	8002398 <ETH_SetMACConfig+0x118>
 8002394:	2204      	movs	r2, #4
 8002396:	e000      	b.n	800239a <ETH_SetMACConfig+0x11a>
 8002398:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800239a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80023a2:	2a01      	cmp	r2, #1
 80023a4:	d101      	bne.n	80023aa <ETH_SetMACConfig+0x12a>
 80023a6:	2202      	movs	r2, #2
 80023a8:	e000      	b.n	80023ac <ETH_SetMACConfig+0x12c>
 80023aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023ac:	4313      	orrs	r3, r2
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff fdd5 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	ff20810f 	.word	0xff20810f

080023e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <ETH_SetDMAConfig+0x110>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	7b1b      	ldrb	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <ETH_SetDMAConfig+0x2c>
 8002406:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800240a:	e000      	b.n	800240e <ETH_SetDMAConfig+0x2e>
 800240c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	7b5b      	ldrb	r3, [r3, #13]
 8002412:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002414:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	7f52      	ldrb	r2, [r2, #29]
 800241a:	2a00      	cmp	r2, #0
 800241c:	d102      	bne.n	8002424 <ETH_SetDMAConfig+0x44>
 800241e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002422:	e000      	b.n	8002426 <ETH_SetDMAConfig+0x46>
 8002424:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002426:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	7b9b      	ldrb	r3, [r3, #14]
 800242c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800242e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002434:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	7f1b      	ldrb	r3, [r3, #28]
 800243a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800243c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7f9b      	ldrb	r3, [r3, #30]
 8002442:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002444:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800244a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002452:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002454:	4313      	orrs	r3, r2
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002464:	461a      	mov	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff fd7c 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002484:	461a      	mov	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	791b      	ldrb	r3, [r3, #4]
 800248e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002494:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800249a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7ff fd4d 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	f8de3f23 	.word	0xf8de3f23

080024f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b0a6      	sub	sp, #152	; 0x98
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002508:	2300      	movs	r3, #0
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002512:	2301      	movs	r3, #1
 8002514:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002530:	2300      	movs	r3, #0
 8002532:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800253a:	2300      	movs	r3, #0
 800253c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800255c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002560:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002568:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fe86 	bl	8002280 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002574:	2301      	movs	r3, #1
 8002576:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002578:	2301      	movs	r3, #1
 800257a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800257c:	2301      	movs	r3, #1
 800257e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002582:	2301      	movs	r3, #1
 8002584:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800259a:	2301      	movs	r3, #1
 800259c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025a0:	2301      	movs	r3, #1
 80025a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025a8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ff08 	bl	80023e0 <ETH_SetDMAConfig>
}
 80025d0:	bf00      	nop
 80025d2:	3798      	adds	r7, #152	; 0x98
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3305      	adds	r3, #5
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	3204      	adds	r2, #4
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <ETH_MACAddressConfig+0x68>)
 80025fa:	4413      	add	r3, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3303      	adds	r3, #3
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	061a      	lsls	r2, r3, #24
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3302      	adds	r3, #2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3301      	adds	r3, #1
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	4313      	orrs	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <ETH_MACAddressConfig+0x6c>)
 800262a:	4413      	add	r3, r2
 800262c:	461a      	mov	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6013      	str	r3, [r2, #0]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40028040 	.word	0x40028040
 8002644:	40028044 	.word	0x40028044

08002648 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e03e      	b.n	80026d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68d9      	ldr	r1, [r3, #12]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	3206      	adds	r2, #6
 8002688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d80c      	bhi.n	80026b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68d9      	ldr	r1, [r3, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	461a      	mov	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	e004      	b.n	80026c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3301      	adds	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d9bd      	bls.n	8002656 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ec:	611a      	str	r2, [r3, #16]
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	e046      	b.n	8002796 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6919      	ldr	r1, [r3, #16]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002744:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800274c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	3212      	adds	r2, #18
 8002762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d80c      	bhi.n	8002786 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6919      	ldr	r1, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	e004      	b.n	8002790 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3301      	adds	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d9b5      	bls.n	8002708 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c6:	60da      	str	r2, [r3, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e175      	b.n	8002ae0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	429a      	cmp	r2, r3
 800280e:	f040 8164 	bne.w	8002ada <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d005      	beq.n	800282a <HAL_GPIO_Init+0x56>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d130      	bne.n	800288c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 0201 	and.w	r2, r3, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d017      	beq.n	80028c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d123      	bne.n	800291c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	08da      	lsrs	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3208      	adds	r2, #8
 80028dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	69b9      	ldr	r1, [r7, #24]
 8002918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80be 	beq.w	8002ada <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_GPIO_Init+0x324>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a65      	ldr	r2, [pc, #404]	; (8002af8 <HAL_GPIO_Init+0x324>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_GPIO_Init+0x324>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002976:	4a61      	ldr	r2, [pc, #388]	; (8002afc <HAL_GPIO_Init+0x328>)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3302      	adds	r3, #2
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_GPIO_Init+0x32c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d037      	beq.n	8002a12 <HAL_GPIO_Init+0x23e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <HAL_GPIO_Init+0x330>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d031      	beq.n	8002a0e <HAL_GPIO_Init+0x23a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a56      	ldr	r2, [pc, #344]	; (8002b08 <HAL_GPIO_Init+0x334>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02b      	beq.n	8002a0a <HAL_GPIO_Init+0x236>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a55      	ldr	r2, [pc, #340]	; (8002b0c <HAL_GPIO_Init+0x338>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d025      	beq.n	8002a06 <HAL_GPIO_Init+0x232>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a54      	ldr	r2, [pc, #336]	; (8002b10 <HAL_GPIO_Init+0x33c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01f      	beq.n	8002a02 <HAL_GPIO_Init+0x22e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a53      	ldr	r2, [pc, #332]	; (8002b14 <HAL_GPIO_Init+0x340>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x22a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_GPIO_Init+0x344>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x226>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a51      	ldr	r2, [pc, #324]	; (8002b1c <HAL_GPIO_Init+0x348>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x222>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a50      	ldr	r2, [pc, #320]	; (8002b20 <HAL_GPIO_Init+0x34c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x21e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4f      	ldr	r2, [pc, #316]	; (8002b24 <HAL_GPIO_Init+0x350>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x21a>
 80029ea:	2309      	movs	r3, #9
 80029ec:	e012      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029ee:	230a      	movs	r3, #10
 80029f0:	e010      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029f2:	2308      	movs	r3, #8
 80029f4:	e00e      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00c      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029fa:	2306      	movs	r3, #6
 80029fc:	e00a      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029fe:	2305      	movs	r3, #5
 8002a00:	e008      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a02:	2304      	movs	r3, #4
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e004      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e002      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a12:	2300      	movs	r3, #0
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f002 0203 	and.w	r2, r2, #3
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	4093      	lsls	r3, r2
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a24:	4935      	ldr	r1, [pc, #212]	; (8002afc <HAL_GPIO_Init+0x328>)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a32:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a56:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a80:	4a29      	ldr	r2, [pc, #164]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a86:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	f67f ae86 	bls.w	80027f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40013800 	.word	0x40013800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40021400 	.word	0x40021400
 8002b18:	40021800 	.word	0x40021800
 8002b1c:	40021c00 	.word	0x40021c00
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40022400 	.word	0x40022400
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07f      	b.n	8002c72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe feae 	bl	80018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	e006      	b.n	8002be8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002be6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d104      	bne.n	8002bfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_I2C_Init+0x11c>)
 8002c06:	430b      	orrs	r3, r1
 8002c08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69d9      	ldr	r1, [r3, #28]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	02008000 	.word	0x02008000

08002c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d138      	bne.n	8002d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e032      	b.n	8002d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d139      	bne.n	8002da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e033      	b.n	8002da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2224      	movs	r2, #36	; 0x24
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e000      	b.n	8002da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db0:	b08f      	sub	sp, #60	; 0x3c
 8002db2:	af0a      	add	r7, sp, #40	; 0x28
 8002db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e116      	b.n	8002fee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe ff58 	bl	8001c90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2203      	movs	r2, #3
 8002de4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 f808 	bl	8005e14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	687e      	ldr	r6, [r7, #4]
 8002e0c:	466d      	mov	r5, sp
 8002e0e:	f106 0410 	add.w	r4, r6, #16
 8002e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e22:	1d33      	adds	r3, r6, #4
 8002e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e26:	6838      	ldr	r0, [r7, #0]
 8002e28:	f002 ff9c 	bl	8005d64 <USB_CoreInit>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0d7      	b.n	8002fee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fff6 	bl	8005e36 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
 8002e4e:	e04a      	b.n	8002ee6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	333d      	adds	r3, #61	; 0x3d
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	333c      	adds	r3, #60	; 0x3c
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	b298      	uxth	r0, r3
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3344      	adds	r3, #68	; 0x44
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3340      	adds	r3, #64	; 0x40
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3348      	adds	r3, #72	; 0x48
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334c      	adds	r3, #76	; 0x4c
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3354      	adds	r3, #84	; 0x54
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d3af      	bcc.n	8002e50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e044      	b.n	8002f80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d3b5      	bcc.n	8002ef6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	687e      	ldr	r6, [r7, #4]
 8002f92:	466d      	mov	r5, sp
 8002f94:	f106 0410 	add.w	r4, r6, #16
 8002f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fa8:	1d33      	adds	r3, r6, #4
 8002faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fac:	6838      	ldr	r0, [r7, #0]
 8002fae:	f002 ff8f 	bl	8005ed0 <USB_DevInit>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e014      	b.n	8002fee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d102      	bne.n	8002fe2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f80b 	bl	8002ff8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 f94d 	bl	8006286 <USB_DevDisconnect>

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ff8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_PCDEx_ActivateLPM+0x44>)
 8003028:	4313      	orrs	r3, r2
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	10000003 	.word	0x10000003

08003040 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800306e:	f7fe ff75 	bl	8001f5c <HAL_GetTick>
 8003072:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003074:	e009      	b.n	800308a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003076:	f7fe ff71 	bl	8001f5c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003084:	d901      	bls.n	800308a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e022      	b.n	80030d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800308a:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003096:	d1ee      	bne.n	8003076 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800309e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a4:	f7fe ff5a 	bl	8001f5c <HAL_GetTick>
 80030a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030aa:	e009      	b.n	80030c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030ac:	f7fe ff56 	bl	8001f5c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ba:	d901      	bls.n	80030c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e007      	b.n	80030d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030cc:	d1ee      	bne.n	80030ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e29b      	b.n	800362e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8087 	beq.w	8003212 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003104:	4b96      	ldr	r3, [pc, #600]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b04      	cmp	r3, #4
 800310e:	d00c      	beq.n	800312a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003110:	4b93      	ldr	r3, [pc, #588]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	d112      	bne.n	8003142 <HAL_RCC_OscConfig+0x62>
 800311c:	4b90      	ldr	r3, [pc, #576]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003128:	d10b      	bne.n	8003142 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312a:	4b8d      	ldr	r3, [pc, #564]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d06c      	beq.n	8003210 <HAL_RCC_OscConfig+0x130>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d168      	bne.n	8003210 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e275      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x7a>
 800314c:	4b84      	ldr	r3, [pc, #528]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a83      	ldr	r2, [pc, #524]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e02e      	b.n	80031b8 <HAL_RCC_OscConfig+0xd8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x9c>
 8003162:	4b7f      	ldr	r3, [pc, #508]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a7e      	ldr	r2, [pc, #504]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7b      	ldr	r2, [pc, #492]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e01d      	b.n	80031b8 <HAL_RCC_OscConfig+0xd8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 8003186:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a75      	ldr	r2, [pc, #468]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800318c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b73      	ldr	r3, [pc, #460]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a72      	ldr	r2, [pc, #456]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0xd8>
 80031a0:	4b6f      	ldr	r3, [pc, #444]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6e      	ldr	r2, [pc, #440]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b6c      	ldr	r3, [pc, #432]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6b      	ldr	r2, [pc, #428]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fecc 	bl	8001f5c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fec8 	bl	8001f5c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e229      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b61      	ldr	r3, [pc, #388]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe feb8 	bl	8001f5c <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe feb4 	bl	8001f5c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e215      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	4b57      	ldr	r3, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x110>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d069      	beq.n	80032f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800321e:	4b50      	ldr	r3, [pc, #320]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322a:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b08      	cmp	r3, #8
 8003234:	d11c      	bne.n	8003270 <HAL_RCC_OscConfig+0x190>
 8003236:	4b4a      	ldr	r3, [pc, #296]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d116      	bne.n	8003270 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x17a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e1e9      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325a:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	493d      	ldr	r1, [pc, #244]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	e040      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d023      	beq.n	80032c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003278:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe fe6a 	bl	8001f5c <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328c:	f7fe fe66 	bl	8001f5c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1c7      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	4b30      	ldr	r3, [pc, #192]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4929      	ldr	r1, [pc, #164]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
 80032be:	e018      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fe46 	bl	8001f5c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fe fe42 	bl	8001f5c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e1a3      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d038      	beq.n	8003370 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d019      	beq.n	800333a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	4a15      	ldr	r2, [pc, #84]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fe fe23 	bl	8001f5c <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331a:	f7fe fe1f 	bl	8001f5c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e180      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x23a>
 8003338:	e01a      	b.n	8003370 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	4a08      	ldr	r2, [pc, #32]	; (8003360 <HAL_RCC_OscConfig+0x280>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fe fe09 	bl	8001f5c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334e:	f7fe fe05 	bl	8001f5c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d903      	bls.n	8003364 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e166      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
 8003360:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	4b92      	ldr	r3, [pc, #584]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ee      	bne.n	800334e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80a4 	beq.w	80034c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337e:	4b8c      	ldr	r3, [pc, #560]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10d      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	4b89      	ldr	r3, [pc, #548]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a88      	ldr	r2, [pc, #544]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b86      	ldr	r3, [pc, #536]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a6:	4b83      	ldr	r3, [pc, #524]	; (80035b4 <HAL_RCC_OscConfig+0x4d4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033b2:	4b80      	ldr	r3, [pc, #512]	; (80035b4 <HAL_RCC_OscConfig+0x4d4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7f      	ldr	r2, [pc, #508]	; (80035b4 <HAL_RCC_OscConfig+0x4d4>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7fe fdcd 	bl	8001f5c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c6:	f7fe fdc9 	bl	8001f5c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b64      	cmp	r3, #100	; 0x64
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e12a      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d8:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_RCC_OscConfig+0x4d4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x31a>
 80033ec:	4b70      	ldr	r3, [pc, #448]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a6f      	ldr	r2, [pc, #444]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	e02d      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x33c>
 8003402:	4b6b      	ldr	r3, [pc, #428]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a6a      	ldr	r2, [pc, #424]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	4a67      	ldr	r2, [pc, #412]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	6713      	str	r3, [r2, #112]	; 0x70
 800341a:	e01c      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b05      	cmp	r3, #5
 8003422:	d10c      	bne.n	800343e <HAL_RCC_OscConfig+0x35e>
 8003424:	4b62      	ldr	r3, [pc, #392]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a61      	ldr	r2, [pc, #388]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	4b5f      	ldr	r3, [pc, #380]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	4a5e      	ldr	r2, [pc, #376]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6713      	str	r3, [r2, #112]	; 0x70
 800343c:	e00b      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
 800343e:	4b5c      	ldr	r3, [pc, #368]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a5b      	ldr	r2, [pc, #364]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
 800344a:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d015      	beq.n	800348a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7fe fd7d 	bl	8001f5c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	e00a      	b.n	800347c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7fe fd79 	bl	8001f5c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	; 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0d8      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	4b4c      	ldr	r3, [pc, #304]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ee      	beq.n	8003466 <HAL_RCC_OscConfig+0x386>
 8003488:	e014      	b.n	80034b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fe fd67 	bl	8001f5c <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fe fd63 	bl	8001f5c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0c2      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a8:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ee      	bne.n	8003492 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d105      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80034c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80ae 	beq.w	800362c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d0:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d06d      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d14b      	bne.n	800357c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e4:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a31      	ldr	r2, [pc, #196]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe fd34 	bl	8001f5c <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fd30 	bl	8001f5c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e091      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	071b      	lsls	r3, r3, #28
 8003542:	491b      	ldr	r1, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 800354e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fd02 	bl	8001f5c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe fcfe 	bl	8001f5c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e05f      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x47c>
 800357a:	e057      	b.n	800362c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 8003582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe fce8 	bl	8001f5c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe fce4 	bl	8001f5c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e045      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x4b0>
 80035ae:	e03d      	b.n	800362c <HAL_RCC_OscConfig+0x54c>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035b8:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <HAL_RCC_OscConfig+0x558>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d030      	beq.n	8003628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d129      	bne.n	8003628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d122      	bne.n	8003628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d119      	bne.n	8003628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d10f      	bne.n	8003628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d107      	bne.n	8003628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800

0800363c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0d0      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 020f 	bic.w	r2, r3, #15
 800366a:	4965      	ldr	r1, [pc, #404]	; (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b8      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800369c:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a58      	ldr	r2, [pc, #352]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b4:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a52      	ldr	r2, [pc, #328]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b50      	ldr	r3, [pc, #320]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	494d      	ldr	r1, [pc, #308]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d040      	beq.n	8003760 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d115      	bne.n	800371e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b41      	ldr	r3, [pc, #260]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e073      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06b      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b39      	ldr	r3, [pc, #228]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4936      	ldr	r1, [pc, #216]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003730:	f7fe fc14 	bl	8001f5c <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fe fc10 	bl	8001f5c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e053      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d210      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 020f 	bic.w	r2, r3, #15
 8003776:	4922      	ldr	r1, [pc, #136]	; (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e032      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4916      	ldr	r1, [pc, #88]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	490e      	ldr	r1, [pc, #56]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ce:	f000 f821 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490a      	ldr	r1, [pc, #40]	; (8003808 <HAL_RCC_ClockConfig+0x1cc>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <HAL_RCC_ClockConfig+0x1d0>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_RCC_ClockConfig+0x1d4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fb70 	bl	8001ed4 <HAL_InitTick>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00
 8003804:	40023800 	.word	0x40023800
 8003808:	08006d14 	.word	0x08006d14
 800380c:	20000000 	.word	0x20000000
 8003810:	20000004 	.word	0x20000004

08003814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003818:	b094      	sub	sp, #80	; 0x50
 800381a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	647b      	str	r3, [r7, #68]	; 0x44
 8003820:	2300      	movs	r3, #0
 8003822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003824:	2300      	movs	r3, #0
 8003826:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800382c:	4b79      	ldr	r3, [pc, #484]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b08      	cmp	r3, #8
 8003836:	d00d      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x40>
 8003838:	2b08      	cmp	r3, #8
 800383a:	f200 80e1 	bhi.w	8003a00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x34>
 8003842:	2b04      	cmp	r3, #4
 8003844:	d003      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x3a>
 8003846:	e0db      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x204>)
 800384a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800384c:	e0db      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800384e:	4b73      	ldr	r3, [pc, #460]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003852:	e0d8      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003854:	4b6f      	ldr	r3, [pc, #444]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800385c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800385e:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d063      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386a:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	2200      	movs	r2, #0
 8003872:	63bb      	str	r3, [r7, #56]	; 0x38
 8003874:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387c:	633b      	str	r3, [r7, #48]	; 0x30
 800387e:	2300      	movs	r3, #0
 8003880:	637b      	str	r3, [r7, #52]	; 0x34
 8003882:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003886:	4622      	mov	r2, r4
 8003888:	462b      	mov	r3, r5
 800388a:	f04f 0000 	mov.w	r0, #0
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	0159      	lsls	r1, r3, #5
 8003894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003898:	0150      	lsls	r0, r2, #5
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4621      	mov	r1, r4
 80038a0:	1a51      	subs	r1, r2, r1
 80038a2:	6139      	str	r1, [r7, #16]
 80038a4:	4629      	mov	r1, r5
 80038a6:	eb63 0301 	sbc.w	r3, r3, r1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b8:	4659      	mov	r1, fp
 80038ba:	018b      	lsls	r3, r1, #6
 80038bc:	4651      	mov	r1, sl
 80038be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038c2:	4651      	mov	r1, sl
 80038c4:	018a      	lsls	r2, r1, #6
 80038c6:	4651      	mov	r1, sl
 80038c8:	ebb2 0801 	subs.w	r8, r2, r1
 80038cc:	4659      	mov	r1, fp
 80038ce:	eb63 0901 	sbc.w	r9, r3, r1
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038e6:	4690      	mov	r8, r2
 80038e8:	4699      	mov	r9, r3
 80038ea:	4623      	mov	r3, r4
 80038ec:	eb18 0303 	adds.w	r3, r8, r3
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	462b      	mov	r3, r5
 80038f4:	eb49 0303 	adc.w	r3, r9, r3
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003906:	4629      	mov	r1, r5
 8003908:	024b      	lsls	r3, r1, #9
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003910:	4621      	mov	r1, r4
 8003912:	024a      	lsls	r2, r1, #9
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391a:	2200      	movs	r2, #0
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
 800391e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003924:	f7fc fcdc 	bl	80002e0 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4613      	mov	r3, r2
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003930:	e058      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003932:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	2200      	movs	r2, #0
 800393a:	4618      	mov	r0, r3
 800393c:	4611      	mov	r1, r2
 800393e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	2300      	movs	r3, #0
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800394c:	4642      	mov	r2, r8
 800394e:	464b      	mov	r3, r9
 8003950:	f04f 0000 	mov.w	r0, #0
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	0159      	lsls	r1, r3, #5
 800395a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395e:	0150      	lsls	r0, r2, #5
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4641      	mov	r1, r8
 8003966:	ebb2 0a01 	subs.w	sl, r2, r1
 800396a:	4649      	mov	r1, r9
 800396c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800397c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003984:	ebb2 040a 	subs.w	r4, r2, sl
 8003988:	eb63 050b 	sbc.w	r5, r3, fp
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	00eb      	lsls	r3, r5, #3
 8003996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800399a:	00e2      	lsls	r2, r4, #3
 800399c:	4614      	mov	r4, r2
 800399e:	461d      	mov	r5, r3
 80039a0:	4643      	mov	r3, r8
 80039a2:	18e3      	adds	r3, r4, r3
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	464b      	mov	r3, r9
 80039a8:	eb45 0303 	adc.w	r3, r5, r3
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ba:	4629      	mov	r1, r5
 80039bc:	028b      	lsls	r3, r1, #10
 80039be:	4621      	mov	r1, r4
 80039c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039c4:	4621      	mov	r1, r4
 80039c6:	028a      	lsls	r2, r1, #10
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ce:	2200      	movs	r2, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	61fa      	str	r2, [r7, #28]
 80039d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d8:	f7fc fc82 	bl	80002e0 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80039f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3750      	adds	r7, #80	; 0x50
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200

08003a20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000000 	.word	0x20000000

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0a9b      	lsrs	r3, r3, #10
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4903      	ldr	r1, [pc, #12]	; (8003a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	08006d24 	.word	0x08006d24

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a64:	f7ff ffdc 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0b5b      	lsrs	r3, r3, #13
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	; (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	08006d24 	.word	0x08006d24

08003a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d012      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ab0:	4b69      	ldr	r3, [pc, #420]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a68      	ldr	r2, [pc, #416]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aba:	6093      	str	r3, [r2, #8]
 8003abc:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	4964      	ldr	r1, [pc, #400]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	4959      	ldr	r1, [pc, #356]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b00:	d101      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d017      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b1e:	4b4e      	ldr	r3, [pc, #312]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	494a      	ldr	r1, [pc, #296]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 808b 	beq.w	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b6c:	4b3a      	ldr	r3, [pc, #232]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	4a39      	ldr	r2, [pc, #228]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b76:	6413      	str	r3, [r2, #64]	; 0x40
 8003b78:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b84:	4b35      	ldr	r3, [pc, #212]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a34      	ldr	r2, [pc, #208]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fe f9e4 	bl	8001f5c <HAL_GetTick>
 8003b94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b98:	f7fe f9e0 	bl	8001f5c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e38f      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bb6:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d035      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d02e      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd4:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bdc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bde:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d114      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe f9a8 	bl	8001f5c <HAL_GetTick>
 8003c0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7fe f9a4 	bl	8001f5c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e351      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0ee      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3e:	d111      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c4e:	400b      	ands	r3, r1
 8003c50:	4901      	ldr	r1, [pc, #4]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	0ffffcff 	.word	0x0ffffcff
 8003c64:	4bac      	ldr	r3, [pc, #688]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4aab      	ldr	r2, [pc, #684]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c6e:	6093      	str	r3, [r2, #8]
 8003c70:	4ba9      	ldr	r3, [pc, #676]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	49a6      	ldr	r1, [pc, #664]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d010      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c8e:	4ba2      	ldr	r3, [pc, #648]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c94:	4aa0      	ldr	r2, [pc, #640]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c9e:	4b9e      	ldr	r3, [pc, #632]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	499b      	ldr	r1, [pc, #620]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cbc:	4b96      	ldr	r3, [pc, #600]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cca:	4993      	ldr	r1, [pc, #588]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cde:	4b8e      	ldr	r3, [pc, #568]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cec:	498a      	ldr	r1, [pc, #552]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d00:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d0e:	4982      	ldr	r1, [pc, #520]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d22:	4b7d      	ldr	r3, [pc, #500]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4979      	ldr	r1, [pc, #484]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d44:	4b74      	ldr	r3, [pc, #464]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4971      	ldr	r1, [pc, #452]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d66:	4b6c      	ldr	r3, [pc, #432]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	f023 020c 	bic.w	r2, r3, #12
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d74:	4968      	ldr	r1, [pc, #416]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d88:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	4960      	ldr	r1, [pc, #384]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003daa:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db8:	4957      	ldr	r1, [pc, #348]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dcc:	4b52      	ldr	r3, [pc, #328]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	494f      	ldr	r1, [pc, #316]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dee:	4b4a      	ldr	r3, [pc, #296]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	4946      	ldr	r1, [pc, #280]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e10:	4b41      	ldr	r3, [pc, #260]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	493e      	ldr	r1, [pc, #248]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e32:	4b39      	ldr	r3, [pc, #228]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e40:	4935      	ldr	r1, [pc, #212]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e62:	492d      	ldr	r1, [pc, #180]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d011      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e84:	4924      	ldr	r1, [pc, #144]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e94:	d101      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eb6:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec4:	4914      	ldr	r1, [pc, #80]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee8:	490b      	ldr	r1, [pc, #44]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00f      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0c:	4902      	ldr	r1, [pc, #8]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f14:	e002      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f28:	4b8a      	ldr	r3, [pc, #552]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	4986      	ldr	r1, [pc, #536]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f4c:	4b81      	ldr	r3, [pc, #516]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5c:	497d      	ldr	r1, [pc, #500]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d006      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80d6 	beq.w	8004124 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f78:	4b76      	ldr	r3, [pc, #472]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a75      	ldr	r2, [pc, #468]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f84:	f7fd ffea 	bl	8001f5c <HAL_GetTick>
 8003f88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f8c:	f7fd ffe6 	bl	8001f5c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e195      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f9e:	4b6d      	ldr	r3, [pc, #436]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d021      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11d      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fbe:	4b65      	ldr	r3, [pc, #404]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fcc:	4b61      	ldr	r3, [pc, #388]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd2:	0e1b      	lsrs	r3, r3, #24
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	4958      	ldr	r1, [pc, #352]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02e      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004024:	d129      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004026:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004034:	4b47      	ldr	r3, [pc, #284]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800403a:	0f1b      	lsrs	r3, r3, #28
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	019a      	lsls	r2, r3, #6
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	431a      	orrs	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	071b      	lsls	r3, r3, #28
 800405a:	493e      	ldr	r1, [pc, #248]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004062:	4b3c      	ldr	r3, [pc, #240]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004068:	f023 021f 	bic.w	r2, r3, #31
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	3b01      	subs	r3, #1
 8004072:	4938      	ldr	r1, [pc, #224]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01d      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004086:	4b33      	ldr	r3, [pc, #204]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408c:	0e1b      	lsrs	r3, r3, #24
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004094:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800409a:	0f1b      	lsrs	r3, r3, #28
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	019a      	lsls	r2, r3, #6
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	061b      	lsls	r3, r3, #24
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	071b      	lsls	r3, r3, #28
 80040ba:	4926      	ldr	r1, [pc, #152]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d011      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	019a      	lsls	r2, r3, #6
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	071b      	lsls	r3, r3, #28
 80040ea:	491a      	ldr	r1, [pc, #104]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040f2:	4b18      	ldr	r3, [pc, #96]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a17      	ldr	r2, [pc, #92]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fe:	f7fd ff2d 	bl	8001f5c <HAL_GetTick>
 8004102:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004106:	f7fd ff29 	bl	8001f5c <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b64      	cmp	r3, #100	; 0x64
 8004112:	d901      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e0d8      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b01      	cmp	r3, #1
 8004128:	f040 80ce 	bne.w	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a08      	ldr	r2, [pc, #32]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004138:	f7fd ff10 	bl	8001f5c <HAL_GetTick>
 800413c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800413e:	e00b      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004140:	f7fd ff0c 	bl	8001f5c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d904      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0bb      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004158:	4b5e      	ldr	r3, [pc, #376]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004164:	d0ec      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02e      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d12a      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800418e:	4b51      	ldr	r3, [pc, #324]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800419c:	4b4d      	ldr	r3, [pc, #308]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	0f1b      	lsrs	r3, r3, #28
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	019a      	lsls	r2, r3, #6
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	061b      	lsls	r3, r3, #24
 80041bc:	431a      	orrs	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	071b      	lsls	r3, r3, #28
 80041c2:	4944      	ldr	r1, [pc, #272]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041ca:	4b42      	ldr	r3, [pc, #264]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	3b01      	subs	r3, #1
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	493d      	ldr	r1, [pc, #244]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d022      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f8:	d11d      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041fa:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	0e1b      	lsrs	r3, r3, #24
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004208:	4b32      	ldr	r3, [pc, #200]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	0f1b      	lsrs	r3, r3, #28
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	019a      	lsls	r2, r3, #6
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	431a      	orrs	r2, r3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	061b      	lsls	r3, r3, #24
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	071b      	lsls	r3, r3, #28
 800422e:	4929      	ldr	r1, [pc, #164]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d028      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	0e1b      	lsrs	r3, r3, #24
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004250:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	019a      	lsls	r2, r3, #6
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	4917      	ldr	r1, [pc, #92]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800427e:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	4911      	ldr	r1, [pc, #68]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0e      	ldr	r2, [pc, #56]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800429a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a0:	f7fd fe5c 	bl	8001f5c <HAL_GetTick>
 80042a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042a8:	f7fd fe58 	bl	8001f5c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e007      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c6:	d1ef      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800

080042d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e049      	b.n	800437e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd fb52 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f000 fb6e 	bl	80049f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e049      	b.n	800442c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f841 	bl	8004434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f000 fb17 	bl	80049f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <HAL_TIM_PWM_Start+0x24>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e03c      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d109      	bne.n	8004486 <HAL_TIM_PWM_Start+0x3e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e02f      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d109      	bne.n	80044a0 <HAL_TIM_PWM_Start+0x58>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	bf14      	ite	ne
 8004498:	2301      	movne	r3, #1
 800449a:	2300      	moveq	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e022      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d109      	bne.n	80044ba <HAL_TIM_PWM_Start+0x72>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	bf14      	ite	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	2300      	moveq	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	e015      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d109      	bne.n	80044d4 <HAL_TIM_PWM_Start+0x8c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	bf14      	ite	ne
 80044cc:	2301      	movne	r3, #1
 80044ce:	2300      	moveq	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	e008      	b.n	80044e6 <HAL_TIM_PWM_Start+0x9e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e092      	b.n	8004614 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_PWM_Start+0xb6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044fc:	e023      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d104      	bne.n	800450e <HAL_TIM_PWM_Start+0xc6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800450c:	e01b      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d104      	bne.n	800451e <HAL_TIM_PWM_Start+0xd6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451c:	e013      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start+0xe6>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800452c:	e00b      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b10      	cmp	r3, #16
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Start+0xf6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800453c:	e003      	b.n	8004546 <HAL_TIM_PWM_Start+0xfe>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2201      	movs	r2, #1
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fdea 	bl	8005128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a30      	ldr	r2, [pc, #192]	; (800461c <HAL_TIM_PWM_Start+0x1d4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d004      	beq.n	8004568 <HAL_TIM_PWM_Start+0x120>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a2f      	ldr	r2, [pc, #188]	; (8004620 <HAL_TIM_PWM_Start+0x1d8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_TIM_PWM_Start+0x124>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_TIM_PWM_Start+0x126>
 800456c:	2300      	movs	r3, #0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004580:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a25      	ldr	r2, [pc, #148]	; (800461c <HAL_TIM_PWM_Start+0x1d4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d022      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x18a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004594:	d01d      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x18a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a22      	ldr	r2, [pc, #136]	; (8004624 <HAL_TIM_PWM_Start+0x1dc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d018      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x18a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a20      	ldr	r2, [pc, #128]	; (8004628 <HAL_TIM_PWM_Start+0x1e0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d013      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x18a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1f      	ldr	r2, [pc, #124]	; (800462c <HAL_TIM_PWM_Start+0x1e4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00e      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x18a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <HAL_TIM_PWM_Start+0x1d8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x18a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <HAL_TIM_PWM_Start+0x1e8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x18a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_TIM_PWM_Start+0x1ec>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d115      	bne.n	80045fe <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	4b17      	ldr	r3, [pc, #92]	; (8004638 <HAL_TIM_PWM_Start+0x1f0>)
 80045da:	4013      	ands	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	d015      	beq.n	8004610 <HAL_TIM_PWM_Start+0x1c8>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ea:	d011      	beq.n	8004610 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fc:	e008      	b.n	8004610 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	e000      	b.n	8004612 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40010000 	.word	0x40010000
 8004620:	40010400 	.word	0x40010400
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40000c00 	.word	0x40000c00
 8004630:	40014000 	.word	0x40014000
 8004634:	40001800 	.word	0x40001800
 8004638:	00010007 	.word	0x00010007

0800463c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004656:	2302      	movs	r3, #2
 8004658:	e0ff      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b14      	cmp	r3, #20
 8004666:	f200 80f0 	bhi.w	800484a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	080046c5 	.word	0x080046c5
 8004674:	0800484b 	.word	0x0800484b
 8004678:	0800484b 	.word	0x0800484b
 800467c:	0800484b 	.word	0x0800484b
 8004680:	08004705 	.word	0x08004705
 8004684:	0800484b 	.word	0x0800484b
 8004688:	0800484b 	.word	0x0800484b
 800468c:	0800484b 	.word	0x0800484b
 8004690:	08004747 	.word	0x08004747
 8004694:	0800484b 	.word	0x0800484b
 8004698:	0800484b 	.word	0x0800484b
 800469c:	0800484b 	.word	0x0800484b
 80046a0:	08004787 	.word	0x08004787
 80046a4:	0800484b 	.word	0x0800484b
 80046a8:	0800484b 	.word	0x0800484b
 80046ac:	0800484b 	.word	0x0800484b
 80046b0:	080047c9 	.word	0x080047c9
 80046b4:	0800484b 	.word	0x0800484b
 80046b8:	0800484b 	.word	0x0800484b
 80046bc:	0800484b 	.word	0x0800484b
 80046c0:	08004809 	.word	0x08004809
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fa34 	bl	8004b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0204 	bic.w	r2, r2, #4
 80046ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6999      	ldr	r1, [r3, #24]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	619a      	str	r2, [r3, #24]
      break;
 8004702:	e0a5      	b.n	8004850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fa86 	bl	8004c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6999      	ldr	r1, [r3, #24]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	021a      	lsls	r2, r3, #8
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	619a      	str	r2, [r3, #24]
      break;
 8004744:	e084      	b.n	8004850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fadd 	bl	8004d0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0208 	orr.w	r2, r2, #8
 8004760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0204 	bic.w	r2, r2, #4
 8004770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69d9      	ldr	r1, [r3, #28]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	61da      	str	r2, [r3, #28]
      break;
 8004784:	e064      	b.n	8004850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fb33 	bl	8004df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69d9      	ldr	r1, [r3, #28]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	021a      	lsls	r2, r3, #8
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	61da      	str	r2, [r3, #28]
      break;
 80047c6:	e043      	b.n	8004850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fb6a 	bl	8004ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0208 	orr.w	r2, r2, #8
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0204 	bic.w	r2, r2, #4
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004806:	e023      	b.n	8004850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fb9c 	bl	8004f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004822:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004832:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	021a      	lsls	r2, r3, #8
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004848:	e002      	b.n	8004850 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
      break;
 800484e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop

08004864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIM_ConfigClockSource+0x1c>
 800487c:	2302      	movs	r3, #2
 800487e:	e0b4      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x186>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4b56      	ldr	r3, [pc, #344]	; (80049f4 <HAL_TIM_ConfigClockSource+0x190>)
 800489c:	4013      	ands	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b8:	d03e      	beq.n	8004938 <HAL_TIM_ConfigClockSource+0xd4>
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	f200 8087 	bhi.w	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c6:	f000 8086 	beq.w	80049d6 <HAL_TIM_ConfigClockSource+0x172>
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ce:	d87f      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b70      	cmp	r3, #112	; 0x70
 80048d2:	d01a      	beq.n	800490a <HAL_TIM_ConfigClockSource+0xa6>
 80048d4:	2b70      	cmp	r3, #112	; 0x70
 80048d6:	d87b      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b60      	cmp	r3, #96	; 0x60
 80048da:	d050      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x11a>
 80048dc:	2b60      	cmp	r3, #96	; 0x60
 80048de:	d877      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b50      	cmp	r3, #80	; 0x50
 80048e2:	d03c      	beq.n	800495e <HAL_TIM_ConfigClockSource+0xfa>
 80048e4:	2b50      	cmp	r3, #80	; 0x50
 80048e6:	d873      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d058      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x13a>
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d86f      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b30      	cmp	r3, #48	; 0x30
 80048f2:	d064      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x15a>
 80048f4:	2b30      	cmp	r3, #48	; 0x30
 80048f6:	d86b      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d060      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x15a>
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d867      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05c      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x15a>
 8004904:	2b10      	cmp	r3, #16
 8004906:	d05a      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x15a>
 8004908:	e062      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6899      	ldr	r1, [r3, #8]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f000 fbe5 	bl	80050e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800492c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	609a      	str	r2, [r3, #8]
      break;
 8004936:	e04f      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	6899      	ldr	r1, [r3, #8]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f000 fbce 	bl	80050e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800495a:	609a      	str	r2, [r3, #8]
      break;
 800495c:	e03c      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	461a      	mov	r2, r3
 800496c:	f000 fb42 	bl	8004ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2150      	movs	r1, #80	; 0x50
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fb9b 	bl	80050b2 <TIM_ITRx_SetConfig>
      break;
 800497c:	e02c      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6859      	ldr	r1, [r3, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	461a      	mov	r2, r3
 800498c:	f000 fb61 	bl	8005052 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2160      	movs	r1, #96	; 0x60
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fb8b 	bl	80050b2 <TIM_ITRx_SetConfig>
      break;
 800499c:	e01c      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6859      	ldr	r1, [r3, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f000 fb22 	bl	8004ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2140      	movs	r1, #64	; 0x40
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fb7b 	bl	80050b2 <TIM_ITRx_SetConfig>
      break;
 80049bc:	e00c      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f000 fb72 	bl	80050b2 <TIM_ITRx_SetConfig>
      break;
 80049ce:	e003      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
      break;
 80049d4:	e000      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	fffeff88 	.word	0xfffeff88

080049f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a40      	ldr	r2, [pc, #256]	; (8004b0c <TIM_Base_SetConfig+0x114>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a16:	d00f      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a3d      	ldr	r2, [pc, #244]	; (8004b10 <TIM_Base_SetConfig+0x118>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00b      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a3c      	ldr	r2, [pc, #240]	; (8004b14 <TIM_Base_SetConfig+0x11c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	; (8004b18 <TIM_Base_SetConfig+0x120>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a3a      	ldr	r2, [pc, #232]	; (8004b1c <TIM_Base_SetConfig+0x124>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d108      	bne.n	8004a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <TIM_Base_SetConfig+0x114>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02b      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d027      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2c      	ldr	r2, [pc, #176]	; (8004b10 <TIM_Base_SetConfig+0x118>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d023      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <TIM_Base_SetConfig+0x11c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01f      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <TIM_Base_SetConfig+0x120>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01b      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <TIM_Base_SetConfig+0x124>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d017      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a28      	ldr	r2, [pc, #160]	; (8004b20 <TIM_Base_SetConfig+0x128>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a27      	ldr	r2, [pc, #156]	; (8004b24 <TIM_Base_SetConfig+0x12c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00f      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	; (8004b28 <TIM_Base_SetConfig+0x130>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00b      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a25      	ldr	r2, [pc, #148]	; (8004b2c <TIM_Base_SetConfig+0x134>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d007      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <TIM_Base_SetConfig+0x138>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d003      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	; (8004b34 <TIM_Base_SetConfig+0x13c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d108      	bne.n	8004abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <TIM_Base_SetConfig+0x114>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0xf8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <TIM_Base_SetConfig+0x124>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d103      	bne.n	8004af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	615a      	str	r2, [r3, #20]
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800
 8004b18:	40000c00 	.word	0x40000c00
 8004b1c:	40010400 	.word	0x40010400
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800
 8004b2c:	40001800 	.word	0x40001800
 8004b30:	40001c00 	.word	0x40001c00
 8004b34:	40002000 	.word	0x40002000

08004b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f023 0201 	bic.w	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <TIM_OC1_SetConfig+0xd8>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f023 0302 	bic.w	r3, r3, #2
 8004b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	; (8004c14 <TIM_OC1_SetConfig+0xdc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_OC1_SetConfig+0x64>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a20      	ldr	r2, [pc, #128]	; (8004c18 <TIM_OC1_SetConfig+0xe0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d10c      	bne.n	8004bb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0308 	bic.w	r3, r3, #8
 8004ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 0304 	bic.w	r3, r3, #4
 8004bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <TIM_OC1_SetConfig+0xdc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_OC1_SetConfig+0x8e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <TIM_OC1_SetConfig+0xe0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d111      	bne.n	8004bea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	621a      	str	r2, [r3, #32]
}
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	fffeff8f 	.word	0xfffeff8f
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40010400 	.word	0x40010400

08004c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0210 	bic.w	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <TIM_OC2_SetConfig+0xe4>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0320 	bic.w	r3, r3, #32
 8004c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a23      	ldr	r2, [pc, #140]	; (8004d04 <TIM_OC2_SetConfig+0xe8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_OC2_SetConfig+0x68>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a22      	ldr	r2, [pc, #136]	; (8004d08 <TIM_OC2_SetConfig+0xec>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d10d      	bne.n	8004ca0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <TIM_OC2_SetConfig+0xe8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC2_SetConfig+0x94>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <TIM_OC2_SetConfig+0xec>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d113      	bne.n	8004cd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	feff8fff 	.word	0xfeff8fff
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40010400 	.word	0x40010400

08004d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <TIM_OC3_SetConfig+0xe0>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0303 	bic.w	r3, r3, #3
 8004d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a22      	ldr	r2, [pc, #136]	; (8004df0 <TIM_OC3_SetConfig+0xe4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d003      	beq.n	8004d72 <TIM_OC3_SetConfig+0x66>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a21      	ldr	r2, [pc, #132]	; (8004df4 <TIM_OC3_SetConfig+0xe8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10d      	bne.n	8004d8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <TIM_OC3_SetConfig+0xe4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_OC3_SetConfig+0x92>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <TIM_OC3_SetConfig+0xe8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d113      	bne.n	8004dc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	fffeff8f 	.word	0xfffeff8f
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40010400 	.word	0x40010400

08004df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <TIM_OC4_SetConfig+0xa4>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	031b      	lsls	r3, r3, #12
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <TIM_OC4_SetConfig+0xa8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_OC4_SetConfig+0x68>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a12      	ldr	r2, [pc, #72]	; (8004ea4 <TIM_OC4_SetConfig+0xac>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d109      	bne.n	8004e74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	019b      	lsls	r3, r3, #6
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	621a      	str	r2, [r3, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	feff8fff 	.word	0xfeff8fff
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	40010400 	.word	0x40010400

08004ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <TIM_OC5_SetConfig+0x98>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <TIM_OC5_SetConfig+0x9c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC5_SetConfig+0x5e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <TIM_OC5_SetConfig+0xa0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d109      	bne.n	8004f1a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	621a      	str	r2, [r3, #32]
}
 8004f34:	bf00      	nop
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	fffeff8f 	.word	0xfffeff8f
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40010400 	.word	0x40010400

08004f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <TIM_OC6_SetConfig+0x9c>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	051b      	lsls	r3, r3, #20
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a13      	ldr	r2, [pc, #76]	; (8004fec <TIM_OC6_SetConfig+0xa0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC6_SetConfig+0x60>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <TIM_OC6_SetConfig+0xa4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d109      	bne.n	8004fc0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	029b      	lsls	r3, r3, #10
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	feff8fff 	.word	0xfeff8fff
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40010400 	.word	0x40010400

08004ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0201 	bic.w	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800501e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 030a 	bic.w	r3, r3, #10
 8005030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005052:	b480      	push	{r7}
 8005054:	b087      	sub	sp, #28
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f023 0210 	bic.w	r2, r3, #16
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800507c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	031b      	lsls	r3, r3, #12
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800508e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f043 0307 	orr.w	r3, r3, #7
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	431a      	orrs	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4313      	orrs	r3, r2
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	609a      	str	r2, [r3, #8]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2201      	movs	r2, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a1a      	ldr	r2, [r3, #32]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	43db      	mvns	r3, r3
 800514a:	401a      	ands	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	fa01 f303 	lsl.w	r3, r1, r3
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005188:	2302      	movs	r3, #2
 800518a:	e06d      	b.n	8005268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a30      	ldr	r2, [pc, #192]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2f      	ldr	r2, [pc, #188]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d108      	bne.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a20      	ldr	r2, [pc, #128]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d022      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fe:	d01d      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1d      	ldr	r2, [pc, #116]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d018      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00e      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a15      	ldr	r2, [pc, #84]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a16      	ldr	r2, [pc, #88]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10c      	bne.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	4313      	orrs	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40010000 	.word	0x40010000
 8005278:	40010400 	.word	0x40010400
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800
 8005284:	40000c00 	.word	0x40000c00
 8005288:	40014000 	.word	0x40014000
 800528c:	40001800 	.word	0x40001800

08005290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e065      	b.n	8005378 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a16      	ldr	r2, [pc, #88]	; (8005384 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a14      	ldr	r2, [pc, #80]	; (8005388 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d115      	bne.n	8005366 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	051b      	lsls	r3, r3, #20
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	40010000 	.word	0x40010000
 8005388:	40010400 	.word	0x40010400

0800538c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e040      	b.n	8005420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fc fbc8 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2224      	movs	r2, #36	; 0x24
 80053b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0201 	bic.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8b0 	bl	8005530 <UART_SetConfig>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e022      	b.n	8005420 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fb08 	bl	80059f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fb8f 	bl	8005b3c <UART_CheckIdleState>
 800541e:	4603      	mov	r3, r0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543c:	2b20      	cmp	r3, #32
 800543e:	d171      	bne.n	8005524 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_UART_Transmit+0x24>
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e06a      	b.n	8005526 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2221      	movs	r2, #33	; 0x21
 800545c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800545e:	f7fc fd7d 	bl	8001f5c <HAL_GetTick>
 8005462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	88fa      	ldrh	r2, [r7, #6]
 8005468:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547c:	d108      	bne.n	8005490 <HAL_UART_Transmit+0x68>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d104      	bne.n	8005490 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e003      	b.n	8005498 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005498:	e02c      	b.n	80054f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	2180      	movs	r1, #128	; 0x80
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fb96 	bl	8005bd6 <UART_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e038      	b.n	8005526 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10b      	bne.n	80054d2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	3302      	adds	r3, #2
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	e007      	b.n	80054e2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	781a      	ldrb	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	3301      	adds	r3, #1
 80054e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1cc      	bne.n	800549a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2200      	movs	r2, #0
 8005508:	2140      	movs	r1, #64	; 0x40
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fb63 	bl	8005bd6 <UART_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e005      	b.n	8005526 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4ba6      	ldr	r3, [pc, #664]	; (80057f4 <UART_SetConfig+0x2c4>)
 800555c:	4013      	ands	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	6979      	ldr	r1, [r7, #20]
 8005564:	430b      	orrs	r3, r1
 8005566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a94      	ldr	r2, [pc, #592]	; (80057f8 <UART_SetConfig+0x2c8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d120      	bne.n	80055ee <UART_SetConfig+0xbe>
 80055ac:	4b93      	ldr	r3, [pc, #588]	; (80057fc <UART_SetConfig+0x2cc>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d816      	bhi.n	80055e8 <UART_SetConfig+0xb8>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0x90>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d1 	.word	0x080055d1
 80055c4:	080055dd 	.word	0x080055dd
 80055c8:	080055d7 	.word	0x080055d7
 80055cc:	080055e3 	.word	0x080055e3
 80055d0:	2301      	movs	r3, #1
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e150      	b.n	8005878 <UART_SetConfig+0x348>
 80055d6:	2302      	movs	r3, #2
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e14d      	b.n	8005878 <UART_SetConfig+0x348>
 80055dc:	2304      	movs	r3, #4
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e14a      	b.n	8005878 <UART_SetConfig+0x348>
 80055e2:	2308      	movs	r3, #8
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e147      	b.n	8005878 <UART_SetConfig+0x348>
 80055e8:	2310      	movs	r3, #16
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e144      	b.n	8005878 <UART_SetConfig+0x348>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a83      	ldr	r2, [pc, #524]	; (8005800 <UART_SetConfig+0x2d0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d132      	bne.n	800565e <UART_SetConfig+0x12e>
 80055f8:	4b80      	ldr	r3, [pc, #512]	; (80057fc <UART_SetConfig+0x2cc>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d828      	bhi.n	8005658 <UART_SetConfig+0x128>
 8005606:	a201      	add	r2, pc, #4	; (adr r2, 800560c <UART_SetConfig+0xdc>)
 8005608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560c:	08005641 	.word	0x08005641
 8005610:	08005659 	.word	0x08005659
 8005614:	08005659 	.word	0x08005659
 8005618:	08005659 	.word	0x08005659
 800561c:	0800564d 	.word	0x0800564d
 8005620:	08005659 	.word	0x08005659
 8005624:	08005659 	.word	0x08005659
 8005628:	08005659 	.word	0x08005659
 800562c:	08005647 	.word	0x08005647
 8005630:	08005659 	.word	0x08005659
 8005634:	08005659 	.word	0x08005659
 8005638:	08005659 	.word	0x08005659
 800563c:	08005653 	.word	0x08005653
 8005640:	2300      	movs	r3, #0
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e118      	b.n	8005878 <UART_SetConfig+0x348>
 8005646:	2302      	movs	r3, #2
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e115      	b.n	8005878 <UART_SetConfig+0x348>
 800564c:	2304      	movs	r3, #4
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e112      	b.n	8005878 <UART_SetConfig+0x348>
 8005652:	2308      	movs	r3, #8
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e10f      	b.n	8005878 <UART_SetConfig+0x348>
 8005658:	2310      	movs	r3, #16
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e10c      	b.n	8005878 <UART_SetConfig+0x348>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a68      	ldr	r2, [pc, #416]	; (8005804 <UART_SetConfig+0x2d4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d120      	bne.n	80056aa <UART_SetConfig+0x17a>
 8005668:	4b64      	ldr	r3, [pc, #400]	; (80057fc <UART_SetConfig+0x2cc>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005672:	2b30      	cmp	r3, #48	; 0x30
 8005674:	d013      	beq.n	800569e <UART_SetConfig+0x16e>
 8005676:	2b30      	cmp	r3, #48	; 0x30
 8005678:	d814      	bhi.n	80056a4 <UART_SetConfig+0x174>
 800567a:	2b20      	cmp	r3, #32
 800567c:	d009      	beq.n	8005692 <UART_SetConfig+0x162>
 800567e:	2b20      	cmp	r3, #32
 8005680:	d810      	bhi.n	80056a4 <UART_SetConfig+0x174>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <UART_SetConfig+0x15c>
 8005686:	2b10      	cmp	r3, #16
 8005688:	d006      	beq.n	8005698 <UART_SetConfig+0x168>
 800568a:	e00b      	b.n	80056a4 <UART_SetConfig+0x174>
 800568c:	2300      	movs	r3, #0
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e0f2      	b.n	8005878 <UART_SetConfig+0x348>
 8005692:	2302      	movs	r3, #2
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e0ef      	b.n	8005878 <UART_SetConfig+0x348>
 8005698:	2304      	movs	r3, #4
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e0ec      	b.n	8005878 <UART_SetConfig+0x348>
 800569e:	2308      	movs	r3, #8
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e0e9      	b.n	8005878 <UART_SetConfig+0x348>
 80056a4:	2310      	movs	r3, #16
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e0e6      	b.n	8005878 <UART_SetConfig+0x348>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a56      	ldr	r2, [pc, #344]	; (8005808 <UART_SetConfig+0x2d8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d120      	bne.n	80056f6 <UART_SetConfig+0x1c6>
 80056b4:	4b51      	ldr	r3, [pc, #324]	; (80057fc <UART_SetConfig+0x2cc>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056be:	2bc0      	cmp	r3, #192	; 0xc0
 80056c0:	d013      	beq.n	80056ea <UART_SetConfig+0x1ba>
 80056c2:	2bc0      	cmp	r3, #192	; 0xc0
 80056c4:	d814      	bhi.n	80056f0 <UART_SetConfig+0x1c0>
 80056c6:	2b80      	cmp	r3, #128	; 0x80
 80056c8:	d009      	beq.n	80056de <UART_SetConfig+0x1ae>
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d810      	bhi.n	80056f0 <UART_SetConfig+0x1c0>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <UART_SetConfig+0x1a8>
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d006      	beq.n	80056e4 <UART_SetConfig+0x1b4>
 80056d6:	e00b      	b.n	80056f0 <UART_SetConfig+0x1c0>
 80056d8:	2300      	movs	r3, #0
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e0cc      	b.n	8005878 <UART_SetConfig+0x348>
 80056de:	2302      	movs	r3, #2
 80056e0:	77fb      	strb	r3, [r7, #31]
 80056e2:	e0c9      	b.n	8005878 <UART_SetConfig+0x348>
 80056e4:	2304      	movs	r3, #4
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e0c6      	b.n	8005878 <UART_SetConfig+0x348>
 80056ea:	2308      	movs	r3, #8
 80056ec:	77fb      	strb	r3, [r7, #31]
 80056ee:	e0c3      	b.n	8005878 <UART_SetConfig+0x348>
 80056f0:	2310      	movs	r3, #16
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e0c0      	b.n	8005878 <UART_SetConfig+0x348>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a44      	ldr	r2, [pc, #272]	; (800580c <UART_SetConfig+0x2dc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d125      	bne.n	800574c <UART_SetConfig+0x21c>
 8005700:	4b3e      	ldr	r3, [pc, #248]	; (80057fc <UART_SetConfig+0x2cc>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800570e:	d017      	beq.n	8005740 <UART_SetConfig+0x210>
 8005710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005714:	d817      	bhi.n	8005746 <UART_SetConfig+0x216>
 8005716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800571a:	d00b      	beq.n	8005734 <UART_SetConfig+0x204>
 800571c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005720:	d811      	bhi.n	8005746 <UART_SetConfig+0x216>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <UART_SetConfig+0x1fe>
 8005726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572a:	d006      	beq.n	800573a <UART_SetConfig+0x20a>
 800572c:	e00b      	b.n	8005746 <UART_SetConfig+0x216>
 800572e:	2300      	movs	r3, #0
 8005730:	77fb      	strb	r3, [r7, #31]
 8005732:	e0a1      	b.n	8005878 <UART_SetConfig+0x348>
 8005734:	2302      	movs	r3, #2
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e09e      	b.n	8005878 <UART_SetConfig+0x348>
 800573a:	2304      	movs	r3, #4
 800573c:	77fb      	strb	r3, [r7, #31]
 800573e:	e09b      	b.n	8005878 <UART_SetConfig+0x348>
 8005740:	2308      	movs	r3, #8
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e098      	b.n	8005878 <UART_SetConfig+0x348>
 8005746:	2310      	movs	r3, #16
 8005748:	77fb      	strb	r3, [r7, #31]
 800574a:	e095      	b.n	8005878 <UART_SetConfig+0x348>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a2f      	ldr	r2, [pc, #188]	; (8005810 <UART_SetConfig+0x2e0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d125      	bne.n	80057a2 <UART_SetConfig+0x272>
 8005756:	4b29      	ldr	r3, [pc, #164]	; (80057fc <UART_SetConfig+0x2cc>)
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005764:	d017      	beq.n	8005796 <UART_SetConfig+0x266>
 8005766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800576a:	d817      	bhi.n	800579c <UART_SetConfig+0x26c>
 800576c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005770:	d00b      	beq.n	800578a <UART_SetConfig+0x25a>
 8005772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005776:	d811      	bhi.n	800579c <UART_SetConfig+0x26c>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <UART_SetConfig+0x254>
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005780:	d006      	beq.n	8005790 <UART_SetConfig+0x260>
 8005782:	e00b      	b.n	800579c <UART_SetConfig+0x26c>
 8005784:	2301      	movs	r3, #1
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e076      	b.n	8005878 <UART_SetConfig+0x348>
 800578a:	2302      	movs	r3, #2
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e073      	b.n	8005878 <UART_SetConfig+0x348>
 8005790:	2304      	movs	r3, #4
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e070      	b.n	8005878 <UART_SetConfig+0x348>
 8005796:	2308      	movs	r3, #8
 8005798:	77fb      	strb	r3, [r7, #31]
 800579a:	e06d      	b.n	8005878 <UART_SetConfig+0x348>
 800579c:	2310      	movs	r3, #16
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e06a      	b.n	8005878 <UART_SetConfig+0x348>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <UART_SetConfig+0x2e4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d138      	bne.n	800581e <UART_SetConfig+0x2ee>
 80057ac:	4b13      	ldr	r3, [pc, #76]	; (80057fc <UART_SetConfig+0x2cc>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80057b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057ba:	d017      	beq.n	80057ec <UART_SetConfig+0x2bc>
 80057bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057c0:	d82a      	bhi.n	8005818 <UART_SetConfig+0x2e8>
 80057c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c6:	d00b      	beq.n	80057e0 <UART_SetConfig+0x2b0>
 80057c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057cc:	d824      	bhi.n	8005818 <UART_SetConfig+0x2e8>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <UART_SetConfig+0x2aa>
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	d006      	beq.n	80057e6 <UART_SetConfig+0x2b6>
 80057d8:	e01e      	b.n	8005818 <UART_SetConfig+0x2e8>
 80057da:	2300      	movs	r3, #0
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e04b      	b.n	8005878 <UART_SetConfig+0x348>
 80057e0:	2302      	movs	r3, #2
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e048      	b.n	8005878 <UART_SetConfig+0x348>
 80057e6:	2304      	movs	r3, #4
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e045      	b.n	8005878 <UART_SetConfig+0x348>
 80057ec:	2308      	movs	r3, #8
 80057ee:	77fb      	strb	r3, [r7, #31]
 80057f0:	e042      	b.n	8005878 <UART_SetConfig+0x348>
 80057f2:	bf00      	nop
 80057f4:	efff69f3 	.word	0xefff69f3
 80057f8:	40011000 	.word	0x40011000
 80057fc:	40023800 	.word	0x40023800
 8005800:	40004400 	.word	0x40004400
 8005804:	40004800 	.word	0x40004800
 8005808:	40004c00 	.word	0x40004c00
 800580c:	40005000 	.word	0x40005000
 8005810:	40011400 	.word	0x40011400
 8005814:	40007800 	.word	0x40007800
 8005818:	2310      	movs	r3, #16
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e02c      	b.n	8005878 <UART_SetConfig+0x348>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a72      	ldr	r2, [pc, #456]	; (80059ec <UART_SetConfig+0x4bc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d125      	bne.n	8005874 <UART_SetConfig+0x344>
 8005828:	4b71      	ldr	r3, [pc, #452]	; (80059f0 <UART_SetConfig+0x4c0>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005832:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005836:	d017      	beq.n	8005868 <UART_SetConfig+0x338>
 8005838:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800583c:	d817      	bhi.n	800586e <UART_SetConfig+0x33e>
 800583e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005842:	d00b      	beq.n	800585c <UART_SetConfig+0x32c>
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005848:	d811      	bhi.n	800586e <UART_SetConfig+0x33e>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <UART_SetConfig+0x326>
 800584e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005852:	d006      	beq.n	8005862 <UART_SetConfig+0x332>
 8005854:	e00b      	b.n	800586e <UART_SetConfig+0x33e>
 8005856:	2300      	movs	r3, #0
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e00d      	b.n	8005878 <UART_SetConfig+0x348>
 800585c:	2302      	movs	r3, #2
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e00a      	b.n	8005878 <UART_SetConfig+0x348>
 8005862:	2304      	movs	r3, #4
 8005864:	77fb      	strb	r3, [r7, #31]
 8005866:	e007      	b.n	8005878 <UART_SetConfig+0x348>
 8005868:	2308      	movs	r3, #8
 800586a:	77fb      	strb	r3, [r7, #31]
 800586c:	e004      	b.n	8005878 <UART_SetConfig+0x348>
 800586e:	2310      	movs	r3, #16
 8005870:	77fb      	strb	r3, [r7, #31]
 8005872:	e001      	b.n	8005878 <UART_SetConfig+0x348>
 8005874:	2310      	movs	r3, #16
 8005876:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005880:	d15b      	bne.n	800593a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005882:	7ffb      	ldrb	r3, [r7, #31]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d828      	bhi.n	80058da <UART_SetConfig+0x3aa>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x360>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058b5 	.word	0x080058b5
 8005894:	080058bd 	.word	0x080058bd
 8005898:	080058c5 	.word	0x080058c5
 800589c:	080058db 	.word	0x080058db
 80058a0:	080058cb 	.word	0x080058cb
 80058a4:	080058db 	.word	0x080058db
 80058a8:	080058db 	.word	0x080058db
 80058ac:	080058db 	.word	0x080058db
 80058b0:	080058d3 	.word	0x080058d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b4:	f7fe f8c0 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 80058b8:	61b8      	str	r0, [r7, #24]
        break;
 80058ba:	e013      	b.n	80058e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058bc:	f7fe f8d0 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 80058c0:	61b8      	str	r0, [r7, #24]
        break;
 80058c2:	e00f      	b.n	80058e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c4:	4b4b      	ldr	r3, [pc, #300]	; (80059f4 <UART_SetConfig+0x4c4>)
 80058c6:	61bb      	str	r3, [r7, #24]
        break;
 80058c8:	e00c      	b.n	80058e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ca:	f7fd ffa3 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 80058ce:	61b8      	str	r0, [r7, #24]
        break;
 80058d0:	e008      	b.n	80058e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	61bb      	str	r3, [r7, #24]
        break;
 80058d8:	e004      	b.n	80058e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	77bb      	strb	r3, [r7, #30]
        break;
 80058e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d074      	beq.n	80059d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	005a      	lsls	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b0f      	cmp	r3, #15
 8005904:	d916      	bls.n	8005934 <UART_SetConfig+0x404>
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d212      	bcs.n	8005934 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f023 030f 	bic.w	r3, r3, #15
 8005916:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	b29b      	uxth	r3, r3
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	b29a      	uxth	r2, r3
 8005924:	89fb      	ldrh	r3, [r7, #14]
 8005926:	4313      	orrs	r3, r2
 8005928:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	89fa      	ldrh	r2, [r7, #14]
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	e04f      	b.n	80059d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	77bb      	strb	r3, [r7, #30]
 8005938:	e04c      	b.n	80059d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800593a:	7ffb      	ldrb	r3, [r7, #31]
 800593c:	2b08      	cmp	r3, #8
 800593e:	d828      	bhi.n	8005992 <UART_SetConfig+0x462>
 8005940:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <UART_SetConfig+0x418>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	0800596d 	.word	0x0800596d
 800594c:	08005975 	.word	0x08005975
 8005950:	0800597d 	.word	0x0800597d
 8005954:	08005993 	.word	0x08005993
 8005958:	08005983 	.word	0x08005983
 800595c:	08005993 	.word	0x08005993
 8005960:	08005993 	.word	0x08005993
 8005964:	08005993 	.word	0x08005993
 8005968:	0800598b 	.word	0x0800598b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800596c:	f7fe f864 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8005970:	61b8      	str	r0, [r7, #24]
        break;
 8005972:	e013      	b.n	800599c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005974:	f7fe f874 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8005978:	61b8      	str	r0, [r7, #24]
        break;
 800597a:	e00f      	b.n	800599c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800597c:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <UART_SetConfig+0x4c4>)
 800597e:	61bb      	str	r3, [r7, #24]
        break;
 8005980:	e00c      	b.n	800599c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005982:	f7fd ff47 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 8005986:	61b8      	str	r0, [r7, #24]
        break;
 8005988:	e008      	b.n	800599c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598e:	61bb      	str	r3, [r7, #24]
        break;
 8005990:	e004      	b.n	800599c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	77bb      	strb	r3, [r7, #30]
        break;
 800599a:	bf00      	nop
    }

    if (pclk != 0U)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d018      	beq.n	80059d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	085a      	lsrs	r2, r3, #1
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	441a      	add	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b0f      	cmp	r3, #15
 80059ba:	d909      	bls.n	80059d0 <UART_SetConfig+0x4a0>
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c2:	d205      	bcs.n	80059d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	e001      	b.n	80059d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80059e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40007c00 	.word	0x40007c00
 80059f0:	40023800 	.word	0x40023800
 80059f4:	00f42400 	.word	0x00f42400

080059f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01a      	beq.n	8005b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af6:	d10a      	bne.n	8005b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	605a      	str	r2, [r3, #4]
  }
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b4c:	f7fc fa06 	bl	8001f5c <HAL_GetTick>
 8005b50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d10e      	bne.n	8005b7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f831 	bl	8005bd6 <UART_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e027      	b.n	8005bce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d10e      	bne.n	8005baa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f81b 	bl	8005bd6 <UART_WaitOnFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e011      	b.n	8005bce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b09c      	sub	sp, #112	; 0x70
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be6:	e0a7      	b.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bee:	f000 80a3 	beq.w	8005d38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf2:	f7fc f9b3 	bl	8001f5c <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d302      	bcc.n	8005c08 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d13f      	bne.n	8005c88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e6      	bne.n	8005c08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	f023 0301 	bic.w	r3, r3, #1
 8005c50:	663b      	str	r3, [r7, #96]	; 0x60
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e5      	bne.n	8005c3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e068      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d050      	beq.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca4:	d148      	bne.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e6      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d02:	623a      	str	r2, [r7, #32]
 8005d04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	69f9      	ldr	r1, [r7, #28]
 8005d08:	6a3a      	ldr	r2, [r7, #32]
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e010      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69da      	ldr	r2, [r3, #28]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	bf0c      	ite	eq
 8005d48:	2301      	moveq	r3, #1
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	f43f af48 	beq.w	8005be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3770      	adds	r7, #112	; 0x70
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d64:	b084      	sub	sp, #16
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	f107 001c 	add.w	r0, r7, #28
 8005d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d120      	bne.n	8005dbe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <USB_CoreInit+0xac>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fa96 	bl	80062e4 <USB_CoreReset>
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]
 8005dbc:	e010      	b.n	8005de0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa8a 	bl	80062e4 <USB_CoreReset>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d10b      	bne.n	8005dfe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f043 0206 	orr.w	r2, r3, #6
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e0a:	b004      	add	sp, #16
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	ffbdffbf 	.word	0xffbdffbf

08005e14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f023 0201 	bic.w	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d115      	bne.n	8005e84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e64:	2001      	movs	r0, #1
 8005e66:	f7fc f885 	bl	8001f74 <HAL_Delay>
      ms++;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fa29 	bl	80062c8 <USB_GetMode>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d01e      	beq.n	8005eba <USB_SetCurrentMode+0x84>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b31      	cmp	r3, #49	; 0x31
 8005e80:	d9f0      	bls.n	8005e64 <USB_SetCurrentMode+0x2e>
 8005e82:	e01a      	b.n	8005eba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d115      	bne.n	8005eb6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e96:	2001      	movs	r0, #1
 8005e98:	f7fc f86c 	bl	8001f74 <HAL_Delay>
      ms++;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fa10 	bl	80062c8 <USB_GetMode>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <USB_SetCurrentMode+0x84>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b31      	cmp	r3, #49	; 0x31
 8005eb2:	d9f0      	bls.n	8005e96 <USB_SetCurrentMode+0x60>
 8005eb4:	e001      	b.n	8005eba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e005      	b.n	8005ec6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b32      	cmp	r3, #50	; 0x32
 8005ebe:	d101      	bne.n	8005ec4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b086      	sub	sp, #24
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005eea:	2300      	movs	r3, #0
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	e009      	b.n	8005f04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	3340      	adds	r3, #64	; 0x40
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	3301      	adds	r3, #1
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b0e      	cmp	r3, #14
 8005f08:	d9f2      	bls.n	8005ef0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d11c      	bne.n	8005f4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f1e:	f043 0302 	orr.w	r3, r3, #2
 8005f22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e005      	b.n	8005f56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f68:	4619      	mov	r1, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f70:	461a      	mov	r2, r3
 8005f72:	680b      	ldr	r3, [r1, #0]
 8005f74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d10c      	bne.n	8005f96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f82:	2100      	movs	r1, #0
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f965 	bl	8006254 <USB_SetDevSpeed>
 8005f8a:	e008      	b.n	8005f9e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f960 	bl	8006254 <USB_SetDevSpeed>
 8005f94:	e003      	b.n	8005f9e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f96:	2103      	movs	r1, #3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f95b 	bl	8006254 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f9e:	2110      	movs	r1, #16
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f8f3 	bl	800618c <USB_FlushTxFifo>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f91f 	bl	80061f4 <USB_FlushRxFifo>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	e043      	b.n	8006072 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006000:	d118      	bne.n	8006034 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	461a      	mov	r2, r3
 8006016:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e013      	b.n	8006046 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602a:	461a      	mov	r2, r3
 800602c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e008      	b.n	8006046 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	461a      	mov	r2, r3
 8006042:	2300      	movs	r3, #0
 8006044:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006052:	461a      	mov	r2, r3
 8006054:	2300      	movs	r3, #0
 8006056:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	461a      	mov	r2, r3
 8006066:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800606a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	3301      	adds	r3, #1
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	429a      	cmp	r2, r3
 8006078:	d3b7      	bcc.n	8005fea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800607a:	2300      	movs	r3, #0
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	e043      	b.n	8006108 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006096:	d118      	bne.n	80060ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060aa:	461a      	mov	r2, r3
 80060ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e013      	b.n	80060dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	461a      	mov	r2, r3
 80060c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	e008      	b.n	80060dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	461a      	mov	r2, r3
 80060d8:	2300      	movs	r3, #0
 80060da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e8:	461a      	mov	r2, r3
 80060ea:	2300      	movs	r3, #0
 80060ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	461a      	mov	r2, r3
 80060fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	3301      	adds	r3, #1
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	429a      	cmp	r2, r3
 800610e:	d3b7      	bcc.n	8006080 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006122:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006130:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	2b00      	cmp	r3, #0
 8006136:	d105      	bne.n	8006144 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	f043 0210 	orr.w	r2, r3, #16
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699a      	ldr	r2, [r3, #24]
 8006148:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <USB_DevInit+0x2b4>)
 800614a:	4313      	orrs	r3, r2
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f043 0208 	orr.w	r2, r3, #8
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d105      	bne.n	8006174 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <USB_DevInit+0x2b8>)
 800616e:	4313      	orrs	r3, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006180:	b004      	add	sp, #16
 8006182:	4770      	bx	lr
 8006184:	803c3800 	.word	0x803c3800
 8006188:	40000004 	.word	0x40000004

0800618c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a13      	ldr	r2, [pc, #76]	; (80061f0 <USB_FlushTxFifo+0x64>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d901      	bls.n	80061ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e01b      	b.n	80061e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	daf2      	bge.n	800619a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	019b      	lsls	r3, r3, #6
 80061bc:	f043 0220 	orr.w	r2, r3, #32
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <USB_FlushTxFifo+0x64>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e006      	b.n	80061e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d0f0      	beq.n	80061c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	00030d40 	.word	0x00030d40

080061f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a11      	ldr	r2, [pc, #68]	; (8006250 <USB_FlushRxFifo+0x5c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e018      	b.n	8006244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	daf2      	bge.n	8006200 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2210      	movs	r2, #16
 8006222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3301      	adds	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <USB_FlushRxFifo+0x5c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e006      	b.n	8006244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b10      	cmp	r3, #16
 8006240:	d0f0      	beq.n	8006224 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	00030d40 	.word	0x00030d40

08006254 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006274:	4313      	orrs	r3, r2
 8006276:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062a0:	f023 0303 	bic.w	r3, r3, #3
 80062a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062b4:	f043 0302 	orr.w	r3, r3, #2
 80062b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	f003 0301 	and.w	r3, r3, #1
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a13      	ldr	r2, [pc, #76]	; (8006348 <USB_CoreReset+0x64>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d901      	bls.n	8006302 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e01b      	b.n	800633a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	daf2      	bge.n	80062f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f043 0201 	orr.w	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4a09      	ldr	r2, [pc, #36]	; (8006348 <USB_CoreReset+0x64>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d901      	bls.n	800632c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e006      	b.n	800633a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d0f0      	beq.n	800631a <USB_CoreReset+0x36>

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	00030d40 	.word	0x00030d40

0800634c <__errno>:
 800634c:	4b01      	ldr	r3, [pc, #4]	; (8006354 <__errno+0x8>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	2000000c 	.word	0x2000000c

08006358 <__libc_init_array>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4d0d      	ldr	r5, [pc, #52]	; (8006390 <__libc_init_array+0x38>)
 800635c:	4c0d      	ldr	r4, [pc, #52]	; (8006394 <__libc_init_array+0x3c>)
 800635e:	1b64      	subs	r4, r4, r5
 8006360:	10a4      	asrs	r4, r4, #2
 8006362:	2600      	movs	r6, #0
 8006364:	42a6      	cmp	r6, r4
 8006366:	d109      	bne.n	800637c <__libc_init_array+0x24>
 8006368:	4d0b      	ldr	r5, [pc, #44]	; (8006398 <__libc_init_array+0x40>)
 800636a:	4c0c      	ldr	r4, [pc, #48]	; (800639c <__libc_init_array+0x44>)
 800636c:	f000 fc8e 	bl	8006c8c <_init>
 8006370:	1b64      	subs	r4, r4, r5
 8006372:	10a4      	asrs	r4, r4, #2
 8006374:	2600      	movs	r6, #0
 8006376:	42a6      	cmp	r6, r4
 8006378:	d105      	bne.n	8006386 <__libc_init_array+0x2e>
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006380:	4798      	blx	r3
 8006382:	3601      	adds	r6, #1
 8006384:	e7ee      	b.n	8006364 <__libc_init_array+0xc>
 8006386:	f855 3b04 	ldr.w	r3, [r5], #4
 800638a:	4798      	blx	r3
 800638c:	3601      	adds	r6, #1
 800638e:	e7f2      	b.n	8006376 <__libc_init_array+0x1e>
 8006390:	08006d68 	.word	0x08006d68
 8006394:	08006d68 	.word	0x08006d68
 8006398:	08006d68 	.word	0x08006d68
 800639c:	08006d6c 	.word	0x08006d6c

080063a0 <memset>:
 80063a0:	4402      	add	r2, r0
 80063a2:	4603      	mov	r3, r0
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d100      	bne.n	80063aa <memset+0xa>
 80063a8:	4770      	bx	lr
 80063aa:	f803 1b01 	strb.w	r1, [r3], #1
 80063ae:	e7f9      	b.n	80063a4 <memset+0x4>

080063b0 <_vsiprintf_r>:
 80063b0:	b500      	push	{lr}
 80063b2:	b09b      	sub	sp, #108	; 0x6c
 80063b4:	9100      	str	r1, [sp, #0]
 80063b6:	9104      	str	r1, [sp, #16]
 80063b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063bc:	9105      	str	r1, [sp, #20]
 80063be:	9102      	str	r1, [sp, #8]
 80063c0:	4905      	ldr	r1, [pc, #20]	; (80063d8 <_vsiprintf_r+0x28>)
 80063c2:	9103      	str	r1, [sp, #12]
 80063c4:	4669      	mov	r1, sp
 80063c6:	f000 f86f 	bl	80064a8 <_svfiprintf_r>
 80063ca:	9b00      	ldr	r3, [sp, #0]
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	b01b      	add	sp, #108	; 0x6c
 80063d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80063d6:	bf00      	nop
 80063d8:	ffff0208 	.word	0xffff0208

080063dc <vsiprintf>:
 80063dc:	4613      	mov	r3, r2
 80063de:	460a      	mov	r2, r1
 80063e0:	4601      	mov	r1, r0
 80063e2:	4802      	ldr	r0, [pc, #8]	; (80063ec <vsiprintf+0x10>)
 80063e4:	6800      	ldr	r0, [r0, #0]
 80063e6:	f7ff bfe3 	b.w	80063b0 <_vsiprintf_r>
 80063ea:	bf00      	nop
 80063ec:	2000000c 	.word	0x2000000c

080063f0 <__ssputs_r>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	688e      	ldr	r6, [r1, #8]
 80063f6:	429e      	cmp	r6, r3
 80063f8:	4682      	mov	sl, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	4690      	mov	r8, r2
 80063fe:	461f      	mov	r7, r3
 8006400:	d838      	bhi.n	8006474 <__ssputs_r+0x84>
 8006402:	898a      	ldrh	r2, [r1, #12]
 8006404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006408:	d032      	beq.n	8006470 <__ssputs_r+0x80>
 800640a:	6825      	ldr	r5, [r4, #0]
 800640c:	6909      	ldr	r1, [r1, #16]
 800640e:	eba5 0901 	sub.w	r9, r5, r1
 8006412:	6965      	ldr	r5, [r4, #20]
 8006414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800641c:	3301      	adds	r3, #1
 800641e:	444b      	add	r3, r9
 8006420:	106d      	asrs	r5, r5, #1
 8006422:	429d      	cmp	r5, r3
 8006424:	bf38      	it	cc
 8006426:	461d      	movcc	r5, r3
 8006428:	0553      	lsls	r3, r2, #21
 800642a:	d531      	bpl.n	8006490 <__ssputs_r+0xa0>
 800642c:	4629      	mov	r1, r5
 800642e:	f000 fb63 	bl	8006af8 <_malloc_r>
 8006432:	4606      	mov	r6, r0
 8006434:	b950      	cbnz	r0, 800644c <__ssputs_r+0x5c>
 8006436:	230c      	movs	r3, #12
 8006438:	f8ca 3000 	str.w	r3, [sl]
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006442:	81a3      	strh	r3, [r4, #12]
 8006444:	f04f 30ff 	mov.w	r0, #4294967295
 8006448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644c:	6921      	ldr	r1, [r4, #16]
 800644e:	464a      	mov	r2, r9
 8006450:	f000 fabe 	bl	80069d0 <memcpy>
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800645a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	6126      	str	r6, [r4, #16]
 8006462:	6165      	str	r5, [r4, #20]
 8006464:	444e      	add	r6, r9
 8006466:	eba5 0509 	sub.w	r5, r5, r9
 800646a:	6026      	str	r6, [r4, #0]
 800646c:	60a5      	str	r5, [r4, #8]
 800646e:	463e      	mov	r6, r7
 8006470:	42be      	cmp	r6, r7
 8006472:	d900      	bls.n	8006476 <__ssputs_r+0x86>
 8006474:	463e      	mov	r6, r7
 8006476:	6820      	ldr	r0, [r4, #0]
 8006478:	4632      	mov	r2, r6
 800647a:	4641      	mov	r1, r8
 800647c:	f000 fab6 	bl	80069ec <memmove>
 8006480:	68a3      	ldr	r3, [r4, #8]
 8006482:	1b9b      	subs	r3, r3, r6
 8006484:	60a3      	str	r3, [r4, #8]
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	4433      	add	r3, r6
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	2000      	movs	r0, #0
 800648e:	e7db      	b.n	8006448 <__ssputs_r+0x58>
 8006490:	462a      	mov	r2, r5
 8006492:	f000 fba5 	bl	8006be0 <_realloc_r>
 8006496:	4606      	mov	r6, r0
 8006498:	2800      	cmp	r0, #0
 800649a:	d1e1      	bne.n	8006460 <__ssputs_r+0x70>
 800649c:	6921      	ldr	r1, [r4, #16]
 800649e:	4650      	mov	r0, sl
 80064a0:	f000 fabe 	bl	8006a20 <_free_r>
 80064a4:	e7c7      	b.n	8006436 <__ssputs_r+0x46>
	...

080064a8 <_svfiprintf_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	4698      	mov	r8, r3
 80064ae:	898b      	ldrh	r3, [r1, #12]
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	b09d      	sub	sp, #116	; 0x74
 80064b4:	4607      	mov	r7, r0
 80064b6:	460d      	mov	r5, r1
 80064b8:	4614      	mov	r4, r2
 80064ba:	d50e      	bpl.n	80064da <_svfiprintf_r+0x32>
 80064bc:	690b      	ldr	r3, [r1, #16]
 80064be:	b963      	cbnz	r3, 80064da <_svfiprintf_r+0x32>
 80064c0:	2140      	movs	r1, #64	; 0x40
 80064c2:	f000 fb19 	bl	8006af8 <_malloc_r>
 80064c6:	6028      	str	r0, [r5, #0]
 80064c8:	6128      	str	r0, [r5, #16]
 80064ca:	b920      	cbnz	r0, 80064d6 <_svfiprintf_r+0x2e>
 80064cc:	230c      	movs	r3, #12
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	e0d1      	b.n	800667a <_svfiprintf_r+0x1d2>
 80064d6:	2340      	movs	r3, #64	; 0x40
 80064d8:	616b      	str	r3, [r5, #20]
 80064da:	2300      	movs	r3, #0
 80064dc:	9309      	str	r3, [sp, #36]	; 0x24
 80064de:	2320      	movs	r3, #32
 80064e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064e8:	2330      	movs	r3, #48	; 0x30
 80064ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006694 <_svfiprintf_r+0x1ec>
 80064ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064f2:	f04f 0901 	mov.w	r9, #1
 80064f6:	4623      	mov	r3, r4
 80064f8:	469a      	mov	sl, r3
 80064fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064fe:	b10a      	cbz	r2, 8006504 <_svfiprintf_r+0x5c>
 8006500:	2a25      	cmp	r2, #37	; 0x25
 8006502:	d1f9      	bne.n	80064f8 <_svfiprintf_r+0x50>
 8006504:	ebba 0b04 	subs.w	fp, sl, r4
 8006508:	d00b      	beq.n	8006522 <_svfiprintf_r+0x7a>
 800650a:	465b      	mov	r3, fp
 800650c:	4622      	mov	r2, r4
 800650e:	4629      	mov	r1, r5
 8006510:	4638      	mov	r0, r7
 8006512:	f7ff ff6d 	bl	80063f0 <__ssputs_r>
 8006516:	3001      	adds	r0, #1
 8006518:	f000 80aa 	beq.w	8006670 <_svfiprintf_r+0x1c8>
 800651c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800651e:	445a      	add	r2, fp
 8006520:	9209      	str	r2, [sp, #36]	; 0x24
 8006522:	f89a 3000 	ldrb.w	r3, [sl]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 80a2 	beq.w	8006670 <_svfiprintf_r+0x1c8>
 800652c:	2300      	movs	r3, #0
 800652e:	f04f 32ff 	mov.w	r2, #4294967295
 8006532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006536:	f10a 0a01 	add.w	sl, sl, #1
 800653a:	9304      	str	r3, [sp, #16]
 800653c:	9307      	str	r3, [sp, #28]
 800653e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006542:	931a      	str	r3, [sp, #104]	; 0x68
 8006544:	4654      	mov	r4, sl
 8006546:	2205      	movs	r2, #5
 8006548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800654c:	4851      	ldr	r0, [pc, #324]	; (8006694 <_svfiprintf_r+0x1ec>)
 800654e:	f7f9 fe77 	bl	8000240 <memchr>
 8006552:	9a04      	ldr	r2, [sp, #16]
 8006554:	b9d8      	cbnz	r0, 800658e <_svfiprintf_r+0xe6>
 8006556:	06d0      	lsls	r0, r2, #27
 8006558:	bf44      	itt	mi
 800655a:	2320      	movmi	r3, #32
 800655c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006560:	0711      	lsls	r1, r2, #28
 8006562:	bf44      	itt	mi
 8006564:	232b      	movmi	r3, #43	; 0x2b
 8006566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800656a:	f89a 3000 	ldrb.w	r3, [sl]
 800656e:	2b2a      	cmp	r3, #42	; 0x2a
 8006570:	d015      	beq.n	800659e <_svfiprintf_r+0xf6>
 8006572:	9a07      	ldr	r2, [sp, #28]
 8006574:	4654      	mov	r4, sl
 8006576:	2000      	movs	r0, #0
 8006578:	f04f 0c0a 	mov.w	ip, #10
 800657c:	4621      	mov	r1, r4
 800657e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006582:	3b30      	subs	r3, #48	; 0x30
 8006584:	2b09      	cmp	r3, #9
 8006586:	d94e      	bls.n	8006626 <_svfiprintf_r+0x17e>
 8006588:	b1b0      	cbz	r0, 80065b8 <_svfiprintf_r+0x110>
 800658a:	9207      	str	r2, [sp, #28]
 800658c:	e014      	b.n	80065b8 <_svfiprintf_r+0x110>
 800658e:	eba0 0308 	sub.w	r3, r0, r8
 8006592:	fa09 f303 	lsl.w	r3, r9, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	9304      	str	r3, [sp, #16]
 800659a:	46a2      	mov	sl, r4
 800659c:	e7d2      	b.n	8006544 <_svfiprintf_r+0x9c>
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	1d19      	adds	r1, r3, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	9103      	str	r1, [sp, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bfbb      	ittet	lt
 80065aa:	425b      	neglt	r3, r3
 80065ac:	f042 0202 	orrlt.w	r2, r2, #2
 80065b0:	9307      	strge	r3, [sp, #28]
 80065b2:	9307      	strlt	r3, [sp, #28]
 80065b4:	bfb8      	it	lt
 80065b6:	9204      	strlt	r2, [sp, #16]
 80065b8:	7823      	ldrb	r3, [r4, #0]
 80065ba:	2b2e      	cmp	r3, #46	; 0x2e
 80065bc:	d10c      	bne.n	80065d8 <_svfiprintf_r+0x130>
 80065be:	7863      	ldrb	r3, [r4, #1]
 80065c0:	2b2a      	cmp	r3, #42	; 0x2a
 80065c2:	d135      	bne.n	8006630 <_svfiprintf_r+0x188>
 80065c4:	9b03      	ldr	r3, [sp, #12]
 80065c6:	1d1a      	adds	r2, r3, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	9203      	str	r2, [sp, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bfb8      	it	lt
 80065d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80065d4:	3402      	adds	r4, #2
 80065d6:	9305      	str	r3, [sp, #20]
 80065d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066a4 <_svfiprintf_r+0x1fc>
 80065dc:	7821      	ldrb	r1, [r4, #0]
 80065de:	2203      	movs	r2, #3
 80065e0:	4650      	mov	r0, sl
 80065e2:	f7f9 fe2d 	bl	8000240 <memchr>
 80065e6:	b140      	cbz	r0, 80065fa <_svfiprintf_r+0x152>
 80065e8:	2340      	movs	r3, #64	; 0x40
 80065ea:	eba0 000a 	sub.w	r0, r0, sl
 80065ee:	fa03 f000 	lsl.w	r0, r3, r0
 80065f2:	9b04      	ldr	r3, [sp, #16]
 80065f4:	4303      	orrs	r3, r0
 80065f6:	3401      	adds	r4, #1
 80065f8:	9304      	str	r3, [sp, #16]
 80065fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065fe:	4826      	ldr	r0, [pc, #152]	; (8006698 <_svfiprintf_r+0x1f0>)
 8006600:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006604:	2206      	movs	r2, #6
 8006606:	f7f9 fe1b 	bl	8000240 <memchr>
 800660a:	2800      	cmp	r0, #0
 800660c:	d038      	beq.n	8006680 <_svfiprintf_r+0x1d8>
 800660e:	4b23      	ldr	r3, [pc, #140]	; (800669c <_svfiprintf_r+0x1f4>)
 8006610:	bb1b      	cbnz	r3, 800665a <_svfiprintf_r+0x1b2>
 8006612:	9b03      	ldr	r3, [sp, #12]
 8006614:	3307      	adds	r3, #7
 8006616:	f023 0307 	bic.w	r3, r3, #7
 800661a:	3308      	adds	r3, #8
 800661c:	9303      	str	r3, [sp, #12]
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	4433      	add	r3, r6
 8006622:	9309      	str	r3, [sp, #36]	; 0x24
 8006624:	e767      	b.n	80064f6 <_svfiprintf_r+0x4e>
 8006626:	fb0c 3202 	mla	r2, ip, r2, r3
 800662a:	460c      	mov	r4, r1
 800662c:	2001      	movs	r0, #1
 800662e:	e7a5      	b.n	800657c <_svfiprintf_r+0xd4>
 8006630:	2300      	movs	r3, #0
 8006632:	3401      	adds	r4, #1
 8006634:	9305      	str	r3, [sp, #20]
 8006636:	4619      	mov	r1, r3
 8006638:	f04f 0c0a 	mov.w	ip, #10
 800663c:	4620      	mov	r0, r4
 800663e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006642:	3a30      	subs	r2, #48	; 0x30
 8006644:	2a09      	cmp	r2, #9
 8006646:	d903      	bls.n	8006650 <_svfiprintf_r+0x1a8>
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0c5      	beq.n	80065d8 <_svfiprintf_r+0x130>
 800664c:	9105      	str	r1, [sp, #20]
 800664e:	e7c3      	b.n	80065d8 <_svfiprintf_r+0x130>
 8006650:	fb0c 2101 	mla	r1, ip, r1, r2
 8006654:	4604      	mov	r4, r0
 8006656:	2301      	movs	r3, #1
 8006658:	e7f0      	b.n	800663c <_svfiprintf_r+0x194>
 800665a:	ab03      	add	r3, sp, #12
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	462a      	mov	r2, r5
 8006660:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <_svfiprintf_r+0x1f8>)
 8006662:	a904      	add	r1, sp, #16
 8006664:	4638      	mov	r0, r7
 8006666:	f3af 8000 	nop.w
 800666a:	1c42      	adds	r2, r0, #1
 800666c:	4606      	mov	r6, r0
 800666e:	d1d6      	bne.n	800661e <_svfiprintf_r+0x176>
 8006670:	89ab      	ldrh	r3, [r5, #12]
 8006672:	065b      	lsls	r3, r3, #25
 8006674:	f53f af2c 	bmi.w	80064d0 <_svfiprintf_r+0x28>
 8006678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800667a:	b01d      	add	sp, #116	; 0x74
 800667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006680:	ab03      	add	r3, sp, #12
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	462a      	mov	r2, r5
 8006686:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <_svfiprintf_r+0x1f8>)
 8006688:	a904      	add	r1, sp, #16
 800668a:	4638      	mov	r0, r7
 800668c:	f000 f87a 	bl	8006784 <_printf_i>
 8006690:	e7eb      	b.n	800666a <_svfiprintf_r+0x1c2>
 8006692:	bf00      	nop
 8006694:	08006d2c 	.word	0x08006d2c
 8006698:	08006d36 	.word	0x08006d36
 800669c:	00000000 	.word	0x00000000
 80066a0:	080063f1 	.word	0x080063f1
 80066a4:	08006d32 	.word	0x08006d32

080066a8 <_printf_common>:
 80066a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	4616      	mov	r6, r2
 80066ae:	4699      	mov	r9, r3
 80066b0:	688a      	ldr	r2, [r1, #8]
 80066b2:	690b      	ldr	r3, [r1, #16]
 80066b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066b8:	4293      	cmp	r3, r2
 80066ba:	bfb8      	it	lt
 80066bc:	4613      	movlt	r3, r2
 80066be:	6033      	str	r3, [r6, #0]
 80066c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c4:	4607      	mov	r7, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	b10a      	cbz	r2, 80066ce <_printf_common+0x26>
 80066ca:	3301      	adds	r3, #1
 80066cc:	6033      	str	r3, [r6, #0]
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	0699      	lsls	r1, r3, #26
 80066d2:	bf42      	ittt	mi
 80066d4:	6833      	ldrmi	r3, [r6, #0]
 80066d6:	3302      	addmi	r3, #2
 80066d8:	6033      	strmi	r3, [r6, #0]
 80066da:	6825      	ldr	r5, [r4, #0]
 80066dc:	f015 0506 	ands.w	r5, r5, #6
 80066e0:	d106      	bne.n	80066f0 <_printf_common+0x48>
 80066e2:	f104 0a19 	add.w	sl, r4, #25
 80066e6:	68e3      	ldr	r3, [r4, #12]
 80066e8:	6832      	ldr	r2, [r6, #0]
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	42ab      	cmp	r3, r5
 80066ee:	dc26      	bgt.n	800673e <_printf_common+0x96>
 80066f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f4:	1e13      	subs	r3, r2, #0
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	bf18      	it	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	0692      	lsls	r2, r2, #26
 80066fe:	d42b      	bmi.n	8006758 <_printf_common+0xb0>
 8006700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006704:	4649      	mov	r1, r9
 8006706:	4638      	mov	r0, r7
 8006708:	47c0      	blx	r8
 800670a:	3001      	adds	r0, #1
 800670c:	d01e      	beq.n	800674c <_printf_common+0xa4>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	68e5      	ldr	r5, [r4, #12]
 8006712:	6832      	ldr	r2, [r6, #0]
 8006714:	f003 0306 	and.w	r3, r3, #6
 8006718:	2b04      	cmp	r3, #4
 800671a:	bf08      	it	eq
 800671c:	1aad      	subeq	r5, r5, r2
 800671e:	68a3      	ldr	r3, [r4, #8]
 8006720:	6922      	ldr	r2, [r4, #16]
 8006722:	bf0c      	ite	eq
 8006724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006728:	2500      	movne	r5, #0
 800672a:	4293      	cmp	r3, r2
 800672c:	bfc4      	itt	gt
 800672e:	1a9b      	subgt	r3, r3, r2
 8006730:	18ed      	addgt	r5, r5, r3
 8006732:	2600      	movs	r6, #0
 8006734:	341a      	adds	r4, #26
 8006736:	42b5      	cmp	r5, r6
 8006738:	d11a      	bne.n	8006770 <_printf_common+0xc8>
 800673a:	2000      	movs	r0, #0
 800673c:	e008      	b.n	8006750 <_printf_common+0xa8>
 800673e:	2301      	movs	r3, #1
 8006740:	4652      	mov	r2, sl
 8006742:	4649      	mov	r1, r9
 8006744:	4638      	mov	r0, r7
 8006746:	47c0      	blx	r8
 8006748:	3001      	adds	r0, #1
 800674a:	d103      	bne.n	8006754 <_printf_common+0xac>
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006754:	3501      	adds	r5, #1
 8006756:	e7c6      	b.n	80066e6 <_printf_common+0x3e>
 8006758:	18e1      	adds	r1, r4, r3
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	2030      	movs	r0, #48	; 0x30
 800675e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006762:	4422      	add	r2, r4
 8006764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800676c:	3302      	adds	r3, #2
 800676e:	e7c7      	b.n	8006700 <_printf_common+0x58>
 8006770:	2301      	movs	r3, #1
 8006772:	4622      	mov	r2, r4
 8006774:	4649      	mov	r1, r9
 8006776:	4638      	mov	r0, r7
 8006778:	47c0      	blx	r8
 800677a:	3001      	adds	r0, #1
 800677c:	d0e6      	beq.n	800674c <_printf_common+0xa4>
 800677e:	3601      	adds	r6, #1
 8006780:	e7d9      	b.n	8006736 <_printf_common+0x8e>
	...

08006784 <_printf_i>:
 8006784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	7e0f      	ldrb	r7, [r1, #24]
 800678a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800678c:	2f78      	cmp	r7, #120	; 0x78
 800678e:	4691      	mov	r9, r2
 8006790:	4680      	mov	r8, r0
 8006792:	460c      	mov	r4, r1
 8006794:	469a      	mov	sl, r3
 8006796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800679a:	d807      	bhi.n	80067ac <_printf_i+0x28>
 800679c:	2f62      	cmp	r7, #98	; 0x62
 800679e:	d80a      	bhi.n	80067b6 <_printf_i+0x32>
 80067a0:	2f00      	cmp	r7, #0
 80067a2:	f000 80d8 	beq.w	8006956 <_printf_i+0x1d2>
 80067a6:	2f58      	cmp	r7, #88	; 0x58
 80067a8:	f000 80a3 	beq.w	80068f2 <_printf_i+0x16e>
 80067ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b4:	e03a      	b.n	800682c <_printf_i+0xa8>
 80067b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ba:	2b15      	cmp	r3, #21
 80067bc:	d8f6      	bhi.n	80067ac <_printf_i+0x28>
 80067be:	a101      	add	r1, pc, #4	; (adr r1, 80067c4 <_printf_i+0x40>)
 80067c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c4:	0800681d 	.word	0x0800681d
 80067c8:	08006831 	.word	0x08006831
 80067cc:	080067ad 	.word	0x080067ad
 80067d0:	080067ad 	.word	0x080067ad
 80067d4:	080067ad 	.word	0x080067ad
 80067d8:	080067ad 	.word	0x080067ad
 80067dc:	08006831 	.word	0x08006831
 80067e0:	080067ad 	.word	0x080067ad
 80067e4:	080067ad 	.word	0x080067ad
 80067e8:	080067ad 	.word	0x080067ad
 80067ec:	080067ad 	.word	0x080067ad
 80067f0:	0800693d 	.word	0x0800693d
 80067f4:	08006861 	.word	0x08006861
 80067f8:	0800691f 	.word	0x0800691f
 80067fc:	080067ad 	.word	0x080067ad
 8006800:	080067ad 	.word	0x080067ad
 8006804:	0800695f 	.word	0x0800695f
 8006808:	080067ad 	.word	0x080067ad
 800680c:	08006861 	.word	0x08006861
 8006810:	080067ad 	.word	0x080067ad
 8006814:	080067ad 	.word	0x080067ad
 8006818:	08006927 	.word	0x08006927
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	1d1a      	adds	r2, r3, #4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	602a      	str	r2, [r5, #0]
 8006824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800682c:	2301      	movs	r3, #1
 800682e:	e0a3      	b.n	8006978 <_printf_i+0x1f4>
 8006830:	6820      	ldr	r0, [r4, #0]
 8006832:	6829      	ldr	r1, [r5, #0]
 8006834:	0606      	lsls	r6, r0, #24
 8006836:	f101 0304 	add.w	r3, r1, #4
 800683a:	d50a      	bpl.n	8006852 <_printf_i+0xce>
 800683c:	680e      	ldr	r6, [r1, #0]
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	2e00      	cmp	r6, #0
 8006842:	da03      	bge.n	800684c <_printf_i+0xc8>
 8006844:	232d      	movs	r3, #45	; 0x2d
 8006846:	4276      	negs	r6, r6
 8006848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800684c:	485e      	ldr	r0, [pc, #376]	; (80069c8 <_printf_i+0x244>)
 800684e:	230a      	movs	r3, #10
 8006850:	e019      	b.n	8006886 <_printf_i+0x102>
 8006852:	680e      	ldr	r6, [r1, #0]
 8006854:	602b      	str	r3, [r5, #0]
 8006856:	f010 0f40 	tst.w	r0, #64	; 0x40
 800685a:	bf18      	it	ne
 800685c:	b236      	sxthne	r6, r6
 800685e:	e7ef      	b.n	8006840 <_printf_i+0xbc>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1d19      	adds	r1, r3, #4
 8006866:	6029      	str	r1, [r5, #0]
 8006868:	0601      	lsls	r1, r0, #24
 800686a:	d501      	bpl.n	8006870 <_printf_i+0xec>
 800686c:	681e      	ldr	r6, [r3, #0]
 800686e:	e002      	b.n	8006876 <_printf_i+0xf2>
 8006870:	0646      	lsls	r6, r0, #25
 8006872:	d5fb      	bpl.n	800686c <_printf_i+0xe8>
 8006874:	881e      	ldrh	r6, [r3, #0]
 8006876:	4854      	ldr	r0, [pc, #336]	; (80069c8 <_printf_i+0x244>)
 8006878:	2f6f      	cmp	r7, #111	; 0x6f
 800687a:	bf0c      	ite	eq
 800687c:	2308      	moveq	r3, #8
 800687e:	230a      	movne	r3, #10
 8006880:	2100      	movs	r1, #0
 8006882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006886:	6865      	ldr	r5, [r4, #4]
 8006888:	60a5      	str	r5, [r4, #8]
 800688a:	2d00      	cmp	r5, #0
 800688c:	bfa2      	ittt	ge
 800688e:	6821      	ldrge	r1, [r4, #0]
 8006890:	f021 0104 	bicge.w	r1, r1, #4
 8006894:	6021      	strge	r1, [r4, #0]
 8006896:	b90e      	cbnz	r6, 800689c <_printf_i+0x118>
 8006898:	2d00      	cmp	r5, #0
 800689a:	d04d      	beq.n	8006938 <_printf_i+0x1b4>
 800689c:	4615      	mov	r5, r2
 800689e:	fbb6 f1f3 	udiv	r1, r6, r3
 80068a2:	fb03 6711 	mls	r7, r3, r1, r6
 80068a6:	5dc7      	ldrb	r7, [r0, r7]
 80068a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068ac:	4637      	mov	r7, r6
 80068ae:	42bb      	cmp	r3, r7
 80068b0:	460e      	mov	r6, r1
 80068b2:	d9f4      	bls.n	800689e <_printf_i+0x11a>
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d10b      	bne.n	80068d0 <_printf_i+0x14c>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	07de      	lsls	r6, r3, #31
 80068bc:	d508      	bpl.n	80068d0 <_printf_i+0x14c>
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	6861      	ldr	r1, [r4, #4]
 80068c2:	4299      	cmp	r1, r3
 80068c4:	bfde      	ittt	le
 80068c6:	2330      	movle	r3, #48	; 0x30
 80068c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068d0:	1b52      	subs	r2, r2, r5
 80068d2:	6122      	str	r2, [r4, #16]
 80068d4:	f8cd a000 	str.w	sl, [sp]
 80068d8:	464b      	mov	r3, r9
 80068da:	aa03      	add	r2, sp, #12
 80068dc:	4621      	mov	r1, r4
 80068de:	4640      	mov	r0, r8
 80068e0:	f7ff fee2 	bl	80066a8 <_printf_common>
 80068e4:	3001      	adds	r0, #1
 80068e6:	d14c      	bne.n	8006982 <_printf_i+0x1fe>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	b004      	add	sp, #16
 80068ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f2:	4835      	ldr	r0, [pc, #212]	; (80069c8 <_printf_i+0x244>)
 80068f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068f8:	6829      	ldr	r1, [r5, #0]
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006900:	6029      	str	r1, [r5, #0]
 8006902:	061d      	lsls	r5, r3, #24
 8006904:	d514      	bpl.n	8006930 <_printf_i+0x1ac>
 8006906:	07df      	lsls	r7, r3, #31
 8006908:	bf44      	itt	mi
 800690a:	f043 0320 	orrmi.w	r3, r3, #32
 800690e:	6023      	strmi	r3, [r4, #0]
 8006910:	b91e      	cbnz	r6, 800691a <_printf_i+0x196>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f023 0320 	bic.w	r3, r3, #32
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	2310      	movs	r3, #16
 800691c:	e7b0      	b.n	8006880 <_printf_i+0xfc>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	f043 0320 	orr.w	r3, r3, #32
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	2378      	movs	r3, #120	; 0x78
 8006928:	4828      	ldr	r0, [pc, #160]	; (80069cc <_printf_i+0x248>)
 800692a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800692e:	e7e3      	b.n	80068f8 <_printf_i+0x174>
 8006930:	0659      	lsls	r1, r3, #25
 8006932:	bf48      	it	mi
 8006934:	b2b6      	uxthmi	r6, r6
 8006936:	e7e6      	b.n	8006906 <_printf_i+0x182>
 8006938:	4615      	mov	r5, r2
 800693a:	e7bb      	b.n	80068b4 <_printf_i+0x130>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	6826      	ldr	r6, [r4, #0]
 8006940:	6961      	ldr	r1, [r4, #20]
 8006942:	1d18      	adds	r0, r3, #4
 8006944:	6028      	str	r0, [r5, #0]
 8006946:	0635      	lsls	r5, r6, #24
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	d501      	bpl.n	8006950 <_printf_i+0x1cc>
 800694c:	6019      	str	r1, [r3, #0]
 800694e:	e002      	b.n	8006956 <_printf_i+0x1d2>
 8006950:	0670      	lsls	r0, r6, #25
 8006952:	d5fb      	bpl.n	800694c <_printf_i+0x1c8>
 8006954:	8019      	strh	r1, [r3, #0]
 8006956:	2300      	movs	r3, #0
 8006958:	6123      	str	r3, [r4, #16]
 800695a:	4615      	mov	r5, r2
 800695c:	e7ba      	b.n	80068d4 <_printf_i+0x150>
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	602a      	str	r2, [r5, #0]
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	6862      	ldr	r2, [r4, #4]
 8006968:	2100      	movs	r1, #0
 800696a:	4628      	mov	r0, r5
 800696c:	f7f9 fc68 	bl	8000240 <memchr>
 8006970:	b108      	cbz	r0, 8006976 <_printf_i+0x1f2>
 8006972:	1b40      	subs	r0, r0, r5
 8006974:	6060      	str	r0, [r4, #4]
 8006976:	6863      	ldr	r3, [r4, #4]
 8006978:	6123      	str	r3, [r4, #16]
 800697a:	2300      	movs	r3, #0
 800697c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006980:	e7a8      	b.n	80068d4 <_printf_i+0x150>
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	462a      	mov	r2, r5
 8006986:	4649      	mov	r1, r9
 8006988:	4640      	mov	r0, r8
 800698a:	47d0      	blx	sl
 800698c:	3001      	adds	r0, #1
 800698e:	d0ab      	beq.n	80068e8 <_printf_i+0x164>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	079b      	lsls	r3, r3, #30
 8006994:	d413      	bmi.n	80069be <_printf_i+0x23a>
 8006996:	68e0      	ldr	r0, [r4, #12]
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	4298      	cmp	r0, r3
 800699c:	bfb8      	it	lt
 800699e:	4618      	movlt	r0, r3
 80069a0:	e7a4      	b.n	80068ec <_printf_i+0x168>
 80069a2:	2301      	movs	r3, #1
 80069a4:	4632      	mov	r2, r6
 80069a6:	4649      	mov	r1, r9
 80069a8:	4640      	mov	r0, r8
 80069aa:	47d0      	blx	sl
 80069ac:	3001      	adds	r0, #1
 80069ae:	d09b      	beq.n	80068e8 <_printf_i+0x164>
 80069b0:	3501      	adds	r5, #1
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	9903      	ldr	r1, [sp, #12]
 80069b6:	1a5b      	subs	r3, r3, r1
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dcf2      	bgt.n	80069a2 <_printf_i+0x21e>
 80069bc:	e7eb      	b.n	8006996 <_printf_i+0x212>
 80069be:	2500      	movs	r5, #0
 80069c0:	f104 0619 	add.w	r6, r4, #25
 80069c4:	e7f5      	b.n	80069b2 <_printf_i+0x22e>
 80069c6:	bf00      	nop
 80069c8:	08006d3d 	.word	0x08006d3d
 80069cc:	08006d4e 	.word	0x08006d4e

080069d0 <memcpy>:
 80069d0:	440a      	add	r2, r1
 80069d2:	4291      	cmp	r1, r2
 80069d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069d8:	d100      	bne.n	80069dc <memcpy+0xc>
 80069da:	4770      	bx	lr
 80069dc:	b510      	push	{r4, lr}
 80069de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069e6:	4291      	cmp	r1, r2
 80069e8:	d1f9      	bne.n	80069de <memcpy+0xe>
 80069ea:	bd10      	pop	{r4, pc}

080069ec <memmove>:
 80069ec:	4288      	cmp	r0, r1
 80069ee:	b510      	push	{r4, lr}
 80069f0:	eb01 0402 	add.w	r4, r1, r2
 80069f4:	d902      	bls.n	80069fc <memmove+0x10>
 80069f6:	4284      	cmp	r4, r0
 80069f8:	4623      	mov	r3, r4
 80069fa:	d807      	bhi.n	8006a0c <memmove+0x20>
 80069fc:	1e43      	subs	r3, r0, #1
 80069fe:	42a1      	cmp	r1, r4
 8006a00:	d008      	beq.n	8006a14 <memmove+0x28>
 8006a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a0a:	e7f8      	b.n	80069fe <memmove+0x12>
 8006a0c:	4402      	add	r2, r0
 8006a0e:	4601      	mov	r1, r0
 8006a10:	428a      	cmp	r2, r1
 8006a12:	d100      	bne.n	8006a16 <memmove+0x2a>
 8006a14:	bd10      	pop	{r4, pc}
 8006a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a1e:	e7f7      	b.n	8006a10 <memmove+0x24>

08006a20 <_free_r>:
 8006a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a22:	2900      	cmp	r1, #0
 8006a24:	d044      	beq.n	8006ab0 <_free_r+0x90>
 8006a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a2a:	9001      	str	r0, [sp, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a32:	bfb8      	it	lt
 8006a34:	18e4      	addlt	r4, r4, r3
 8006a36:	f000 f913 	bl	8006c60 <__malloc_lock>
 8006a3a:	4a1e      	ldr	r2, [pc, #120]	; (8006ab4 <_free_r+0x94>)
 8006a3c:	9801      	ldr	r0, [sp, #4]
 8006a3e:	6813      	ldr	r3, [r2, #0]
 8006a40:	b933      	cbnz	r3, 8006a50 <_free_r+0x30>
 8006a42:	6063      	str	r3, [r4, #4]
 8006a44:	6014      	str	r4, [r2, #0]
 8006a46:	b003      	add	sp, #12
 8006a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a4c:	f000 b90e 	b.w	8006c6c <__malloc_unlock>
 8006a50:	42a3      	cmp	r3, r4
 8006a52:	d908      	bls.n	8006a66 <_free_r+0x46>
 8006a54:	6825      	ldr	r5, [r4, #0]
 8006a56:	1961      	adds	r1, r4, r5
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	bf01      	itttt	eq
 8006a5c:	6819      	ldreq	r1, [r3, #0]
 8006a5e:	685b      	ldreq	r3, [r3, #4]
 8006a60:	1949      	addeq	r1, r1, r5
 8006a62:	6021      	streq	r1, [r4, #0]
 8006a64:	e7ed      	b.n	8006a42 <_free_r+0x22>
 8006a66:	461a      	mov	r2, r3
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	b10b      	cbz	r3, 8006a70 <_free_r+0x50>
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	d9fa      	bls.n	8006a66 <_free_r+0x46>
 8006a70:	6811      	ldr	r1, [r2, #0]
 8006a72:	1855      	adds	r5, r2, r1
 8006a74:	42a5      	cmp	r5, r4
 8006a76:	d10b      	bne.n	8006a90 <_free_r+0x70>
 8006a78:	6824      	ldr	r4, [r4, #0]
 8006a7a:	4421      	add	r1, r4
 8006a7c:	1854      	adds	r4, r2, r1
 8006a7e:	42a3      	cmp	r3, r4
 8006a80:	6011      	str	r1, [r2, #0]
 8006a82:	d1e0      	bne.n	8006a46 <_free_r+0x26>
 8006a84:	681c      	ldr	r4, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	6053      	str	r3, [r2, #4]
 8006a8a:	4421      	add	r1, r4
 8006a8c:	6011      	str	r1, [r2, #0]
 8006a8e:	e7da      	b.n	8006a46 <_free_r+0x26>
 8006a90:	d902      	bls.n	8006a98 <_free_r+0x78>
 8006a92:	230c      	movs	r3, #12
 8006a94:	6003      	str	r3, [r0, #0]
 8006a96:	e7d6      	b.n	8006a46 <_free_r+0x26>
 8006a98:	6825      	ldr	r5, [r4, #0]
 8006a9a:	1961      	adds	r1, r4, r5
 8006a9c:	428b      	cmp	r3, r1
 8006a9e:	bf04      	itt	eq
 8006aa0:	6819      	ldreq	r1, [r3, #0]
 8006aa2:	685b      	ldreq	r3, [r3, #4]
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	bf04      	itt	eq
 8006aa8:	1949      	addeq	r1, r1, r5
 8006aaa:	6021      	streq	r1, [r4, #0]
 8006aac:	6054      	str	r4, [r2, #4]
 8006aae:	e7ca      	b.n	8006a46 <_free_r+0x26>
 8006ab0:	b003      	add	sp, #12
 8006ab2:	bd30      	pop	{r4, r5, pc}
 8006ab4:	20000a14 	.word	0x20000a14

08006ab8 <sbrk_aligned>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	4e0e      	ldr	r6, [pc, #56]	; (8006af4 <sbrk_aligned+0x3c>)
 8006abc:	460c      	mov	r4, r1
 8006abe:	6831      	ldr	r1, [r6, #0]
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	b911      	cbnz	r1, 8006aca <sbrk_aligned+0x12>
 8006ac4:	f000 f8bc 	bl	8006c40 <_sbrk_r>
 8006ac8:	6030      	str	r0, [r6, #0]
 8006aca:	4621      	mov	r1, r4
 8006acc:	4628      	mov	r0, r5
 8006ace:	f000 f8b7 	bl	8006c40 <_sbrk_r>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d00a      	beq.n	8006aec <sbrk_aligned+0x34>
 8006ad6:	1cc4      	adds	r4, r0, #3
 8006ad8:	f024 0403 	bic.w	r4, r4, #3
 8006adc:	42a0      	cmp	r0, r4
 8006ade:	d007      	beq.n	8006af0 <sbrk_aligned+0x38>
 8006ae0:	1a21      	subs	r1, r4, r0
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 f8ac 	bl	8006c40 <_sbrk_r>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d101      	bne.n	8006af0 <sbrk_aligned+0x38>
 8006aec:	f04f 34ff 	mov.w	r4, #4294967295
 8006af0:	4620      	mov	r0, r4
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	20000a18 	.word	0x20000a18

08006af8 <_malloc_r>:
 8006af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afc:	1ccd      	adds	r5, r1, #3
 8006afe:	f025 0503 	bic.w	r5, r5, #3
 8006b02:	3508      	adds	r5, #8
 8006b04:	2d0c      	cmp	r5, #12
 8006b06:	bf38      	it	cc
 8006b08:	250c      	movcc	r5, #12
 8006b0a:	2d00      	cmp	r5, #0
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	db01      	blt.n	8006b14 <_malloc_r+0x1c>
 8006b10:	42a9      	cmp	r1, r5
 8006b12:	d905      	bls.n	8006b20 <_malloc_r+0x28>
 8006b14:	230c      	movs	r3, #12
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	2600      	movs	r6, #0
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b20:	4e2e      	ldr	r6, [pc, #184]	; (8006bdc <_malloc_r+0xe4>)
 8006b22:	f000 f89d 	bl	8006c60 <__malloc_lock>
 8006b26:	6833      	ldr	r3, [r6, #0]
 8006b28:	461c      	mov	r4, r3
 8006b2a:	bb34      	cbnz	r4, 8006b7a <_malloc_r+0x82>
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4638      	mov	r0, r7
 8006b30:	f7ff ffc2 	bl	8006ab8 <sbrk_aligned>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	4604      	mov	r4, r0
 8006b38:	d14d      	bne.n	8006bd6 <_malloc_r+0xde>
 8006b3a:	6834      	ldr	r4, [r6, #0]
 8006b3c:	4626      	mov	r6, r4
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	d140      	bne.n	8006bc4 <_malloc_r+0xcc>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	4631      	mov	r1, r6
 8006b46:	4638      	mov	r0, r7
 8006b48:	eb04 0803 	add.w	r8, r4, r3
 8006b4c:	f000 f878 	bl	8006c40 <_sbrk_r>
 8006b50:	4580      	cmp	r8, r0
 8006b52:	d13a      	bne.n	8006bca <_malloc_r+0xd2>
 8006b54:	6821      	ldr	r1, [r4, #0]
 8006b56:	3503      	adds	r5, #3
 8006b58:	1a6d      	subs	r5, r5, r1
 8006b5a:	f025 0503 	bic.w	r5, r5, #3
 8006b5e:	3508      	adds	r5, #8
 8006b60:	2d0c      	cmp	r5, #12
 8006b62:	bf38      	it	cc
 8006b64:	250c      	movcc	r5, #12
 8006b66:	4629      	mov	r1, r5
 8006b68:	4638      	mov	r0, r7
 8006b6a:	f7ff ffa5 	bl	8006ab8 <sbrk_aligned>
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d02b      	beq.n	8006bca <_malloc_r+0xd2>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	442b      	add	r3, r5
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	e00e      	b.n	8006b98 <_malloc_r+0xa0>
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	1b52      	subs	r2, r2, r5
 8006b7e:	d41e      	bmi.n	8006bbe <_malloc_r+0xc6>
 8006b80:	2a0b      	cmp	r2, #11
 8006b82:	d916      	bls.n	8006bb2 <_malloc_r+0xba>
 8006b84:	1961      	adds	r1, r4, r5
 8006b86:	42a3      	cmp	r3, r4
 8006b88:	6025      	str	r5, [r4, #0]
 8006b8a:	bf18      	it	ne
 8006b8c:	6059      	strne	r1, [r3, #4]
 8006b8e:	6863      	ldr	r3, [r4, #4]
 8006b90:	bf08      	it	eq
 8006b92:	6031      	streq	r1, [r6, #0]
 8006b94:	5162      	str	r2, [r4, r5]
 8006b96:	604b      	str	r3, [r1, #4]
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f104 060b 	add.w	r6, r4, #11
 8006b9e:	f000 f865 	bl	8006c6c <__malloc_unlock>
 8006ba2:	f026 0607 	bic.w	r6, r6, #7
 8006ba6:	1d23      	adds	r3, r4, #4
 8006ba8:	1af2      	subs	r2, r6, r3
 8006baa:	d0b6      	beq.n	8006b1a <_malloc_r+0x22>
 8006bac:	1b9b      	subs	r3, r3, r6
 8006bae:	50a3      	str	r3, [r4, r2]
 8006bb0:	e7b3      	b.n	8006b1a <_malloc_r+0x22>
 8006bb2:	6862      	ldr	r2, [r4, #4]
 8006bb4:	42a3      	cmp	r3, r4
 8006bb6:	bf0c      	ite	eq
 8006bb8:	6032      	streq	r2, [r6, #0]
 8006bba:	605a      	strne	r2, [r3, #4]
 8006bbc:	e7ec      	b.n	8006b98 <_malloc_r+0xa0>
 8006bbe:	4623      	mov	r3, r4
 8006bc0:	6864      	ldr	r4, [r4, #4]
 8006bc2:	e7b2      	b.n	8006b2a <_malloc_r+0x32>
 8006bc4:	4634      	mov	r4, r6
 8006bc6:	6876      	ldr	r6, [r6, #4]
 8006bc8:	e7b9      	b.n	8006b3e <_malloc_r+0x46>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	603b      	str	r3, [r7, #0]
 8006bce:	4638      	mov	r0, r7
 8006bd0:	f000 f84c 	bl	8006c6c <__malloc_unlock>
 8006bd4:	e7a1      	b.n	8006b1a <_malloc_r+0x22>
 8006bd6:	6025      	str	r5, [r4, #0]
 8006bd8:	e7de      	b.n	8006b98 <_malloc_r+0xa0>
 8006bda:	bf00      	nop
 8006bdc:	20000a14 	.word	0x20000a14

08006be0 <_realloc_r>:
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be4:	4680      	mov	r8, r0
 8006be6:	4614      	mov	r4, r2
 8006be8:	460e      	mov	r6, r1
 8006bea:	b921      	cbnz	r1, 8006bf6 <_realloc_r+0x16>
 8006bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	f7ff bf81 	b.w	8006af8 <_malloc_r>
 8006bf6:	b92a      	cbnz	r2, 8006c04 <_realloc_r+0x24>
 8006bf8:	f7ff ff12 	bl	8006a20 <_free_r>
 8006bfc:	4625      	mov	r5, r4
 8006bfe:	4628      	mov	r0, r5
 8006c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c04:	f000 f838 	bl	8006c78 <_malloc_usable_size_r>
 8006c08:	4284      	cmp	r4, r0
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	d802      	bhi.n	8006c14 <_realloc_r+0x34>
 8006c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c12:	d812      	bhi.n	8006c3a <_realloc_r+0x5a>
 8006c14:	4621      	mov	r1, r4
 8006c16:	4640      	mov	r0, r8
 8006c18:	f7ff ff6e 	bl	8006af8 <_malloc_r>
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d0ed      	beq.n	8006bfe <_realloc_r+0x1e>
 8006c22:	42bc      	cmp	r4, r7
 8006c24:	4622      	mov	r2, r4
 8006c26:	4631      	mov	r1, r6
 8006c28:	bf28      	it	cs
 8006c2a:	463a      	movcs	r2, r7
 8006c2c:	f7ff fed0 	bl	80069d0 <memcpy>
 8006c30:	4631      	mov	r1, r6
 8006c32:	4640      	mov	r0, r8
 8006c34:	f7ff fef4 	bl	8006a20 <_free_r>
 8006c38:	e7e1      	b.n	8006bfe <_realloc_r+0x1e>
 8006c3a:	4635      	mov	r5, r6
 8006c3c:	e7df      	b.n	8006bfe <_realloc_r+0x1e>
	...

08006c40 <_sbrk_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4d06      	ldr	r5, [pc, #24]	; (8006c5c <_sbrk_r+0x1c>)
 8006c44:	2300      	movs	r3, #0
 8006c46:	4604      	mov	r4, r0
 8006c48:	4608      	mov	r0, r1
 8006c4a:	602b      	str	r3, [r5, #0]
 8006c4c:	f7fb f8c4 	bl	8001dd8 <_sbrk>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_sbrk_r+0x1a>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_sbrk_r+0x1a>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	20000a1c 	.word	0x20000a1c

08006c60 <__malloc_lock>:
 8006c60:	4801      	ldr	r0, [pc, #4]	; (8006c68 <__malloc_lock+0x8>)
 8006c62:	f000 b811 	b.w	8006c88 <__retarget_lock_acquire_recursive>
 8006c66:	bf00      	nop
 8006c68:	20000a20 	.word	0x20000a20

08006c6c <__malloc_unlock>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__malloc_unlock+0x8>)
 8006c6e:	f000 b80c 	b.w	8006c8a <__retarget_lock_release_recursive>
 8006c72:	bf00      	nop
 8006c74:	20000a20 	.word	0x20000a20

08006c78 <_malloc_usable_size_r>:
 8006c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c7c:	1f18      	subs	r0, r3, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bfbc      	itt	lt
 8006c82:	580b      	ldrlt	r3, [r1, r0]
 8006c84:	18c0      	addlt	r0, r0, r3
 8006c86:	4770      	bx	lr

08006c88 <__retarget_lock_acquire_recursive>:
 8006c88:	4770      	bx	lr

08006c8a <__retarget_lock_release_recursive>:
 8006c8a:	4770      	bx	lr

08006c8c <_init>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr

08006c98 <_fini>:
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	bf00      	nop
 8006c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9e:	bc08      	pop	{r3}
 8006ca0:	469e      	mov	lr, r3
 8006ca2:	4770      	bx	lr
