
helloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080073c4  080073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007458  08007458  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08007458  08007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007460  08007460  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  080074d8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08007578  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000874  200001b0  08007618  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a24  08007618  00020a24  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ad7f  00000000  00000000  000201de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002dd6  00000000  00000000  0003af5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001590  00000000  00000000  0003dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001458  00000000  00000000  0003f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a848  00000000  00000000  00040720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a3eb  00000000  00000000  0006af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00105c4a  00000000  00000000  00085353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018af9d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000060c8  00000000  00000000  0018aff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	080073ac 	.word	0x080073ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	080073ac 	.word	0x080073ac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 f930 	bl	800184e <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t LIDAR_ADD  =0x62<<1;
 80005ee:	23c4      	movs	r3, #196	; 0xc4
 80005f0:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f8d5 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fbfb 	bl	8000df0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005fa:	f000 f941 	bl	8000880 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005fe:	f000 fb99 	bl	8000d34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000602:	f000 fbc7 	bl	8000d94 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000606:	f000 f9c9 	bl	800099c <MX_TIM1_Init>
  MX_I2C1_Init();
 800060a:	f000 f987 	bl	800091c <MX_I2C1_Init>
  MX_UART4_Init();
 800060e:	f000 fb61 	bl	8000cd4 <MX_UART4_Init>
  MX_TIM3_Init();
 8000612:	f000 fa6f 	bl	8000af4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000616:	f000 fae5 	bl	8000be4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  #define dutyCycle 1.1
  MotorDriver * MD= MotorDriverInit();
 800061a:	f000 fce6 	bl	8000fea <MotorDriverInit>
 800061e:	61b8      	str	r0, [r7, #24]
  TIM3->CCR1 = (int)(driverSpeed/dutyCycle);
 8000620:	4b56      	ldr	r3, [pc, #344]	; (800077c <main+0x198>)
 8000622:	f242 3282 	movw	r2, #9090	; 0x2382
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR1 = (int)(driverSpeed/dutyCycle);
 8000628:	4b55      	ldr	r3, [pc, #340]	; (8000780 <main+0x19c>)
 800062a:	f242 3282 	movw	r2, #9090	; 0x2382
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000630:	2100      	movs	r1, #0
 8000632:	4854      	ldr	r0, [pc, #336]	; (8000784 <main+0x1a0>)
 8000634:	f004 fa98 	bl	8004b68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000638:	2100      	movs	r1, #0
 800063a:	4853      	ldr	r0, [pc, #332]	; (8000788 <main+0x1a4>)
 800063c:	f004 fa94 	bl	8004b68 <HAL_TIM_PWM_Start>
  goForward(MD);
 8000640:	69b8      	ldr	r0, [r7, #24]
 8000642:	f000 fcdd 	bl	8001000 <goForward>
  uint8_t cmd[1];
  #define LIDAR_WRITE_ADD  0xC4
  #define LIDAR_READ_ADD 0xC5
  HAL_StatusTypeDef ret;
  uint8_t data[2];
  uint8_t distance = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	75fb      	strb	r3, [r7, #23]
  UARTClient PC;
  PC.port = &huart3;
 800064a:	4b50      	ldr	r3, [pc, #320]	; (800078c <main+0x1a8>)
 800064c:	607b      	str	r3, [r7, #4]
  UARTClient * PCptr = &PC ;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	613b      	str	r3, [r7, #16]

  UARTPrintln(PCptr,"Starting the code...");
 8000652:	494f      	ldr	r1, [pc, #316]	; (8000790 <main+0x1ac>)
 8000654:	6938      	ldr	r0, [r7, #16]
 8000656:	f000 fd21 	bl	800109c <UARTPrintln>
  //init lidar
  cmd[0] = 0x04;
 800065a:	2304      	movs	r3, #4
 800065c:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(&hi2c1, LIDAR_ADD ,0x00, 1, cmd,1,100);
 800065e:	7ffb      	ldrb	r3, [r7, #31]
 8000660:	b299      	uxth	r1, r3
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	2301      	movs	r3, #1
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	2200      	movs	r2, #0
 8000674:	4847      	ldr	r0, [pc, #284]	; (8000794 <main+0x1b0>)
 8000676:	f002 f9b7 	bl	80029e8 <HAL_I2C_Mem_Write>
  //config lidar
	cmd[0]=0x1d;
 800067a:	231d      	movs	r3, #29
 800067c:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 800067e:	7ffb      	ldrb	r3, [r7, #31]
 8000680:	b299      	uxth	r1, r3
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	9302      	str	r3, [sp, #8]
 8000688:	2301      	movs	r3, #1
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2202      	movs	r2, #2
 8000696:	483f      	ldr	r0, [pc, #252]	; (8000794 <main+0x1b0>)
 8000698:	f002 f9a6 	bl	80029e8 <HAL_I2C_Mem_Write>
	cmd[0]=0x08;
 800069c:	2308      	movs	r3, #8
 800069e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 80006a0:	7ffb      	ldrb	r3, [r7, #31]
 80006a2:	b299      	uxth	r1, r3
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	9302      	str	r3, [sp, #8]
 80006aa:	2301      	movs	r3, #1
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2301      	movs	r3, #1
 80006b6:	2204      	movs	r2, #4
 80006b8:	4836      	ldr	r0, [pc, #216]	; (8000794 <main+0x1b0>)
 80006ba:	f002 f995 	bl	80029e8 <HAL_I2C_Mem_Write>
	cmd[0]=0x00;
 80006be:	2300      	movs	r3, #0
 80006c0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 80006c2:	7ffb      	ldrb	r3, [r7, #31]
 80006c4:	b299      	uxth	r1, r3
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	2301      	movs	r3, #1
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2301      	movs	r3, #1
 80006d8:	221c      	movs	r2, #28
 80006da:	482e      	ldr	r0, [pc, #184]	; (8000794 <main+0x1b0>)
 80006dc:	f002 f984 	bl	80029e8 <HAL_I2C_Mem_Write>

//	  GPIO_PinState userBtn =  HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
//	  while(!userBtn){
////		  UARTPrintln(PCptr, );
//	  };
	  if(HAL_I2C_IsDeviceReady(&hi2c1, LIDAR_ADD, 2, 500)!=HAL_OK){
 80006e0:	7ffb      	ldrb	r3, [r7, #31]
 80006e2:	b299      	uxth	r1, r3
 80006e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006e8:	2202      	movs	r2, #2
 80006ea:	482a      	ldr	r0, [pc, #168]	; (8000794 <main+0x1b0>)
 80006ec:	f002 fa90 	bl	8002c10 <HAL_I2C_IsDeviceReady>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d140      	bne.n	8000778 <main+0x194>
//		  UARTPrintf(PCptr,"disconnected \n\r");
		  continue;
	  }
	  cmd[0] = 0x04;
 80006f6:	2304      	movs	r3, #4
 80006f8:	733b      	strb	r3, [r7, #12]
	  if(HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD,0x00,1,cmd,1,100) != HAL_OK){
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	b299      	uxth	r1, r3
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	9302      	str	r3, [sp, #8]
 8000702:	2301      	movs	r3, #1
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	2200      	movs	r2, #0
 8000710:	4820      	ldr	r0, [pc, #128]	; (8000794 <main+0x1b0>)
 8000712:	f002 f969 	bl	80029e8 <HAL_I2C_Mem_Write>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d004      	beq.n	8000726 <main+0x142>
		  UARTPrintf(PCptr,"disconnected \n\r");
 800071c:	491e      	ldr	r1, [pc, #120]	; (8000798 <main+0x1b4>)
 800071e:	6938      	ldr	r0, [r7, #16]
 8000720:	f000 fc94 	bl	800104c <UARTPrintf>
		  continue;
 8000724:	e029      	b.n	800077a <main+0x196>
	  }
	  cmd[0] = 0x8f;
 8000726:	238f      	movs	r3, #143	; 0x8f
 8000728:	733b      	strb	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(&hi2c1,LIDAR_ADD,cmd,1,100);
 800072a:	7ffb      	ldrb	r3, [r7, #31]
 800072c:	b299      	uxth	r1, r3
 800072e:	f107 020c 	add.w	r2, r7, #12
 8000732:	2364      	movs	r3, #100	; 0x64
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	4816      	ldr	r0, [pc, #88]	; (8000794 <main+0x1b0>)
 800073a:	f001 ff6b 	bl	8002614 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, LIDAR_ADD, data,2,100);
 800073e:	7ffb      	ldrb	r3, [r7, #31]
 8000740:	b299      	uxth	r1, r3
 8000742:	f107 0208 	add.w	r2, r7, #8
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2302      	movs	r3, #2
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <main+0x1b0>)
 800074e:	f002 f855 	bl	80027fc <HAL_I2C_Master_Receive>
	  distance =(data[0]<<8)|(data[1]);
 8000752:	7a3b      	ldrb	r3, [r7, #8]
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	b25a      	sxtb	r2, r3
 8000758:	7a7b      	ldrb	r3, [r7, #9]
 800075a:	b25b      	sxtb	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	b25b      	sxtb	r3, r3
 8000760:	75fb      	strb	r3, [r7, #23]
	  UARTPrintf(PCptr,"Distance is:%d cm \n\r",distance);
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	461a      	mov	r2, r3
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <main+0x1b8>)
 8000768:	6938      	ldr	r0, [r7, #16]
 800076a:	f000 fc6f 	bl	800104c <UARTPrintf>
	  HAL_Delay(1000);
 800076e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000772:	f001 f8c9 	bl	8001908 <HAL_Delay>
 8000776:	e7b3      	b.n	80006e0 <main+0xfc>
		  continue;
 8000778:	bf00      	nop
	  if(HAL_I2C_IsDeviceReady(&hi2c1, LIDAR_ADD, 2, 500)!=HAL_OK){
 800077a:	e7b1      	b.n	80006e0 <main+0xfc>
 800077c:	40000400 	.word	0x40000400
 8000780:	40000800 	.word	0x40000800
 8000784:	20000354 	.word	0x20000354
 8000788:	200003a0 	.word	0x200003a0
 800078c:	20000474 	.word	0x20000474
 8000790:	080073c4 	.word	0x080073c4
 8000794:	200002b4 	.word	0x200002b4
 8000798:	080073dc 	.word	0x080073dc
 800079c:	080073ec 	.word	0x080073ec

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2234      	movs	r2, #52	; 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 f986 	bl	8006ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <SystemClock_Config+0xd8>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <SystemClock_Config+0xd8>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	; 0x40
 80007d0:	4b29      	ldr	r3, [pc, #164]	; (8000878 <SystemClock_Config+0xd8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <SystemClock_Config+0xdc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e4:	4a25      	ldr	r2, [pc, #148]	; (800087c <SystemClock_Config+0xdc>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <SystemClock_Config+0xdc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000810:	2360      	movs	r3, #96	; 0x60
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4618      	mov	r0, r3
 8000826:	f002 ffeb 	bl	8003800 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000830:	f000 fbd6 	bl	8000fe0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000834:	f002 ff94 	bl	8003760 <HAL_PWREx_EnableOverDrive>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800083e:	f000 fbcf 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	230f      	movs	r3, #15
 8000844:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2302      	movs	r3, #2
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2103      	movs	r1, #3
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fa7c 	bl	8003d5c <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800086a:	f000 fbb9 	bl	8000fe0 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	; 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_ETH_Init+0x84>)
 8000886:	4a20      	ldr	r2, [pc, #128]	; (8000908 <MX_ETH_Init+0x88>)
 8000888:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <MX_ETH_Init+0x8c>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_ETH_Init+0x8c>)
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_ETH_Init+0x8c>)
 8000898:	22e1      	movs	r2, #225	; 0xe1
 800089a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_ETH_Init+0x8c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_ETH_Init+0x8c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_ETH_Init+0x8c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_ETH_Init+0x84>)
 80008b0:	4a16      	ldr	r2, [pc, #88]	; (800090c <MX_ETH_Init+0x8c>)
 80008b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_ETH_Init+0x84>)
 80008b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ba:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_ETH_Init+0x84>)
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <MX_ETH_Init+0x90>)
 80008c0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_ETH_Init+0x84>)
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MX_ETH_Init+0x94>)
 80008c6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_ETH_Init+0x84>)
 80008ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008ce:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_ETH_Init+0x84>)
 80008d2:	f001 f923 	bl	8001b1c <HAL_ETH_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008dc:	f000 fb80 	bl	8000fe0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008e0:	2238      	movs	r2, #56	; 0x38
 80008e2:	2100      	movs	r1, #0
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_ETH_Init+0x98>)
 80008e6:	f006 f8eb 	bl	8006ac0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_ETH_Init+0x98>)
 80008ec:	2221      	movs	r2, #33	; 0x21
 80008ee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_ETH_Init+0x98>)
 80008f2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008f6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_ETH_Init+0x98>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000204 	.word	0x20000204
 8000908:	40028000 	.word	0x40028000
 800090c:	20000a04 	.word	0x20000a04
 8000910:	20000110 	.word	0x20000110
 8000914:	20000070 	.word	0x20000070
 8000918:	200001cc 	.word	0x200001cc

0800091c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_I2C1_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_I2C1_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_I2C1_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_I2C1_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_I2C1_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_I2C1_Init+0x74>)
 8000958:	f001 fdcc 	bl	80024f4 <HAL_I2C_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000962:	f000 fb3d 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <MX_I2C1_Init+0x74>)
 800096a:	f002 fd19 	bl	80033a0 <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 fb34 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_I2C1_Init+0x74>)
 800097c:	f002 fd5b 	bl	8003436 <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 fb2b 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200002b4 	.word	0x200002b4
 8000994:	40005400 	.word	0x40005400
 8000998:	20303e5d 	.word	0x20303e5d

0800099c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09a      	sub	sp, #104	; 0x68
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	222c      	movs	r2, #44	; 0x2c
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f006 f872 	bl	8006ac0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009dc:	4b43      	ldr	r3, [pc, #268]	; (8000aec <MX_TIM1_Init+0x150>)
 80009de:	4a44      	ldr	r2, [pc, #272]	; (8000af0 <MX_TIM1_Init+0x154>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80009e2:	4b42      	ldr	r3, [pc, #264]	; (8000aec <MX_TIM1_Init+0x150>)
 80009e4:	225f      	movs	r2, #95	; 0x5f
 80009e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b40      	ldr	r3, [pc, #256]	; (8000aec <MX_TIM1_Init+0x150>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009ee:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <MX_TIM1_Init+0x150>)
 80009f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <MX_TIM1_Init+0x150>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fc:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <MX_TIM1_Init+0x150>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <MX_TIM1_Init+0x150>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a08:	4838      	ldr	r0, [pc, #224]	; (8000aec <MX_TIM1_Init+0x150>)
 8000a0a:	f003 fff5 	bl	80049f8 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a14:	f000 fae4 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a22:	4619      	mov	r1, r3
 8000a24:	4831      	ldr	r0, [pc, #196]	; (8000aec <MX_TIM1_Init+0x150>)
 8000a26:	f004 faad 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a30:	f000 fad6 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <MX_TIM1_Init+0x150>)
 8000a36:	f004 f836 	bl	8004aa6 <HAL_TIM_PWM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a40:	f000 face 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a54:	4619      	mov	r1, r3
 8000a56:	4825      	ldr	r0, [pc, #148]	; (8000aec <MX_TIM1_Init+0x150>)
 8000a58:	f004 ff1c 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a62:	f000 fabd 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a66:	2360      	movs	r3, #96	; 0x60
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a86:	2200      	movs	r2, #0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4818      	ldr	r0, [pc, #96]	; (8000aec <MX_TIM1_Init+0x150>)
 8000a8c:	f004 f966 	bl	8004d5c <HAL_TIM_PWM_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a96:	f000 faa3 	bl	8000fe0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000abc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <MX_TIM1_Init+0x150>)
 8000ad0:	f004 ff6e 	bl	80059b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000ada:	f000 fa81 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <MX_TIM1_Init+0x150>)
 8000ae0:	f000 fc74 	bl	80013cc <HAL_TIM_MspPostInit>

}
 8000ae4:	bf00      	nop
 8000ae6:	3768      	adds	r7, #104	; 0x68
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000308 	.word	0x20000308
 8000af0:	40010000 	.word	0x40010000

08000af4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b28:	4a2d      	ldr	r2, [pc, #180]	; (8000be0 <MX_TIM3_Init+0xec>)
 8000b2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b2e:	225f      	movs	r2, #95	; 0x5f
 8000b30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = driverSpeed -1;
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b4c:	4823      	ldr	r0, [pc, #140]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b4e:	f003 ff53 	bl	80049f8 <HAL_TIM_Base_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b58:	f000 fa42 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b66:	4619      	mov	r1, r3
 8000b68:	481c      	ldr	r0, [pc, #112]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b6a:	f004 fa0b 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b74:	f000 fa34 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b78:	4818      	ldr	r0, [pc, #96]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b7a:	f003 ff94 	bl	8004aa6 <HAL_TIM_PWM_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b84:	f000 fa2c 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4811      	ldr	r0, [pc, #68]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000b98:	f004 fe7c 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ba2:	f000 fa1d 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba6:	2360      	movs	r3, #96	; 0x60
 8000ba8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000bbe:	f004 f8cd 	bl	8004d5c <HAL_TIM_PWM_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000bc8:	f000 fa0a 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <MX_TIM3_Init+0xe8>)
 8000bce:	f000 fbfd 	bl	80013cc <HAL_TIM_MspPostInit>

}
 8000bd2:	bf00      	nop
 8000bd4:	3738      	adds	r7, #56	; 0x38
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000354 	.word	0x20000354
 8000be0:	40000400 	.word	0x40000400

08000be4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c04:	463b      	mov	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
 8000c12:	615a      	str	r2, [r3, #20]
 8000c14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c16:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c18:	4a2d      	ldr	r2, [pc, #180]	; (8000cd0 <MX_TIM4_Init+0xec>)
 8000c1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c1e:	225f      	movs	r2, #95	; 0x5f
 8000c20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = driverSpeed -1;
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c3c:	4823      	ldr	r0, [pc, #140]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c3e:	f003 fedb 	bl	80049f8 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000c48:	f000 f9ca 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c56:	4619      	mov	r1, r3
 8000c58:	481c      	ldr	r0, [pc, #112]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c5a:	f004 f993 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000c64:	f000 f9bc 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c68:	4818      	ldr	r0, [pc, #96]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c6a:	f003 ff1c 	bl	8004aa6 <HAL_TIM_PWM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000c74:	f000 f9b4 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000c88:	f004 fe04 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000c92:	f000 f9a5 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c96:	2360      	movs	r3, #96	; 0x60
 8000c98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4619      	mov	r1, r3
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000cae:	f004 f855 	bl	8004d5c <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000cb8:	f000 f992 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <MX_TIM4_Init+0xe8>)
 8000cbe:	f000 fb85 	bl	80013cc <HAL_TIM_MspPostInit>

}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	; 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200003a0 	.word	0x200003a0
 8000cd0:	40000800 	.word	0x40000800

08000cd4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_UART4_Init+0x58>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_UART4_Init+0x5c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_UART4_Init+0x58>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_UART4_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_UART4_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_UART4_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_UART4_Init+0x58>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_UART4_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_UART4_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_UART4_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_UART4_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_UART4_Init+0x58>)
 8000d18:	f004 fec8 	bl	8005aac <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000d22:	f000 f95d 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003ec 	.word	0x200003ec
 8000d30:	40004c00 	.word	0x40004c00

08000d34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <MX_USART3_UART_Init+0x5c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d78:	f004 fe98 	bl	8005aac <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d82:	f000 f92d 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000474 	.word	0x20000474
 8000d90:	40004800 	.word	0x40004800

08000d94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da2:	2206      	movs	r2, #6
 8000da4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da8:	2202      	movs	r2, #2
 8000daa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd8:	f002 fb79 	bl	80034ce <HAL_PCD_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000de2:	f000 f8fd 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200004fc 	.word	0x200004fc

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	; 0x38
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b70      	ldr	r3, [pc, #448]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a6f      	ldr	r2, [pc, #444]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b6d      	ldr	r3, [pc, #436]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	623b      	str	r3, [r7, #32]
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a69      	ldr	r2, [pc, #420]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b67      	ldr	r3, [pc, #412]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a63      	ldr	r2, [pc, #396]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b61      	ldr	r3, [pc, #388]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a5d      	ldr	r2, [pc, #372]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e66:	4b58      	ldr	r3, [pc, #352]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a57      	ldr	r2, [pc, #348]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e6c:	f043 0320 	orr.w	r3, r3, #32
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b55      	ldr	r3, [pc, #340]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7e:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a51      	ldr	r2, [pc, #324]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e84:	f043 0310 	orr.w	r3, r3, #16
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b4f      	ldr	r3, [pc, #316]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0310 	and.w	r3, r3, #16
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a4b      	ldr	r2, [pc, #300]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eae:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a45      	ldr	r2, [pc, #276]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <MX_GPIO_Init+0x1d8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8000ecc:	483f      	ldr	r0, [pc, #252]	; (8000fcc <MX_GPIO_Init+0x1dc>)
 8000ece:	f001 faf7 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotorBIn1_GPIO_Port, MotorBIn1_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed8:	483d      	ldr	r0, [pc, #244]	; (8000fd0 <MX_GPIO_Init+0x1e0>)
 8000eda:	f001 faf1 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotorBIn2_GPIO_Port, MotorBIn2_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee4:	483b      	ldr	r0, [pc, #236]	; (8000fd4 <MX_GPIO_Init+0x1e4>)
 8000ee6:	f001 faeb 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|MotorAIn1_Pin|MotorAIn2_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f244 2140 	movw	r1, #16960	; 0x4240
 8000ef0:	4839      	ldr	r0, [pc, #228]	; (8000fd8 <MX_GPIO_Init+0x1e8>)
 8000ef2:	f001 fae5 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4833      	ldr	r0, [pc, #204]	; (8000fdc <MX_GPIO_Init+0x1ec>)
 8000f0e:	f001 f92b 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB6 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_6|LD2_Pin;
 8000f12:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4828      	ldr	r0, [pc, #160]	; (8000fcc <MX_GPIO_Init+0x1dc>)
 8000f2c:	f001 f91c 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotorBIn1_Pin */
  GPIO_InitStruct.Pin = MotorBIn1_Pin;
 8000f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MotorBIn1_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <MX_GPIO_Init+0x1e0>)
 8000f4a:	f001 f90d 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotorBIn2_Pin */
  GPIO_InitStruct.Pin = MotorBIn2_Pin;
 8000f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MotorBIn2_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <MX_GPIO_Init+0x1e4>)
 8000f68:	f001 f8fe 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f6c:	2340      	movs	r3, #64	; 0x40
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <MX_GPIO_Init+0x1e8>)
 8000f84:	f001 f8f0 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <MX_GPIO_Init+0x1e8>)
 8000f9c:	f001 f8e4 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorAIn1_Pin MotorAIn2_Pin */
  GPIO_InitStruct.Pin = MotorAIn1_Pin|MotorAIn2_Pin;
 8000fa0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <MX_GPIO_Init+0x1e8>)
 8000fba:	f001 f8d5 	bl	8002168 <HAL_GPIO_Init>

}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	; 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40021400 	.word	0x40021400
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40020800 	.word	0x40020800

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>

08000fea <MotorDriverInit>:
 *      Author: okano
 */

#include "main.h"
#include "motorDriver.h"
MotorDriver * MotorDriverInit(){
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
	MotorDriver temp;
	return &temp;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <goForward>:
void goForward(MotorDriver* motorDriver) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    // code to make the motor driver move forward

	HAL_GPIO_WritePin(MotorAIn1_GPIO_Port, MotorAIn1_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <goForward+0x40>)
 8001010:	f001 fa56 	bl	80024c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIn2_GPIO_Port, MotorAIn2_Pin, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101a:	4809      	ldr	r0, [pc, #36]	; (8001040 <goForward+0x40>)
 800101c:	f001 fa50 	bl	80024c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBIn1_GPIO_Port, MotorBIn1_Pin, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <goForward+0x44>)
 8001028:	f001 fa4a 	bl	80024c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBIn2_GPIO_Port, MotorBIn2_Pin, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <goForward+0x48>)
 8001034:	f001 fa44 	bl	80024c0 <HAL_GPIO_WritePin>

}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021800 	.word	0x40021800
 8001044:	40021400 	.word	0x40021400
 8001048:	40021000 	.word	0x40021000

0800104c <UARTPrintf>:
#include <stdarg.h>
#include <main.h>
#include "serial.h"


void UARTPrintf(UARTClient * client,  char *formattedString,...){
 800104c:	b40e      	push	{r1, r2, r3}
 800104e:	b580      	push	{r7, lr}
 8001050:	b099      	sub	sp, #100	; 0x64
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
    char  str[80]= "";
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	224c      	movs	r2, #76	; 0x4c
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f005 fd2c 	bl	8006ac0 <memset>

    /*Extract the the argument list using VA apis */
    va_list args;
    va_start(args, formattedString);
 8001068:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800106c:	60fb      	str	r3, [r7, #12]
    vsprintf(str, formattedString,args);
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001076:	4618      	mov	r0, r3
 8001078:	f005 fd40 	bl	8006afc <vsiprintf>
    va_end(args);
    HAL_UART_Transmit(client->port, (uint8_t * )str, sizeof(str),HAL_MAX_DELAY);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	f107 0110 	add.w	r1, r7, #16
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	2250      	movs	r2, #80	; 0x50
 800108a:	f004 fd5d 	bl	8005b48 <HAL_UART_Transmit>


}
 800108e:	bf00      	nop
 8001090:	3764      	adds	r7, #100	; 0x64
 8001092:	46bd      	mov	sp, r7
 8001094:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001098:	b003      	add	sp, #12
 800109a:	4770      	bx	lr

0800109c <UARTPrintln>:

void UARTPrintln(UARTClient * client, char *formattedString,...){
 800109c:	b40e      	push	{r1, r2, r3}
 800109e:	b580      	push	{r7, lr}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
	UARTPrintf(client, "%s\n\r",formattedString);
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4905      	ldr	r1, [pc, #20]	; (80010c0 <UARTPrintln+0x24>)
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffce 	bl	800104c <UARTPrintf>
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ba:	b003      	add	sp, #12
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	08007404 	.word	0x08007404

080010c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_MspInit+0x44>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_MspInit+0x44>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_MspInit+0x44>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_MspInit+0x44>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_MspInit+0x44>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_MspInit+0x44>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	; 0x38
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <HAL_ETH_MspInit+0x158>)
 800112a:	4293      	cmp	r3, r2
 800112c:	f040 8096 	bne.w	800125c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001130:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 8001136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001144:	623b      	str	r3, [r7, #32]
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	4b47      	ldr	r3, [pc, #284]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4a46      	ldr	r2, [pc, #280]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 800114e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
 8001154:	4b44      	ldr	r3, [pc, #272]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	4a40      	ldr	r2, [pc, #256]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 8001166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800116a:	6313      	str	r3, [r2, #48]	; 0x30
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a3a      	ldr	r2, [pc, #232]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b38      	ldr	r3, [pc, #224]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a34      	ldr	r2, [pc, #208]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 80011c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_ETH_MspInit+0x15c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011d8:	2332      	movs	r3, #50	; 0x32
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011e8:	230b      	movs	r3, #11
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	481e      	ldr	r0, [pc, #120]	; (800126c <HAL_ETH_MspInit+0x160>)
 80011f4:	f000 ffb8 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011f8:	2386      	movs	r3, #134	; 0x86
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001208:	230b      	movs	r3, #11
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <HAL_ETH_MspInit+0x164>)
 8001214:	f000 ffa8 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800122a:	230b      	movs	r3, #11
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	480f      	ldr	r0, [pc, #60]	; (8001274 <HAL_ETH_MspInit+0x168>)
 8001236:	f000 ff97 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800123a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800124c:	230b      	movs	r3, #11
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	4808      	ldr	r0, [pc, #32]	; (8001278 <HAL_ETH_MspInit+0x16c>)
 8001258:	f000 ff86 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	3738      	adds	r7, #56	; 0x38
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40028000 	.word	0x40028000
 8001268:	40023800 	.word	0x40023800
 800126c:	40020800 	.word	0x40020800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40021800 	.word	0x40021800

0800127c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0ae      	sub	sp, #184	; 0xb8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2290      	movs	r2, #144	; 0x90
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f005 fc0f 	bl	8006ac0 <memset>
  if(hi2c->Instance==I2C1)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a22      	ldr	r2, [pc, #136]	; (8001330 <HAL_I2C_MspInit+0xb4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d13c      	bne.n	8001326 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 ff74 	bl	80041a8 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012c6:	f7ff fe8b 	bl	8000fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <HAL_I2C_MspInit+0xb8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_I2C_MspInit+0xb8>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_I2C_MspInit+0xb8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012fc:	2304      	movs	r3, #4
 80012fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001306:	4619      	mov	r1, r3
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <HAL_I2C_MspInit+0xbc>)
 800130a:	f000 ff2d 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_I2C_MspInit+0xb8>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_I2C_MspInit+0xb8>)
 8001314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_I2C_MspInit+0xb8>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	37b8      	adds	r7, #184	; 0xb8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40005400 	.word	0x40005400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400

0800133c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <HAL_TIM_Base_MspInit+0x80>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10c      	bne.n	8001368 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_TIM_Base_MspInit+0x84>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <HAL_TIM_Base_MspInit+0x84>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_TIM_Base_MspInit+0x84>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001366:	e022      	b.n	80013ae <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <HAL_TIM_Base_MspInit+0x88>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10c      	bne.n	800138c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <HAL_TIM_Base_MspInit+0x84>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <HAL_TIM_Base_MspInit+0x84>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_TIM_Base_MspInit+0x84>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
}
 800138a:	e010      	b.n	80013ae <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_TIM_Base_MspInit+0x8c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d10b      	bne.n	80013ae <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_TIM_Base_MspInit+0x84>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_TIM_Base_MspInit+0x84>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_TIM_Base_MspInit+0x84>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
}
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40000800 	.word	0x40000800

080013cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a34      	ldr	r2, [pc, #208]	; (80014bc <HAL_TIM_MspPostInit+0xf0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d11d      	bne.n	800142a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <HAL_TIM_MspPostInit+0xf4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <HAL_TIM_MspPostInit+0xf4>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <HAL_TIM_MspPostInit+0xf4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4828      	ldr	r0, [pc, #160]	; (80014c4 <HAL_TIM_MspPostInit+0xf8>)
 8001424:	f000 fea0 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001428:	e043      	b.n	80014b2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <HAL_TIM_MspPostInit+0xfc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d11c      	bne.n	800146e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <HAL_TIM_MspPostInit+0xf4>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <HAL_TIM_MspPostInit+0xf4>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_TIM_MspPostInit+0xf4>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800144c:	2340      	movs	r3, #64	; 0x40
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001454:	2301      	movs	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800145c:	2302      	movs	r3, #2
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4819      	ldr	r0, [pc, #100]	; (80014cc <HAL_TIM_MspPostInit+0x100>)
 8001468:	f000 fe7e 	bl	8002168 <HAL_GPIO_Init>
}
 800146c:	e021      	b.n	80014b2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_TIM_MspPostInit+0x104>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d11c      	bne.n	80014b2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_TIM_MspPostInit+0xf4>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <HAL_TIM_MspPostInit+0xf4>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_TIM_MspPostInit+0xf4>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149a:	2301      	movs	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014a2:	2302      	movs	r3, #2
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <HAL_TIM_MspPostInit+0x108>)
 80014ae:	f000 fe5b 	bl	8002168 <HAL_GPIO_Init>
}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40000800 	.word	0x40000800
 80014d4:	40020c00 	.word	0x40020c00

080014d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0b0      	sub	sp, #192	; 0xc0
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2290      	movs	r2, #144	; 0x90
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f005 fae1 	bl	8006ac0 <memset>
  if(huart->Instance==UART4)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a43      	ldr	r2, [pc, #268]	; (8001610 <HAL_UART_MspInit+0x138>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d13d      	bne.n	8001584 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800150c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800150e:	2300      	movs	r3, #0
 8001510:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fe46 	bl	80041a8 <HAL_RCCEx_PeriphCLKConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001522:	f7ff fd5d 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001526:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <HAL_UART_MspInit+0x13c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a3a      	ldr	r2, [pc, #232]	; (8001614 <HAL_UART_MspInit+0x13c>)
 800152c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_UART_MspInit+0x13c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	4b35      	ldr	r3, [pc, #212]	; (8001614 <HAL_UART_MspInit+0x13c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a34      	ldr	r2, [pc, #208]	; (8001614 <HAL_UART_MspInit+0x13c>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_UART_MspInit+0x13c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001556:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800155a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001570:	2308      	movs	r3, #8
 8001572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800157a:	4619      	mov	r1, r3
 800157c:	4826      	ldr	r0, [pc, #152]	; (8001618 <HAL_UART_MspInit+0x140>)
 800157e:	f000 fdf3 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001582:	e041      	b.n	8001608 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a24      	ldr	r2, [pc, #144]	; (800161c <HAL_UART_MspInit+0x144>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d13c      	bne.n	8001608 <HAL_UART_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800158e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001592:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fe03 	bl	80041a8 <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80015a8:	f7ff fd1a 	bl	8000fe0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_UART_MspInit+0x13c>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_UART_MspInit+0x13c>)
 80015b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_UART_MspInit+0x13c>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_UART_MspInit+0x13c>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <HAL_UART_MspInit+0x13c>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	6313      	str	r3, [r2, #48]	; 0x30
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_UART_MspInit+0x13c>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f6:	2307      	movs	r3, #7
 80015f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001600:	4619      	mov	r1, r3
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <HAL_UART_MspInit+0x148>)
 8001604:	f000 fdb0 	bl	8002168 <HAL_GPIO_Init>
}
 8001608:	bf00      	nop
 800160a:	37c0      	adds	r7, #192	; 0xc0
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40004c00 	.word	0x40004c00
 8001614:	40023800 	.word	0x40023800
 8001618:	40020800 	.word	0x40020800
 800161c:	40004800 	.word	0x40004800
 8001620:	40020c00 	.word	0x40020c00

08001624 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b0ae      	sub	sp, #184	; 0xb8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2290      	movs	r2, #144	; 0x90
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f005 fa3b 	bl	8006ac0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001652:	d159      	bne.n	8001708 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001658:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4618      	mov	r0, r3
 8001666:	f002 fd9f 	bl	80041a8 <HAL_RCCEx_PeriphCLKConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001670:	f7ff fcb6 	bl	8000fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_PCD_MspInit+0xec>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a25      	ldr	r2, [pc, #148]	; (8001710 <HAL_PCD_MspInit+0xec>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_PCD_MspInit+0xec>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800168c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016a6:	230a      	movs	r3, #10
 80016a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4818      	ldr	r0, [pc, #96]	; (8001714 <HAL_PCD_MspInit+0xf0>)
 80016b4:	f000 fd58 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4810      	ldr	r0, [pc, #64]	; (8001714 <HAL_PCD_MspInit+0xf0>)
 80016d4:	f000 fd48 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_PCD_MspInit+0xec>)
 80016da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016dc:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <HAL_PCD_MspInit+0xec>)
 80016de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e2:	6353      	str	r3, [r2, #52]	; 0x34
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_PCD_MspInit+0xec>)
 80016e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_PCD_MspInit+0xec>)
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_PCD_MspInit+0xec>)
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fa:	6453      	str	r3, [r2, #68]	; 0x44
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <HAL_PCD_MspInit+0xec>)
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	37b8      	adds	r7, #184	; 0xb8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f8b0 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f005 f966 	bl	8006a6c <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <_sbrk+0x64>)
 80017bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20080000 	.word	0x20080000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	20000a0c 	.word	0x20000a0c
 80017d4:	20000a28 	.word	0x20000a28

080017d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001802:	490e      	ldr	r1, [pc, #56]	; (800183c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001804:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001818:	4c0b      	ldr	r4, [pc, #44]	; (8001848 <LoopFillZerobss+0x26>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001826:	f7ff ffd7 	bl	80017d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182a:	f005 f925 	bl	8006a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7fe fed9 	bl	80005e4 <main>
  bx  lr    
 8001832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001840:	08007468 	.word	0x08007468
  ldr r2, =_sbss
 8001844:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001848:	20000a24 	.word	0x20000a24

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>

0800184e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001852:	2003      	movs	r0, #3
 8001854:	f000 f92e 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001858:	2000      	movs	r0, #0
 800185a:	f000 f805 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185e:	f7ff fc31 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f93b 	bl	8001b02 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f911 	bl	8001aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000a10 	.word	0x20000a10

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000a10 	.word	0x20000a10

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <__NVIC_SetPriorityGrouping+0x40>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	4313      	orrs	r3, r2
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x40>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	05fa0000 	.word	0x05fa0000

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff ff8e 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff47 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff5c 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff8e 	bl	8001a08 <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5d 	bl	80019b4 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffb0 	bl	8001a70 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06a      	b.n	8001c04 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d106      	bne.n	8001b46 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2223      	movs	r2, #35	; 0x23
 8001b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fae3 	bl	800110c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_ETH_Init+0xf0>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <HAL_ETH_Init+0xf0>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <HAL_ETH_Init+0xf0>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b68:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_ETH_Init+0xf4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b94:	f7ff feac 	bl	80018f0 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b9a:	e011      	b.n	8001bc0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b9c:	f7ff fea8 	bl	80018f0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001baa:	d909      	bls.n	8001bc0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	22e0      	movs	r2, #224	; 0xe0
 8001bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e021      	b.n	8001c04 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1e4      	bne.n	8001b9c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f958 	bl	8001e88 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f9ff 	bl	8001fdc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fa55 	bl	800208e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	461a      	mov	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f9bd 	bl	8001f6c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800

08001c14 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <ETH_SetMACConfig+0x15c>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	7c1b      	ldrb	r3, [r3, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <ETH_SetMACConfig+0x28>
 8001c36:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c3a:	e000      	b.n	8001c3e <ETH_SetMACConfig+0x2a>
 8001c3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	7c5b      	ldrb	r3, [r3, #17]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <ETH_SetMACConfig+0x38>
 8001c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4a:	e000      	b.n	8001c4e <ETH_SetMACConfig+0x3a>
 8001c4c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c4e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	7fdb      	ldrb	r3, [r3, #31]
 8001c5a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c5c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	7f92      	ldrb	r2, [r2, #30]
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d102      	bne.n	8001c72 <ETH_SetMACConfig+0x5e>
 8001c6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c70:	e000      	b.n	8001c74 <ETH_SetMACConfig+0x60>
 8001c72:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	7f1b      	ldrb	r3, [r3, #28]
 8001c7a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c7c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	791b      	ldrb	r3, [r3, #4]
 8001c88:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c92:	2a00      	cmp	r2, #0
 8001c94:	d102      	bne.n	8001c9c <ETH_SetMACConfig+0x88>
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	e000      	b.n	8001c9e <ETH_SetMACConfig+0x8a>
 8001c9c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	7bdb      	ldrb	r3, [r3, #15]
 8001ca4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ca6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cb4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff fe1a 	bl	8001908 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cfa:	2a00      	cmp	r2, #0
 8001cfc:	d101      	bne.n	8001d02 <ETH_SetMACConfig+0xee>
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	e000      	b.n	8001d04 <ETH_SetMACConfig+0xf0>
 8001d02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d04:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d12:	2a01      	cmp	r2, #1
 8001d14:	d101      	bne.n	8001d1a <ETH_SetMACConfig+0x106>
 8001d16:	2208      	movs	r2, #8
 8001d18:	e000      	b.n	8001d1c <ETH_SetMACConfig+0x108>
 8001d1a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d1c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d24:	2a01      	cmp	r2, #1
 8001d26:	d101      	bne.n	8001d2c <ETH_SetMACConfig+0x118>
 8001d28:	2204      	movs	r2, #4
 8001d2a:	e000      	b.n	8001d2e <ETH_SetMACConfig+0x11a>
 8001d2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d36:	2a01      	cmp	r2, #1
 8001d38:	d101      	bne.n	8001d3e <ETH_SetMACConfig+0x12a>
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	e000      	b.n	8001d40 <ETH_SetMACConfig+0x12c>
 8001d3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d40:	4313      	orrs	r3, r2
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff fdd5 	bl	8001908 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	ff20810f 	.word	0xff20810f

08001d74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <ETH_SetDMAConfig+0x110>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	7b1b      	ldrb	r3, [r3, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <ETH_SetDMAConfig+0x2c>
 8001d9a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d9e:	e000      	b.n	8001da2 <ETH_SetDMAConfig+0x2e>
 8001da0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	7b5b      	ldrb	r3, [r3, #13]
 8001da6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001da8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	7f52      	ldrb	r2, [r2, #29]
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d102      	bne.n	8001db8 <ETH_SetDMAConfig+0x44>
 8001db2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001db6:	e000      	b.n	8001dba <ETH_SetDMAConfig+0x46>
 8001db8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	7b9b      	ldrb	r3, [r3, #14]
 8001dc0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dc2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dc8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	7f1b      	ldrb	r3, [r3, #28]
 8001dce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001dd0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	7f9b      	ldrb	r3, [r3, #30]
 8001dd6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dd8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001de8:	4313      	orrs	r3, r2
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff fd7c 	bl	8001908 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	791b      	ldrb	r3, [r3, #4]
 8001e22:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e28:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e2e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e34:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e3c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e3e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e46:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e4c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e5a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff fd4d 	bl	8001908 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	f8de3f23 	.word	0xf8de3f23

08001e88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0a6      	sub	sp, #152	; 0x98
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001eea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eee:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001efc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fe86 	bl	8001c14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f3c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff08 	bl	8001d74 <ETH_SetDMAConfig>
}
 8001f64:	bf00      	nop
 8001f66:	3798      	adds	r7, #152	; 0x98
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3305      	adds	r3, #5
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	3204      	adds	r2, #4
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <ETH_MACAddressConfig+0x68>)
 8001f8e:	4413      	add	r3, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3303      	adds	r3, #3
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	061a      	lsls	r2, r3, #24
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3301      	adds	r3, #1
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <ETH_MACAddressConfig+0x6c>)
 8001fbe:	4413      	add	r3, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	6013      	str	r3, [r2, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40028040 	.word	0x40028040
 8001fd8:	40028044 	.word	0x40028044

08001fdc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e03e      	b.n	8002068 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68d9      	ldr	r1, [r3, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	3206      	adds	r2, #6
 800201c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d80c      	bhi.n	800204c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	e004      	b.n	8002056 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3301      	adds	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d9bd      	bls.n	8001fea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002080:	611a      	str	r2, [r3, #16]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e046      	b.n	800212a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6919      	ldr	r1, [r3, #16]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2200      	movs	r2, #0
 80020b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020d8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80020e0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	3212      	adds	r2, #18
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d80c      	bhi.n	800211a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	461a      	mov	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	e004      	b.n	8002124 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3301      	adds	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d9b5      	bls.n	800209c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215a:	60da      	str	r2, [r3, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e175      	b.n	8002474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 8164 	bne.w	800246e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_GPIO_Init+0x56>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d130      	bne.n	8002220 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d017      	beq.n	800225c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80be 	beq.w	800246e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	4b66      	ldr	r3, [pc, #408]	; (800248c <HAL_GPIO_Init+0x324>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a65      	ldr	r2, [pc, #404]	; (800248c <HAL_GPIO_Init+0x324>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_GPIO_Init+0x324>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800230a:	4a61      	ldr	r2, [pc, #388]	; (8002490 <HAL_GPIO_Init+0x328>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <HAL_GPIO_Init+0x32c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d037      	beq.n	80023a6 <HAL_GPIO_Init+0x23e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a57      	ldr	r2, [pc, #348]	; (8002498 <HAL_GPIO_Init+0x330>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d031      	beq.n	80023a2 <HAL_GPIO_Init+0x23a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a56      	ldr	r2, [pc, #344]	; (800249c <HAL_GPIO_Init+0x334>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02b      	beq.n	800239e <HAL_GPIO_Init+0x236>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a55      	ldr	r2, [pc, #340]	; (80024a0 <HAL_GPIO_Init+0x338>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d025      	beq.n	800239a <HAL_GPIO_Init+0x232>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a54      	ldr	r2, [pc, #336]	; (80024a4 <HAL_GPIO_Init+0x33c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_Init+0x22e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a53      	ldr	r2, [pc, #332]	; (80024a8 <HAL_GPIO_Init+0x340>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_GPIO_Init+0x22a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_GPIO_Init+0x344>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0x226>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a51      	ldr	r2, [pc, #324]	; (80024b0 <HAL_GPIO_Init+0x348>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_GPIO_Init+0x222>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_GPIO_Init+0x34c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x21e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <HAL_GPIO_Init+0x350>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_GPIO_Init+0x21a>
 800237e:	2309      	movs	r3, #9
 8002380:	e012      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 8002382:	230a      	movs	r3, #10
 8002384:	e010      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 8002386:	2308      	movs	r3, #8
 8002388:	e00e      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 800238a:	2307      	movs	r3, #7
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 800238e:	2306      	movs	r3, #6
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x240>
 80023a6:	2300      	movs	r3, #0
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023b8:	4935      	ldr	r1, [pc, #212]	; (8002490 <HAL_GPIO_Init+0x328>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_GPIO_Init+0x354>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ea:	4a34      	ldr	r2, [pc, #208]	; (80024bc <HAL_GPIO_Init+0x354>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f0:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_GPIO_Init+0x354>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <HAL_GPIO_Init+0x354>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_GPIO_Init+0x354>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_GPIO_Init+0x354>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_GPIO_Init+0x354>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <HAL_GPIO_Init+0x354>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3301      	adds	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	f67f ae86 	bls.w	8002188 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40013800 	.word	0x40013800
 8002494:	40020000 	.word	0x40020000
 8002498:	40020400 	.word	0x40020400
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020c00 	.word	0x40020c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40021400 	.word	0x40021400
 80024ac:	40021800 	.word	0x40021800
 80024b0:	40021c00 	.word	0x40021c00
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40022400 	.word	0x40022400
 80024bc:	40013c00 	.word	0x40013c00

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024dc:	e003      	b.n	80024e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07f      	b.n	8002606 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe feae 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2224      	movs	r2, #36	; 0x24
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002544:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002554:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d107      	bne.n	800256e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e006      	b.n	800257c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800257a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d104      	bne.n	800258e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800258c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_I2C_Init+0x11c>)
 800259a:	430b      	orrs	r3, r1
 800259c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69d9      	ldr	r1, [r3, #28]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1a      	ldr	r2, [r3, #32]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	02008000 	.word	0x02008000

08002614 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	461a      	mov	r2, r3
 8002620:	460b      	mov	r3, r1
 8002622:	817b      	strh	r3, [r7, #10]
 8002624:	4613      	mov	r3, r2
 8002626:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	f040 80da 	bne.w	80027ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_I2C_Master_Transmit+0x30>
 8002640:	2302      	movs	r3, #2
 8002642:	e0d3      	b.n	80027ec <HAL_I2C_Master_Transmit+0x1d8>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800264c:	f7ff f950 	bl	80018f0 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2319      	movs	r3, #25
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fc56 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0be      	b.n	80027ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2221      	movs	r2, #33	; 0x21
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2210      	movs	r2, #16
 800267a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	893a      	ldrh	r2, [r7, #8]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	2bff      	cmp	r3, #255	; 0xff
 800269e:	d90e      	bls.n	80026be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	22ff      	movs	r2, #255	; 0xff
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	8979      	ldrh	r1, [r7, #10]
 80026ae:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fe40 	bl	800333c <I2C_TransferConfig>
 80026bc:	e06c      	b.n	8002798 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	8979      	ldrh	r1, [r7, #10]
 80026d0:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fe2f 	bl	800333c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026de:	e05b      	b.n	8002798 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	6a39      	ldr	r1, [r7, #32]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fc53 	bl	8002f90 <I2C_WaitOnTXISFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e07b      	b.n	80027ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d034      	beq.n	8002798 <HAL_I2C_Master_Transmit+0x184>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	2b00      	cmp	r3, #0
 8002734:	d130      	bne.n	8002798 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	2200      	movs	r2, #0
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fbe5 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e04d      	b.n	80027ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2bff      	cmp	r3, #255	; 0xff
 8002758:	d90e      	bls.n	8002778 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	22ff      	movs	r2, #255	; 0xff
 800275e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	b2da      	uxtb	r2, r3
 8002766:	8979      	ldrh	r1, [r7, #10]
 8002768:	2300      	movs	r3, #0
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fde3 	bl	800333c <I2C_TransferConfig>
 8002776:	e00f      	b.n	8002798 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	b2da      	uxtb	r2, r3
 8002788:	8979      	ldrh	r1, [r7, #10]
 800278a:	2300      	movs	r3, #0
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fdd2 	bl	800333c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d19e      	bne.n	80026e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	6a39      	ldr	r1, [r7, #32]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fc32 	bl	8003010 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e01a      	b.n	80027ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2220      	movs	r2, #32
 80027bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80027ca:	400b      	ands	r3, r1
 80027cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027ea:	2302      	movs	r3, #2
  }
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	80002000 	.word	0x80002000
 80027f8:	fe00e800 	.word	0xfe00e800

080027fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	4613      	mov	r3, r2
 800280e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	f040 80db 	bne.w	80029d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_I2C_Master_Receive+0x30>
 8002828:	2302      	movs	r3, #2
 800282a:	e0d4      	b.n	80029d6 <HAL_I2C_Master_Receive+0x1da>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002834:	f7ff f85c 	bl	80018f0 <HAL_GetTick>
 8002838:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2319      	movs	r3, #25
 8002840:	2201      	movs	r2, #1
 8002842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fb62 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0bf      	b.n	80029d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2222      	movs	r2, #34	; 0x22
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2210      	movs	r2, #16
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d90e      	bls.n	80028a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	b2da      	uxtb	r2, r3
 8002894:	8979      	ldrh	r1, [r7, #10]
 8002896:	4b52      	ldr	r3, [pc, #328]	; (80029e0 <HAL_I2C_Master_Receive+0x1e4>)
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fd4c 	bl	800333c <I2C_TransferConfig>
 80028a4:	e06d      	b.n	8002982 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	8979      	ldrh	r1, [r7, #10]
 80028b8:	4b49      	ldr	r3, [pc, #292]	; (80029e0 <HAL_I2C_Master_Receive+0x1e4>)
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fd3b 	bl	800333c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80028c6:	e05c      	b.n	8002982 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	6a39      	ldr	r1, [r7, #32]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fbdb 	bl	8003088 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e07c      	b.n	80029d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d034      	beq.n	8002982 <HAL_I2C_Master_Receive+0x186>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d130      	bne.n	8002982 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	2200      	movs	r2, #0
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 faf0 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e04d      	b.n	80029d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	2bff      	cmp	r3, #255	; 0xff
 8002942:	d90e      	bls.n	8002962 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	22ff      	movs	r2, #255	; 0xff
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294e:	b2da      	uxtb	r2, r3
 8002950:	8979      	ldrh	r1, [r7, #10]
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fcee 	bl	800333c <I2C_TransferConfig>
 8002960:	e00f      	b.n	8002982 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	b2da      	uxtb	r2, r3
 8002972:	8979      	ldrh	r1, [r7, #10]
 8002974:	2300      	movs	r3, #0
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fcdd 	bl	800333c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d19d      	bne.n	80028c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	6a39      	ldr	r1, [r7, #32]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fb3d 	bl	8003010 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e01a      	b.n	80029d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2220      	movs	r2, #32
 80029a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <HAL_I2C_Master_Receive+0x1e8>)
 80029b4:	400b      	ands	r3, r1
 80029b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	80002400 	.word	0x80002400
 80029e4:	fe00e800 	.word	0xfe00e800

080029e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	460b      	mov	r3, r1
 80029fc:	813b      	strh	r3, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	f040 80f9 	bne.w	8002c02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x34>
 8002a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d105      	bne.n	8002a28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0ed      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Mem_Write+0x4e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e0e6      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a3e:	f7fe ff57 	bl	80018f0 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2319      	movs	r3, #25
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fa5d 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0d1      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2221      	movs	r2, #33	; 0x21
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a88:	88f8      	ldrh	r0, [r7, #6]
 8002a8a:	893a      	ldrh	r2, [r7, #8]
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4603      	mov	r3, r0
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f9c1 	bl	8002e20 <I2C_RequestMemoryWrite>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0a9      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2bff      	cmp	r3, #255	; 0xff
 8002ab8:	d90e      	bls.n	8002ad8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	22ff      	movs	r2, #255	; 0xff
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	8979      	ldrh	r1, [r7, #10]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fc33 	bl	800333c <I2C_TransferConfig>
 8002ad6:	e00f      	b.n	8002af8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fc22 	bl	800333c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fa47 	bl	8002f90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e07b      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d034      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x1c8>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d130      	bne.n	8002bb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f9d9 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e04d      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2bff      	cmp	r3, #255	; 0xff
 8002b70:	d90e      	bls.n	8002b90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	2300      	movs	r3, #0
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fbd7 	bl	800333c <I2C_TransferConfig>
 8002b8e:	e00f      	b.n	8002bb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fbc6 	bl	800333c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d19e      	bne.n	8002af8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fa26 	bl	8003010 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e01a      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_I2C_Mem_Write+0x224>)
 8002be2:	400b      	ands	r3, r1
 8002be4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	fe00e800 	.word	0xfe00e800

08002c10 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	f040 80ef 	bne.w	8002e10 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0e5      	b.n	8002e12 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_I2C_IsDeviceReady+0x44>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0de      	b.n	8002e12 <HAL_I2C_IsDeviceReady+0x202>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <HAL_I2C_IsDeviceReady+0x6e>
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c78:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <HAL_I2C_IsDeviceReady+0x20c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	e004      	b.n	8002c88 <HAL_I2C_IsDeviceReady+0x78>
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c84:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fe2f 	bl	80018f0 <HAL_GetTick>
 8002c92:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cc0:	e034      	b.n	8002d2c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d01a      	beq.n	8002d00 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cca:	f7fe fe11 	bl	80018f0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <HAL_I2C_IsDeviceReady+0xd0>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10f      	bne.n	8002d00 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e088      	b.n	8002e12 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	2300      	movne	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d2c:	7ffb      	ldrb	r3, [r7, #31]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <HAL_I2C_IsDeviceReady+0x128>
 8002d32:	7fbb      	ldrb	r3, [r7, #30]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0c4      	beq.n	8002cc2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d01a      	beq.n	8002d7c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2120      	movs	r1, #32
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f8dd 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e058      	b.n	8002e12 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2220      	movs	r2, #32
 8002d66:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e04a      	b.n	8002e12 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	2120      	movs	r1, #32
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f8c2 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e03d      	b.n	8002e12 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2220      	movs	r2, #32
 8002da4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d118      	bne.n	8002de0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dbc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f8a1 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e01c      	b.n	8002e12 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3301      	adds	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	f63f af3d 	bhi.w	8002c6a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	02002000 	.word	0x02002000

08002e20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	460b      	mov	r3, r1
 8002e34:	813b      	strh	r3, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	8979      	ldrh	r1, [r7, #10]
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <I2C_RequestMemoryWrite+0xa4>)
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fa77 	bl	800333c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f89c 	bl	8002f90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e02c      	b.n	8002ebc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e68:	893b      	ldrh	r3, [r7, #8]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
 8002e72:	e015      	b.n	8002ea0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e74:	893b      	ldrh	r3, [r7, #8]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f882 	bl	8002f90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e012      	b.n	8002ebc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f830 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	80002000 	.word	0x80002000

08002ec8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d103      	bne.n	8002ee6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d007      	beq.n	8002f04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	619a      	str	r2, [r3, #24]
  }
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f20:	e022      	b.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d01e      	beq.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7fe fce1 	bl	80018f0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d113      	bne.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e00f      	b.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d0cd      	beq.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f9c:	e02c      	b.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f8ea 	bl	800317c <I2C_IsErrorOccurred>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e02a      	b.n	8003008 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d01e      	beq.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fba:	f7fe fc99 	bl	80018f0 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d113      	bne.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e007      	b.n	8003008 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d1cb      	bne.n	8002f9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301c:	e028      	b.n	8003070 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f8aa 	bl	800317c <I2C_IsErrorOccurred>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e026      	b.n	8003080 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7fe fc5d 	bl	80018f0 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d113      	bne.n	8003070 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e007      	b.n	8003080 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b20      	cmp	r3, #32
 800307c:	d1cf      	bne.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003094:	e064      	b.n	8003160 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f86e 	bl	800317c <I2C_IsErrorOccurred>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e062      	b.n	8003170 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d138      	bne.n	800312a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d105      	bne.n	80030d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e04e      	b.n	8003170 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d107      	bne.n	80030f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2210      	movs	r2, #16
 80030e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2204      	movs	r2, #4
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
 80030ee:	e002      	b.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2220      	movs	r2, #32
 80030fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800310a:	400b      	ands	r3, r1
 800310c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e022      	b.n	8003170 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7fe fbe1 	bl	80018f0 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10f      	bne.n	8003160 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e007      	b.n	8003170 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d193      	bne.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	fe00e800 	.word	0xfe00e800

0800317c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d068      	beq.n	800327a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2210      	movs	r2, #16
 80031ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031b0:	e049      	b.n	8003246 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d045      	beq.n	8003246 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe fb99 	bl	80018f0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_IsErrorOccurred+0x54>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d13a      	bne.n	8003246 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f2:	d121      	bne.n	8003238 <I2C_IsErrorOccurred+0xbc>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031fa:	d01d      	beq.n	8003238 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d01a      	beq.n	8003238 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003210:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003212:	f7fe fb6d 	bl	80018f0 <HAL_GetTick>
 8003216:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003218:	e00e      	b.n	8003238 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800321a:	f7fe fb69 	bl	80018f0 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b19      	cmp	r3, #25
 8003226:	d907      	bls.n	8003238 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f043 0320 	orr.w	r3, r3, #32
 800322e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003236:	e006      	b.n	8003246 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b20      	cmp	r3, #32
 8003244:	d1e9      	bne.n	800321a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b20      	cmp	r3, #32
 8003252:	d003      	beq.n	800325c <I2C_IsErrorOccurred+0xe0>
 8003254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0aa      	beq.n	80031b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800325c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2220      	movs	r2, #32
 800326a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800329c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	f043 0308 	orr.w	r3, r3, #8
 80032b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01c      	beq.n	800332a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff fde9 	bl	8002ec8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <I2C_IsErrorOccurred+0x1bc>)
 8003302:	400b      	ands	r3, r1
 8003304:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800332a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800332e:	4618      	mov	r0, r3
 8003330:	3728      	adds	r7, #40	; 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	fe00e800 	.word	0xfe00e800

0800333c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	4613      	mov	r3, r2
 800334c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003354:	7a7b      	ldrb	r3, [r7, #9]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800335c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	4313      	orrs	r3, r2
 8003366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800336a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	0d5b      	lsrs	r3, r3, #21
 8003376:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <I2C_TransferConfig+0x60>)
 800337c:	430b      	orrs	r3, r1
 800337e:	43db      	mvns	r3, r3
 8003380:	ea02 0103 	and.w	r1, r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	03ff63ff 	.word	0x03ff63ff

080033a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d138      	bne.n	8003428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e032      	b.n	800342a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b20      	cmp	r3, #32
 800344a:	d139      	bne.n	80034c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003456:	2302      	movs	r3, #2
 8003458:	e033      	b.n	80034c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2224      	movs	r2, #36	; 0x24
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d0:	b08f      	sub	sp, #60	; 0x3c
 80034d2:	af0a      	add	r7, sp, #40	; 0x28
 80034d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e116      	b.n	800370e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fe f892 	bl	8001624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2203      	movs	r2, #3
 8003504:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f003 f808 	bl	8006534 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	687e      	ldr	r6, [r7, #4]
 800352c:	466d      	mov	r5, sp
 800352e:	f106 0410 	add.w	r4, r6, #16
 8003532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800353a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800353e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003542:	1d33      	adds	r3, r6, #4
 8003544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003546:	6838      	ldr	r0, [r7, #0]
 8003548:	f002 ff9c 	bl	8006484 <USB_CoreInit>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0d7      	b.n	800370e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f002 fff6 	bl	8006556 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	e04a      	b.n	8003606 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	333d      	adds	r3, #61	; 0x3d
 8003580:	2201      	movs	r2, #1
 8003582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	333c      	adds	r3, #60	; 0x3c
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	b298      	uxth	r0, r3
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3344      	adds	r3, #68	; 0x44
 80035ac:	4602      	mov	r2, r0
 80035ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3340      	adds	r3, #64	; 0x40
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	3348      	adds	r3, #72	; 0x48
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	334c      	adds	r3, #76	; 0x4c
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3354      	adds	r3, #84	; 0x54
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	3301      	adds	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	d3af      	bcc.n	8003570 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	e044      	b.n	80036a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	3301      	adds	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d3b5      	bcc.n	8003616 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	687e      	ldr	r6, [r7, #4]
 80036b2:	466d      	mov	r5, sp
 80036b4:	f106 0410 	add.w	r4, r6, #16
 80036b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80036c8:	1d33      	adds	r3, r6, #4
 80036ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036cc:	6838      	ldr	r0, [r7, #0]
 80036ce:	f002 ff8f 	bl	80065f0 <USB_DevInit>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e014      	b.n	800370e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f80b 	bl	8003718 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f003 f94d 	bl	80069a6 <USB_DevDisconnect>

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003718 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_PCDEx_ActivateLPM+0x44>)
 8003748:	4313      	orrs	r3, r2
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	10000003 	.word	0x10000003

08003760 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800378e:	f7fe f8af 	bl	80018f0 <HAL_GetTick>
 8003792:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003794:	e009      	b.n	80037aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003796:	f7fe f8ab 	bl	80018f0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a4:	d901      	bls.n	80037aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e022      	b.n	80037f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b6:	d1ee      	bne.n	8003796 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80037be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c4:	f7fe f894 	bl	80018f0 <HAL_GetTick>
 80037c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037ca:	e009      	b.n	80037e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037cc:	f7fe f890 	bl	80018f0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037da:	d901      	bls.n	80037e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e007      	b.n	80037f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ec:	d1ee      	bne.n	80037cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40007000 	.word	0x40007000

08003800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e29b      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8087 	beq.w	8003932 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003824:	4b96      	ldr	r3, [pc, #600]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b04      	cmp	r3, #4
 800382e:	d00c      	beq.n	800384a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003830:	4b93      	ldr	r3, [pc, #588]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b08      	cmp	r3, #8
 800383a:	d112      	bne.n	8003862 <HAL_RCC_OscConfig+0x62>
 800383c:	4b90      	ldr	r3, [pc, #576]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003848:	d10b      	bne.n	8003862 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384a:	4b8d      	ldr	r3, [pc, #564]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d06c      	beq.n	8003930 <HAL_RCC_OscConfig+0x130>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d168      	bne.n	8003930 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e275      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386a:	d106      	bne.n	800387a <HAL_RCC_OscConfig+0x7a>
 800386c:	4b84      	ldr	r3, [pc, #528]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a83      	ldr	r2, [pc, #524]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	e02e      	b.n	80038d8 <HAL_RCC_OscConfig+0xd8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10c      	bne.n	800389c <HAL_RCC_OscConfig+0x9c>
 8003882:	4b7f      	ldr	r3, [pc, #508]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7e      	ldr	r2, [pc, #504]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4b7c      	ldr	r3, [pc, #496]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7b      	ldr	r2, [pc, #492]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e01d      	b.n	80038d8 <HAL_RCC_OscConfig+0xd8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCC_OscConfig+0xc0>
 80038a6:	4b76      	ldr	r3, [pc, #472]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a75      	ldr	r2, [pc, #468]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80038ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b73      	ldr	r3, [pc, #460]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a72      	ldr	r2, [pc, #456]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e00b      	b.n	80038d8 <HAL_RCC_OscConfig+0xd8>
 80038c0:	4b6f      	ldr	r3, [pc, #444]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a6e      	ldr	r2, [pc, #440]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b6c      	ldr	r3, [pc, #432]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6b      	ldr	r2, [pc, #428]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d013      	beq.n	8003908 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe f806 	bl	80018f0 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fe f802 	bl	80018f0 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e229      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0xe8>
 8003906:	e014      	b.n	8003932 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fd fff2 	bl	80018f0 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003910:	f7fd ffee 	bl	80018f0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	; 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e215      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	4b57      	ldr	r3, [pc, #348]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x110>
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d069      	beq.n	8003a12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800393e:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394a:	4b4d      	ldr	r3, [pc, #308]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b08      	cmp	r3, #8
 8003954:	d11c      	bne.n	8003990 <HAL_RCC_OscConfig+0x190>
 8003956:	4b4a      	ldr	r3, [pc, #296]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_RCC_OscConfig+0x17a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e1e9      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	493d      	ldr	r1, [pc, #244]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	e040      	b.n	8003a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d023      	beq.n	80039e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003998:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a38      	ldr	r2, [pc, #224]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fd ffa4 	bl	80018f0 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ac:	f7fd ffa0 	bl	80018f0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1c7      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039be:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b2d      	ldr	r3, [pc, #180]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4929      	ldr	r1, [pc, #164]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]
 80039de:	e018      	b.n	8003a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e0:	4b27      	ldr	r3, [pc, #156]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a26      	ldr	r2, [pc, #152]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fd ff80 	bl	80018f0 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f4:	f7fd ff7c 	bl	80018f0 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e1a3      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d038      	beq.n	8003a90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d019      	beq.n	8003a5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fd ff5d 	bl	80018f0 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fd ff59 	bl	80018f0 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e180      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x23a>
 8003a58:	e01a      	b.n	8003a90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fd ff43 	bl	80018f0 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fd ff3f 	bl	80018f0 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d903      	bls.n	8003a84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e166      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
 8003a80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	4b92      	ldr	r3, [pc, #584]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ee      	bne.n	8003a6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80a4 	beq.w	8003be6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b8c      	ldr	r3, [pc, #560]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	4b89      	ldr	r3, [pc, #548]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a88      	ldr	r2, [pc, #544]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b86      	ldr	r3, [pc, #536]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac6:	4b83      	ldr	r3, [pc, #524]	; (8003cd4 <HAL_RCC_OscConfig+0x4d4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d118      	bne.n	8003b04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ad2:	4b80      	ldr	r3, [pc, #512]	; (8003cd4 <HAL_RCC_OscConfig+0x4d4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7f      	ldr	r2, [pc, #508]	; (8003cd4 <HAL_RCC_OscConfig+0x4d4>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7fd ff07 	bl	80018f0 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fd ff03 	bl	80018f0 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	; 0x64
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e12a      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af8:	4b76      	ldr	r3, [pc, #472]	; (8003cd4 <HAL_RCC_OscConfig+0x4d4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x31a>
 8003b0c:	4b70      	ldr	r3, [pc, #448]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	4a6f      	ldr	r2, [pc, #444]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6713      	str	r3, [r2, #112]	; 0x70
 8003b18:	e02d      	b.n	8003b76 <HAL_RCC_OscConfig+0x376>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x33c>
 8003b22:	4b6b      	ldr	r3, [pc, #428]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a6a      	ldr	r2, [pc, #424]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b68      	ldr	r3, [pc, #416]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a67      	ldr	r2, [pc, #412]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3a:	e01c      	b.n	8003b76 <HAL_RCC_OscConfig+0x376>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCC_OscConfig+0x35e>
 8003b44:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a61      	ldr	r2, [pc, #388]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b4a:	f043 0304 	orr.w	r3, r3, #4
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b50:	4b5f      	ldr	r3, [pc, #380]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	4a5e      	ldr	r2, [pc, #376]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5c:	e00b      	b.n	8003b76 <HAL_RCC_OscConfig+0x376>
 8003b5e:	4b5c      	ldr	r3, [pc, #368]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a5b      	ldr	r2, [pc, #364]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6a:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	4a58      	ldr	r2, [pc, #352]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b70:	f023 0304 	bic.w	r3, r3, #4
 8003b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d015      	beq.n	8003baa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fd feb7 	bl	80018f0 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fd feb3 	bl	80018f0 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0d8      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	4b4c      	ldr	r3, [pc, #304]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ee      	beq.n	8003b86 <HAL_RCC_OscConfig+0x386>
 8003ba8:	e014      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fd fea1 	bl	80018f0 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fd fe9d 	bl	80018f0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0c2      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc8:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ee      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4a3c      	ldr	r2, [pc, #240]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80ae 	beq.w	8003d4c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf0:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d06d      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d14b      	bne.n	8003c9c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c04:	4b32      	ldr	r3, [pc, #200]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a31      	ldr	r2, [pc, #196]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fe6e 	bl	80018f0 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fd fe6a 	bl	80018f0 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e091      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2a:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	019b      	lsls	r3, r3, #6
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	071b      	lsls	r3, r3, #28
 8003c62:	491b      	ldr	r1, [pc, #108]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd fe3c 	bl	80018f0 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fd fe38 	bl	80018f0 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e05f      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x47c>
 8003c9a:	e057      	b.n	8003d4c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fe22 	bl	80018f0 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd fe1e 	bl	80018f0 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e045      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc2:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <HAL_RCC_OscConfig+0x4d0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4b0>
 8003cce:	e03d      	b.n	8003d4c <HAL_RCC_OscConfig+0x54c>
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cd8:	4b1f      	ldr	r3, [pc, #124]	; (8003d58 <HAL_RCC_OscConfig+0x558>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d030      	beq.n	8003d48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d129      	bne.n	8003d48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d122      	bne.n	8003d48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d08:	4013      	ands	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d119      	bne.n	8003d48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	3b01      	subs	r3, #1
 8003d22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d10f      	bne.n	8003d48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800

08003d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0d0      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d74:	4b6a      	ldr	r3, [pc, #424]	; (8003f20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d910      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b67      	ldr	r3, [pc, #412]	; (8003f20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 020f 	bic.w	r2, r3, #15
 8003d8a:	4965      	ldr	r1, [pc, #404]	; (8003f20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b63      	ldr	r3, [pc, #396]	; (8003f20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0b8      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dbc:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a58      	ldr	r2, [pc, #352]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd4:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a52      	ldr	r2, [pc, #328]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b50      	ldr	r3, [pc, #320]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	494d      	ldr	r1, [pc, #308]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d040      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d115      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e07f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e073      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2e:	4b3d      	ldr	r3, [pc, #244]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e06b      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e3e:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 0203 	bic.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4936      	ldr	r1, [pc, #216]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fd fd4e 	bl	80018f0 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fd fd4a 	bl	80018f0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e053      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 020c 	and.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d1eb      	bne.n	8003e58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e80:	4b27      	ldr	r3, [pc, #156]	; (8003f20 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d210      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 020f 	bic.w	r2, r3, #15
 8003e96:	4922      	ldr	r1, [pc, #136]	; (8003f20 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e032      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4916      	ldr	r1, [pc, #88]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	490e      	ldr	r1, [pc, #56]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eee:	f000 f821 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	490a      	ldr	r1, [pc, #40]	; (8003f28 <HAL_RCC_ClockConfig+0x1cc>)
 8003f00:	5ccb      	ldrb	r3, [r1, r3]
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <HAL_RCC_ClockConfig+0x1d0>)
 8003f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCC_ClockConfig+0x1d4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd fcaa 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023c00 	.word	0x40023c00
 8003f24:	40023800 	.word	0x40023800
 8003f28:	0800740c 	.word	0x0800740c
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	20000004 	.word	0x20000004

08003f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f38:	b094      	sub	sp, #80	; 0x50
 8003f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f40:	2300      	movs	r3, #0
 8003f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f44:	2300      	movs	r3, #0
 8003f46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f4c:	4b79      	ldr	r3, [pc, #484]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d00d      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x40>
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	f200 80e1 	bhi.w	8004120 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x34>
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f66:	e0db      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b73      	ldr	r3, [pc, #460]	; (8004138 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f6c:	e0db      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f6e:	4b73      	ldr	r3, [pc, #460]	; (800413c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f72:	e0d8      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f74:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f7c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f7e:	4b6d      	ldr	r3, [pc, #436]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d063      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b6a      	ldr	r3, [pc, #424]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	2200      	movs	r2, #0
 8003f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	0159      	lsls	r1, r3, #5
 8003fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb8:	0150      	lsls	r0, r2, #5
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	1a51      	subs	r1, r2, r1
 8003fc2:	6139      	str	r1, [r7, #16]
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	018b      	lsls	r3, r1, #6
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	018a      	lsls	r2, r1, #6
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fec:	4659      	mov	r1, fp
 8003fee:	eb63 0901 	sbc.w	r9, r3, r1
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004006:	4690      	mov	r8, r2
 8004008:	4699      	mov	r9, r3
 800400a:	4623      	mov	r3, r4
 800400c:	eb18 0303 	adds.w	r3, r8, r3
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	462b      	mov	r3, r5
 8004014:	eb49 0303 	adc.w	r3, r9, r3
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004026:	4629      	mov	r1, r5
 8004028:	024b      	lsls	r3, r1, #9
 800402a:	4621      	mov	r1, r4
 800402c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004030:	4621      	mov	r1, r4
 8004032:	024a      	lsls	r2, r1, #9
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403a:	2200      	movs	r2, #0
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
 800403e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004044:	f7fc f94c 	bl	80002e0 <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004050:	e058      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004052:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	2200      	movs	r2, #0
 800405a:	4618      	mov	r0, r3
 800405c:	4611      	mov	r1, r2
 800405e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	2300      	movs	r3, #0
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
 8004068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	f04f 0000 	mov.w	r0, #0
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	0159      	lsls	r1, r3, #5
 800407a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407e:	0150      	lsls	r0, r2, #5
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4641      	mov	r1, r8
 8004086:	ebb2 0a01 	subs.w	sl, r2, r1
 800408a:	4649      	mov	r1, r9
 800408c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800409c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040a4:	ebb2 040a 	subs.w	r4, r2, sl
 80040a8:	eb63 050b 	sbc.w	r5, r3, fp
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	00eb      	lsls	r3, r5, #3
 80040b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ba:	00e2      	lsls	r2, r4, #3
 80040bc:	4614      	mov	r4, r2
 80040be:	461d      	mov	r5, r3
 80040c0:	4643      	mov	r3, r8
 80040c2:	18e3      	adds	r3, r4, r3
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	464b      	mov	r3, r9
 80040c8:	eb45 0303 	adc.w	r3, r5, r3
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040da:	4629      	mov	r1, r5
 80040dc:	028b      	lsls	r3, r1, #10
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e4:	4621      	mov	r1, r4
 80040e6:	028a      	lsls	r2, r1, #10
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ee:	2200      	movs	r2, #0
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	61fa      	str	r2, [r7, #28]
 80040f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f8:	f7fc f8f2 	bl	80002e0 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	3301      	adds	r3, #1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCC_GetSysClockFreq+0x204>)
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004128:	4618      	mov	r0, r3
 800412a:	3750      	adds	r7, #80	; 0x50
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200

08004140 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_RCC_GetHCLKFreq+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000000 	.word	0x20000000

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff fff0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40023800 	.word	0x40023800
 800417c:	0800741c 	.word	0x0800741c

08004180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004184:	f7ff ffdc 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004188:	4602      	mov	r2, r0
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0b5b      	lsrs	r3, r3, #13
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	4903      	ldr	r1, [pc, #12]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023800 	.word	0x40023800
 80041a4:	0800741c 	.word	0x0800741c

080041a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d012      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041d0:	4b69      	ldr	r3, [pc, #420]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a68      	ldr	r2, [pc, #416]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041da:	6093      	str	r3, [r2, #8]
 80041dc:	4b66      	ldr	r3, [pc, #408]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e4:	4964      	ldr	r1, [pc, #400]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d017      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004202:	4b5d      	ldr	r3, [pc, #372]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	4959      	ldr	r1, [pc, #356]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004220:	d101      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004222:	2301      	movs	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800422e:	2301      	movs	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d017      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800423e:	4b4e      	ldr	r3, [pc, #312]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004244:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	494a      	ldr	r1, [pc, #296]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425c:	d101      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800426a:	2301      	movs	r3, #1
 800426c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 808b 	beq.w	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800428c:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	4a39      	ldr	r2, [pc, #228]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	6413      	str	r3, [r2, #64]	; 0x40
 8004298:	4b37      	ldr	r3, [pc, #220]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042a4:	4b35      	ldr	r3, [pc, #212]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a34      	ldr	r2, [pc, #208]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b0:	f7fd fb1e 	bl	80018f0 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b8:	f7fd fb1a 	bl	80018f0 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	; 0x64
 80042c4:	d901      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e38f      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042ca:	4b2c      	ldr	r3, [pc, #176]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042d6:	4b28      	ldr	r3, [pc, #160]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d035      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d02e      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042fe:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a1d      	ldr	r2, [pc, #116]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800430a:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004316:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d114      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd fae2 	bl	80018f0 <HAL_GetTick>
 800432c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432e:	e00a      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fd fade 	bl	80018f0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e351      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0ee      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435e:	d111      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800436e:	400b      	ands	r3, r1
 8004370:	4901      	ldr	r1, [pc, #4]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
 8004376:	e00b      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004378:	40023800 	.word	0x40023800
 800437c:	40007000 	.word	0x40007000
 8004380:	0ffffcff 	.word	0x0ffffcff
 8004384:	4bac      	ldr	r3, [pc, #688]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4aab      	ldr	r2, [pc, #684]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800438e:	6093      	str	r3, [r2, #8]
 8004390:	4ba9      	ldr	r3, [pc, #676]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439c:	49a6      	ldr	r1, [pc, #664]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043ae:	4ba2      	ldr	r3, [pc, #648]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b4:	4aa0      	ldr	r2, [pc, #640]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043be:	4b9e      	ldr	r3, [pc, #632]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	499b      	ldr	r1, [pc, #620]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043dc:	4b96      	ldr	r3, [pc, #600]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ea:	4993      	ldr	r1, [pc, #588]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043fe:	4b8e      	ldr	r3, [pc, #568]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800440c:	498a      	ldr	r1, [pc, #552]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004420:	4b85      	ldr	r3, [pc, #532]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442e:	4982      	ldr	r1, [pc, #520]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004442:	4b7d      	ldr	r3, [pc, #500]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	4979      	ldr	r1, [pc, #484]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004464:	4b74      	ldr	r3, [pc, #464]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	4971      	ldr	r1, [pc, #452]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004486:	4b6c      	ldr	r3, [pc, #432]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f023 020c 	bic.w	r2, r3, #12
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004494:	4968      	ldr	r1, [pc, #416]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044a8:	4b63      	ldr	r3, [pc, #396]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	4960      	ldr	r1, [pc, #384]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044ca:	4b5b      	ldr	r3, [pc, #364]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d8:	4957      	ldr	r1, [pc, #348]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044ec:	4b52      	ldr	r3, [pc, #328]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	494f      	ldr	r1, [pc, #316]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800450e:	4b4a      	ldr	r3, [pc, #296]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	4946      	ldr	r1, [pc, #280]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004530:	4b41      	ldr	r3, [pc, #260]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	493e      	ldr	r1, [pc, #248]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004552:	4b39      	ldr	r3, [pc, #228]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004560:	4935      	ldr	r1, [pc, #212]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004574:	4b30      	ldr	r3, [pc, #192]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004582:	492d      	ldr	r1, [pc, #180]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d011      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004596:	4b28      	ldr	r3, [pc, #160]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a4:	4924      	ldr	r1, [pc, #144]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b4:	d101      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045d6:	4b18      	ldr	r3, [pc, #96]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e4:	4914      	ldr	r1, [pc, #80]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045f8:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004608:	490b      	ldr	r1, [pc, #44]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00f      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462c:	4902      	ldr	r1, [pc, #8]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004634:	e002      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004648:	4b8a      	ldr	r3, [pc, #552]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	4986      	ldr	r1, [pc, #536]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800466c:	4b81      	ldr	r3, [pc, #516]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004672:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467c:	497d      	ldr	r1, [pc, #500]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d006      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80d6 	beq.w	8004844 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004698:	4b76      	ldr	r3, [pc, #472]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a75      	ldr	r2, [pc, #468]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a4:	f7fd f924 	bl	80018f0 <HAL_GetTick>
 80046a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046ac:	f7fd f920 	bl	80018f0 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e195      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046be:	4b6d      	ldr	r3, [pc, #436]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d021      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11d      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046de:	4b65      	ldr	r3, [pc, #404]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046ec:	4b61      	ldr	r3, [pc, #388]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f2:	0e1b      	lsrs	r3, r3, #24
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	019a      	lsls	r2, r3, #6
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	431a      	orrs	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	071b      	lsls	r3, r3, #28
 8004712:	4958      	ldr	r1, [pc, #352]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004738:	2b00      	cmp	r3, #0
 800473a:	d02e      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004744:	d129      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004746:	4b4b      	ldr	r3, [pc, #300]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004754:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475a:	0f1b      	lsrs	r3, r3, #28
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	019a      	lsls	r2, r3, #6
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	061b      	lsls	r3, r3, #24
 8004774:	431a      	orrs	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	071b      	lsls	r3, r3, #28
 800477a:	493e      	ldr	r1, [pc, #248]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004782:	4b3c      	ldr	r3, [pc, #240]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004788:	f023 021f 	bic.w	r2, r3, #31
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	3b01      	subs	r3, #1
 8004792:	4938      	ldr	r1, [pc, #224]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01d      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047a6:	4b33      	ldr	r3, [pc, #204]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ac:	0e1b      	lsrs	r3, r3, #24
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b4:	4b2f      	ldr	r3, [pc, #188]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ba:	0f1b      	lsrs	r3, r3, #28
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	019a      	lsls	r2, r3, #6
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	431a      	orrs	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	071b      	lsls	r3, r3, #28
 80047da:	4926      	ldr	r1, [pc, #152]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d011      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	019a      	lsls	r2, r3, #6
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	041b      	lsls	r3, r3, #16
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	071b      	lsls	r3, r3, #28
 800480a:	491a      	ldr	r1, [pc, #104]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004812:	4b18      	ldr	r3, [pc, #96]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a17      	ldr	r2, [pc, #92]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800481c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481e:	f7fd f867 	bl	80018f0 <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004826:	f7fd f863 	bl	80018f0 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b64      	cmp	r3, #100	; 0x64
 8004832:	d901      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e0d8      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004838:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b01      	cmp	r3, #1
 8004848:	f040 80ce 	bne.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a08      	ldr	r2, [pc, #32]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004858:	f7fd f84a 	bl	80018f0 <HAL_GetTick>
 800485c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800485e:	e00b      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004860:	f7fd f846 	bl	80018f0 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d904      	bls.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0bb      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004878:	4b5e      	ldr	r3, [pc, #376]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004884:	d0ec      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d02e      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d12a      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048ae:	4b51      	ldr	r3, [pc, #324]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	0c1b      	lsrs	r3, r3, #16
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048bc:	4b4d      	ldr	r3, [pc, #308]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	0f1b      	lsrs	r3, r3, #28
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	019a      	lsls	r2, r3, #6
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	041b      	lsls	r3, r3, #16
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	061b      	lsls	r3, r3, #24
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	071b      	lsls	r3, r3, #28
 80048e2:	4944      	ldr	r1, [pc, #272]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048ea:	4b42      	ldr	r3, [pc, #264]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	3b01      	subs	r3, #1
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	493d      	ldr	r1, [pc, #244]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d022      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004918:	d11d      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800491a:	4b36      	ldr	r3, [pc, #216]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	0e1b      	lsrs	r3, r3, #24
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004928:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	0f1b      	lsrs	r3, r3, #28
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	019a      	lsls	r2, r3, #6
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	041b      	lsls	r3, r3, #16
 8004942:	431a      	orrs	r2, r3
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	061b      	lsls	r3, r3, #24
 8004948:	431a      	orrs	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	071b      	lsls	r3, r3, #28
 800494e:	4929      	ldr	r1, [pc, #164]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d028      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004962:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	0e1b      	lsrs	r3, r3, #24
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004970:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	0c1b      	lsrs	r3, r3, #16
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	019a      	lsls	r2, r3, #6
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	431a      	orrs	r2, r3
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	061b      	lsls	r3, r3, #24
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	071b      	lsls	r3, r3, #28
 8004996:	4917      	ldr	r1, [pc, #92]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800499e:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4911      	ldr	r1, [pc, #68]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fc ff96 	bl	80018f0 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049c8:	f7fc ff92 	bl	80018f0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	; 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e007      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e6:	d1ef      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023800 	.word	0x40023800

080049f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e049      	b.n	8004a9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc fc8c 	bl	800133c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f000 fb6e 	bl	8005118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e049      	b.n	8004b4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f841 	bl	8004b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f000 fb17 	bl	8005118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_TIM_PWM_Start+0x24>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e03c      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d109      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x3e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e02f      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d109      	bne.n	8004bc0 <HAL_TIM_PWM_Start+0x58>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e022      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b0c      	cmp	r3, #12
 8004bc4:	d109      	bne.n	8004bda <HAL_TIM_PWM_Start+0x72>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e015      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d109      	bne.n	8004bf4 <HAL_TIM_PWM_Start+0x8c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	e008      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e092      	b.n	8004d34 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0xb6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1c:	e023      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Start+0xc6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2c:	e01b      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_PWM_Start+0xd6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3c:	e013      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b0c      	cmp	r3, #12
 8004c42:	d104      	bne.n	8004c4e <HAL_TIM_PWM_Start+0xe6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c4c:	e00b      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d104      	bne.n	8004c5e <HAL_TIM_PWM_Start+0xf6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c5c:	e003      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	6839      	ldr	r1, [r7, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fdea 	bl	8005848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a30      	ldr	r2, [pc, #192]	; (8004d3c <HAL_TIM_PWM_Start+0x1d4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x120>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a2f      	ldr	r2, [pc, #188]	; (8004d40 <HAL_TIM_PWM_Start+0x1d8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <HAL_TIM_PWM_Start+0x124>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <HAL_TIM_PWM_Start+0x126>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <HAL_TIM_PWM_Start+0x1d4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d022      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x18a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb4:	d01d      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x18a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <HAL_TIM_PWM_Start+0x1dc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x18a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a20      	ldr	r2, [pc, #128]	; (8004d48 <HAL_TIM_PWM_Start+0x1e0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x18a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <HAL_TIM_PWM_Start+0x1e4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x18a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_TIM_PWM_Start+0x1d8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x18a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <HAL_TIM_PWM_Start+0x1e8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x18a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_TIM_PWM_Start+0x1ec>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d115      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <HAL_TIM_PWM_Start+0x1f0>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d015      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x1c8>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0a:	d011      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1c:	e008      	b.n	8004d30 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e000      	b.n	8004d32 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40010400 	.word	0x40010400
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40001800 	.word	0x40001800
 8004d58:	00010007 	.word	0x00010007

08004d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e0ff      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b14      	cmp	r3, #20
 8004d86:	f200 80f0 	bhi.w	8004f6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004f6b 	.word	0x08004f6b
 8004d98:	08004f6b 	.word	0x08004f6b
 8004d9c:	08004f6b 	.word	0x08004f6b
 8004da0:	08004e25 	.word	0x08004e25
 8004da4:	08004f6b 	.word	0x08004f6b
 8004da8:	08004f6b 	.word	0x08004f6b
 8004dac:	08004f6b 	.word	0x08004f6b
 8004db0:	08004e67 	.word	0x08004e67
 8004db4:	08004f6b 	.word	0x08004f6b
 8004db8:	08004f6b 	.word	0x08004f6b
 8004dbc:	08004f6b 	.word	0x08004f6b
 8004dc0:	08004ea7 	.word	0x08004ea7
 8004dc4:	08004f6b 	.word	0x08004f6b
 8004dc8:	08004f6b 	.word	0x08004f6b
 8004dcc:	08004f6b 	.word	0x08004f6b
 8004dd0:	08004ee9 	.word	0x08004ee9
 8004dd4:	08004f6b 	.word	0x08004f6b
 8004dd8:	08004f6b 	.word	0x08004f6b
 8004ddc:	08004f6b 	.word	0x08004f6b
 8004de0:	08004f29 	.word	0x08004f29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa34 	bl	8005258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0208 	orr.w	r2, r2, #8
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0204 	bic.w	r2, r2, #4
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	619a      	str	r2, [r3, #24]
      break;
 8004e22:	e0a5      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fa86 	bl	800533c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6999      	ldr	r1, [r3, #24]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	021a      	lsls	r2, r3, #8
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	619a      	str	r2, [r3, #24]
      break;
 8004e64:	e084      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fadd 	bl	800542c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0208 	orr.w	r2, r2, #8
 8004e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0204 	bic.w	r2, r2, #4
 8004e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	61da      	str	r2, [r3, #28]
      break;
 8004ea4:	e064      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fb33 	bl	8005518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69d9      	ldr	r1, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	021a      	lsls	r2, r3, #8
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	61da      	str	r2, [r3, #28]
      break;
 8004ee6:	e043      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fb6a 	bl	80055c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0208 	orr.w	r2, r2, #8
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0204 	bic.w	r2, r2, #4
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f26:	e023      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fb9c 	bl	800566c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	021a      	lsls	r2, r3, #8
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f68:	e002      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop

08004f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e0b4      	b.n	800510a <HAL_TIM_ConfigClockSource+0x186>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	4b56      	ldr	r3, [pc, #344]	; (8005114 <HAL_TIM_ConfigClockSource+0x190>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd8:	d03e      	beq.n	8005058 <HAL_TIM_ConfigClockSource+0xd4>
 8004fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fde:	f200 8087 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe6:	f000 8086 	beq.w	80050f6 <HAL_TIM_ConfigClockSource+0x172>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	d87f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b70      	cmp	r3, #112	; 0x70
 8004ff2:	d01a      	beq.n	800502a <HAL_TIM_ConfigClockSource+0xa6>
 8004ff4:	2b70      	cmp	r3, #112	; 0x70
 8004ff6:	d87b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b60      	cmp	r3, #96	; 0x60
 8004ffa:	d050      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x11a>
 8004ffc:	2b60      	cmp	r3, #96	; 0x60
 8004ffe:	d877      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b50      	cmp	r3, #80	; 0x50
 8005002:	d03c      	beq.n	800507e <HAL_TIM_ConfigClockSource+0xfa>
 8005004:	2b50      	cmp	r3, #80	; 0x50
 8005006:	d873      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d058      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x13a>
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d86f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b30      	cmp	r3, #48	; 0x30
 8005012:	d064      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 8005014:	2b30      	cmp	r3, #48	; 0x30
 8005016:	d86b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d060      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 800501c:	2b20      	cmp	r3, #32
 800501e:	d867      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d05c      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 8005024:	2b10      	cmp	r3, #16
 8005026:	d05a      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 8005028:	e062      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6899      	ldr	r1, [r3, #8]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f000 fbe5 	bl	8005808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800504c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	609a      	str	r2, [r3, #8]
      break;
 8005056:	e04f      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	6899      	ldr	r1, [r3, #8]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f000 fbce 	bl	8005808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800507a:	609a      	str	r2, [r3, #8]
      break;
 800507c:	e03c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	461a      	mov	r2, r3
 800508c:	f000 fb42 	bl	8005714 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2150      	movs	r1, #80	; 0x50
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fb9b 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 800509c:	e02c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fb61 	bl	8005772 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2160      	movs	r1, #96	; 0x60
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fb8b 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 80050bc:	e01c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 fb22 	bl	8005714 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2140      	movs	r1, #64	; 0x40
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fb7b 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 80050dc:	e00c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f000 fb72 	bl	80057d2 <TIM_ITRx_SetConfig>
      break;
 80050ee:	e003      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      break;
 80050f4:	e000      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	fffeff88 	.word	0xfffeff88

08005118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a40      	ldr	r2, [pc, #256]	; (800522c <TIM_Base_SetConfig+0x114>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d013      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005136:	d00f      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a3d      	ldr	r2, [pc, #244]	; (8005230 <TIM_Base_SetConfig+0x118>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00b      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a3c      	ldr	r2, [pc, #240]	; (8005234 <TIM_Base_SetConfig+0x11c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a3b      	ldr	r2, [pc, #236]	; (8005238 <TIM_Base_SetConfig+0x120>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a3a      	ldr	r2, [pc, #232]	; (800523c <TIM_Base_SetConfig+0x124>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2f      	ldr	r2, [pc, #188]	; (800522c <TIM_Base_SetConfig+0x114>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02b      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005178:	d027      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2c      	ldr	r2, [pc, #176]	; (8005230 <TIM_Base_SetConfig+0x118>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d023      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2b      	ldr	r2, [pc, #172]	; (8005234 <TIM_Base_SetConfig+0x11c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d01f      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2a      	ldr	r2, [pc, #168]	; (8005238 <TIM_Base_SetConfig+0x120>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01b      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a29      	ldr	r2, [pc, #164]	; (800523c <TIM_Base_SetConfig+0x124>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d017      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a28      	ldr	r2, [pc, #160]	; (8005240 <TIM_Base_SetConfig+0x128>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a27      	ldr	r2, [pc, #156]	; (8005244 <TIM_Base_SetConfig+0x12c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00f      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a26      	ldr	r2, [pc, #152]	; (8005248 <TIM_Base_SetConfig+0x130>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00b      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a25      	ldr	r2, [pc, #148]	; (800524c <TIM_Base_SetConfig+0x134>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a24      	ldr	r2, [pc, #144]	; (8005250 <TIM_Base_SetConfig+0x138>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a23      	ldr	r2, [pc, #140]	; (8005254 <TIM_Base_SetConfig+0x13c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d108      	bne.n	80051dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <TIM_Base_SetConfig+0x114>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0xf8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a0c      	ldr	r2, [pc, #48]	; (800523c <TIM_Base_SetConfig+0x124>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d103      	bne.n	8005218 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	615a      	str	r2, [r3, #20]
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800
 8005238:	40000c00 	.word	0x40000c00
 800523c:	40010400 	.word	0x40010400
 8005240:	40014000 	.word	0x40014000
 8005244:	40014400 	.word	0x40014400
 8005248:	40014800 	.word	0x40014800
 800524c:	40001800 	.word	0x40001800
 8005250:	40001c00 	.word	0x40001c00
 8005254:	40002000 	.word	0x40002000

08005258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4b2b      	ldr	r3, [pc, #172]	; (8005330 <TIM_OC1_SetConfig+0xd8>)
 8005284:	4013      	ands	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0302 	bic.w	r3, r3, #2
 80052a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a21      	ldr	r2, [pc, #132]	; (8005334 <TIM_OC1_SetConfig+0xdc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_OC1_SetConfig+0x64>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a20      	ldr	r2, [pc, #128]	; (8005338 <TIM_OC1_SetConfig+0xe0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0308 	bic.w	r3, r3, #8
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a16      	ldr	r2, [pc, #88]	; (8005334 <TIM_OC1_SetConfig+0xdc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_OC1_SetConfig+0x8e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a15      	ldr	r2, [pc, #84]	; (8005338 <TIM_OC1_SetConfig+0xe0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d111      	bne.n	800530a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	fffeff8f 	.word	0xfffeff8f
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400

0800533c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f023 0210 	bic.w	r2, r3, #16
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4b2e      	ldr	r3, [pc, #184]	; (8005420 <TIM_OC2_SetConfig+0xe4>)
 8005368:	4013      	ands	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0320 	bic.w	r3, r3, #32
 8005386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a23      	ldr	r2, [pc, #140]	; (8005424 <TIM_OC2_SetConfig+0xe8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC2_SetConfig+0x68>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a22      	ldr	r2, [pc, #136]	; (8005428 <TIM_OC2_SetConfig+0xec>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10d      	bne.n	80053c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <TIM_OC2_SetConfig+0xe8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC2_SetConfig+0x94>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <TIM_OC2_SetConfig+0xec>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d113      	bne.n	80053f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	feff8fff 	.word	0xfeff8fff
 8005424:	40010000 	.word	0x40010000
 8005428:	40010400 	.word	0x40010400

0800542c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4b2d      	ldr	r3, [pc, #180]	; (800550c <TIM_OC3_SetConfig+0xe0>)
 8005458:	4013      	ands	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a22      	ldr	r2, [pc, #136]	; (8005510 <TIM_OC3_SetConfig+0xe4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_OC3_SetConfig+0x66>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a21      	ldr	r2, [pc, #132]	; (8005514 <TIM_OC3_SetConfig+0xe8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d10d      	bne.n	80054ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC3_SetConfig+0xe4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_OC3_SetConfig+0x92>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC3_SetConfig+0xe8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d113      	bne.n	80054e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	621a      	str	r2, [r3, #32]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	fffeff8f 	.word	0xfffeff8f
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400

08005518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <TIM_OC4_SetConfig+0xa4>)
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <TIM_OC4_SetConfig+0xa8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_OC4_SetConfig+0x68>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a12      	ldr	r2, [pc, #72]	; (80055c4 <TIM_OC4_SetConfig+0xac>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d109      	bne.n	8005594 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	019b      	lsls	r3, r3, #6
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	feff8fff 	.word	0xfeff8fff
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40010400 	.word	0x40010400

080055c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <TIM_OC5_SetConfig+0x98>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005608:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a12      	ldr	r2, [pc, #72]	; (8005664 <TIM_OC5_SetConfig+0x9c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_OC5_SetConfig+0x5e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a11      	ldr	r2, [pc, #68]	; (8005668 <TIM_OC5_SetConfig+0xa0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d109      	bne.n	800563a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800562c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	621a      	str	r2, [r3, #32]
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	fffeff8f 	.word	0xfffeff8f
 8005664:	40010000 	.word	0x40010000
 8005668:	40010400 	.word	0x40010400

0800566c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <TIM_OC6_SetConfig+0x9c>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	051b      	lsls	r3, r3, #20
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a13      	ldr	r2, [pc, #76]	; (800570c <TIM_OC6_SetConfig+0xa0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC6_SetConfig+0x60>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a12      	ldr	r2, [pc, #72]	; (8005710 <TIM_OC6_SetConfig+0xa4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	029b      	lsls	r3, r3, #10
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	feff8fff 	.word	0xfeff8fff
 800570c:	40010000 	.word	0x40010000
 8005710:	40010400 	.word	0x40010400

08005714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 030a 	bic.w	r3, r3, #10
 8005750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	621a      	str	r2, [r3, #32]
}
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005772:	b480      	push	{r7}
 8005774:	b087      	sub	sp, #28
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f023 0210 	bic.w	r2, r3, #16
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800579c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f043 0307 	orr.w	r3, r3, #7
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	431a      	orrs	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	bf00      	nop
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2201      	movs	r2, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	43db      	mvns	r3, r3
 800586a:	401a      	ands	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1a      	ldr	r2, [r3, #32]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	fa01 f303 	lsl.w	r3, r1, r3
 8005880:	431a      	orrs	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e06d      	b.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a30      	ldr	r2, [pc, #192]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2f      	ldr	r2, [pc, #188]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a20      	ldr	r2, [pc, #128]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d022      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591e:	d01d      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1d      	ldr	r2, [pc, #116]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d018      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1a      	ldr	r2, [pc, #104]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00e      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a15      	ldr	r2, [pc, #84]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d009      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a16      	ldr	r2, [pc, #88]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a15      	ldr	r2, [pc, #84]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d10c      	bne.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40010000 	.word	0x40010000
 8005998:	40010400 	.word	0x40010400
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40001800 	.word	0x40001800

080059b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e065      	b.n	8005a98 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	041b      	lsls	r3, r3, #16
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a16      	ldr	r2, [pc, #88]	; (8005aa4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d115      	bne.n	8005a86 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	051b      	lsls	r3, r3, #20
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40010400 	.word	0x40010400

08005aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e040      	b.n	8005b40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fb fd02 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2224      	movs	r2, #36	; 0x24
 8005ad8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f8b0 	bl	8005c50 <UART_SetConfig>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e022      	b.n	8005b40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fb08 	bl	8006118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fb8f 	bl	800625c <UART_CheckIdleState>
 8005b3e:	4603      	mov	r3, r0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d171      	bne.n	8005c44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_UART_Transmit+0x24>
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e06a      	b.n	8005c46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2221      	movs	r2, #33	; 0x21
 8005b7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b7e:	f7fb feb7 	bl	80018f0 <HAL_GetTick>
 8005b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9c:	d108      	bne.n	8005bb0 <HAL_UART_Transmit+0x68>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e003      	b.n	8005bb8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bb8:	e02c      	b.n	8005c14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fb96 	bl	80062f6 <UART_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e038      	b.n	8005c46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	3302      	adds	r3, #2
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	e007      	b.n	8005c02 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	781a      	ldrb	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1cc      	bne.n	8005bba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2200      	movs	r2, #0
 8005c28:	2140      	movs	r1, #64	; 0x40
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fb63 	bl	80062f6 <UART_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e005      	b.n	8005c46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e000      	b.n	8005c46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4ba6      	ldr	r3, [pc, #664]	; (8005f14 <UART_SetConfig+0x2c4>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	6979      	ldr	r1, [r7, #20]
 8005c84:	430b      	orrs	r3, r1
 8005c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a94      	ldr	r2, [pc, #592]	; (8005f18 <UART_SetConfig+0x2c8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d120      	bne.n	8005d0e <UART_SetConfig+0xbe>
 8005ccc:	4b93      	ldr	r3, [pc, #588]	; (8005f1c <UART_SetConfig+0x2cc>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d816      	bhi.n	8005d08 <UART_SetConfig+0xb8>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x90>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cf1 	.word	0x08005cf1
 8005ce4:	08005cfd 	.word	0x08005cfd
 8005ce8:	08005cf7 	.word	0x08005cf7
 8005cec:	08005d03 	.word	0x08005d03
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e150      	b.n	8005f98 <UART_SetConfig+0x348>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e14d      	b.n	8005f98 <UART_SetConfig+0x348>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e14a      	b.n	8005f98 <UART_SetConfig+0x348>
 8005d02:	2308      	movs	r3, #8
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e147      	b.n	8005f98 <UART_SetConfig+0x348>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e144      	b.n	8005f98 <UART_SetConfig+0x348>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a83      	ldr	r2, [pc, #524]	; (8005f20 <UART_SetConfig+0x2d0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d132      	bne.n	8005d7e <UART_SetConfig+0x12e>
 8005d18:	4b80      	ldr	r3, [pc, #512]	; (8005f1c <UART_SetConfig+0x2cc>)
 8005d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1e:	f003 030c 	and.w	r3, r3, #12
 8005d22:	2b0c      	cmp	r3, #12
 8005d24:	d828      	bhi.n	8005d78 <UART_SetConfig+0x128>
 8005d26:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <UART_SetConfig+0xdc>)
 8005d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2c:	08005d61 	.word	0x08005d61
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005d79 	.word	0x08005d79
 8005d38:	08005d79 	.word	0x08005d79
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005d79 	.word	0x08005d79
 8005d44:	08005d79 	.word	0x08005d79
 8005d48:	08005d79 	.word	0x08005d79
 8005d4c:	08005d67 	.word	0x08005d67
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d79 	.word	0x08005d79
 8005d5c:	08005d73 	.word	0x08005d73
 8005d60:	2300      	movs	r3, #0
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e118      	b.n	8005f98 <UART_SetConfig+0x348>
 8005d66:	2302      	movs	r3, #2
 8005d68:	77fb      	strb	r3, [r7, #31]
 8005d6a:	e115      	b.n	8005f98 <UART_SetConfig+0x348>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e112      	b.n	8005f98 <UART_SetConfig+0x348>
 8005d72:	2308      	movs	r3, #8
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e10f      	b.n	8005f98 <UART_SetConfig+0x348>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e10c      	b.n	8005f98 <UART_SetConfig+0x348>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a68      	ldr	r2, [pc, #416]	; (8005f24 <UART_SetConfig+0x2d4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d120      	bne.n	8005dca <UART_SetConfig+0x17a>
 8005d88:	4b64      	ldr	r3, [pc, #400]	; (8005f1c <UART_SetConfig+0x2cc>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d92:	2b30      	cmp	r3, #48	; 0x30
 8005d94:	d013      	beq.n	8005dbe <UART_SetConfig+0x16e>
 8005d96:	2b30      	cmp	r3, #48	; 0x30
 8005d98:	d814      	bhi.n	8005dc4 <UART_SetConfig+0x174>
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	d009      	beq.n	8005db2 <UART_SetConfig+0x162>
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d810      	bhi.n	8005dc4 <UART_SetConfig+0x174>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <UART_SetConfig+0x15c>
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d006      	beq.n	8005db8 <UART_SetConfig+0x168>
 8005daa:	e00b      	b.n	8005dc4 <UART_SetConfig+0x174>
 8005dac:	2300      	movs	r3, #0
 8005dae:	77fb      	strb	r3, [r7, #31]
 8005db0:	e0f2      	b.n	8005f98 <UART_SetConfig+0x348>
 8005db2:	2302      	movs	r3, #2
 8005db4:	77fb      	strb	r3, [r7, #31]
 8005db6:	e0ef      	b.n	8005f98 <UART_SetConfig+0x348>
 8005db8:	2304      	movs	r3, #4
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e0ec      	b.n	8005f98 <UART_SetConfig+0x348>
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e0e9      	b.n	8005f98 <UART_SetConfig+0x348>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e0e6      	b.n	8005f98 <UART_SetConfig+0x348>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a56      	ldr	r2, [pc, #344]	; (8005f28 <UART_SetConfig+0x2d8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d120      	bne.n	8005e16 <UART_SetConfig+0x1c6>
 8005dd4:	4b51      	ldr	r3, [pc, #324]	; (8005f1c <UART_SetConfig+0x2cc>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dde:	2bc0      	cmp	r3, #192	; 0xc0
 8005de0:	d013      	beq.n	8005e0a <UART_SetConfig+0x1ba>
 8005de2:	2bc0      	cmp	r3, #192	; 0xc0
 8005de4:	d814      	bhi.n	8005e10 <UART_SetConfig+0x1c0>
 8005de6:	2b80      	cmp	r3, #128	; 0x80
 8005de8:	d009      	beq.n	8005dfe <UART_SetConfig+0x1ae>
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d810      	bhi.n	8005e10 <UART_SetConfig+0x1c0>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <UART_SetConfig+0x1a8>
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	d006      	beq.n	8005e04 <UART_SetConfig+0x1b4>
 8005df6:	e00b      	b.n	8005e10 <UART_SetConfig+0x1c0>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e0cc      	b.n	8005f98 <UART_SetConfig+0x348>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e0c9      	b.n	8005f98 <UART_SetConfig+0x348>
 8005e04:	2304      	movs	r3, #4
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e0c6      	b.n	8005f98 <UART_SetConfig+0x348>
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e0c3      	b.n	8005f98 <UART_SetConfig+0x348>
 8005e10:	2310      	movs	r3, #16
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e0c0      	b.n	8005f98 <UART_SetConfig+0x348>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a44      	ldr	r2, [pc, #272]	; (8005f2c <UART_SetConfig+0x2dc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d125      	bne.n	8005e6c <UART_SetConfig+0x21c>
 8005e20:	4b3e      	ldr	r3, [pc, #248]	; (8005f1c <UART_SetConfig+0x2cc>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e2e:	d017      	beq.n	8005e60 <UART_SetConfig+0x210>
 8005e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e34:	d817      	bhi.n	8005e66 <UART_SetConfig+0x216>
 8005e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3a:	d00b      	beq.n	8005e54 <UART_SetConfig+0x204>
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e40:	d811      	bhi.n	8005e66 <UART_SetConfig+0x216>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <UART_SetConfig+0x1fe>
 8005e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4a:	d006      	beq.n	8005e5a <UART_SetConfig+0x20a>
 8005e4c:	e00b      	b.n	8005e66 <UART_SetConfig+0x216>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	77fb      	strb	r3, [r7, #31]
 8005e52:	e0a1      	b.n	8005f98 <UART_SetConfig+0x348>
 8005e54:	2302      	movs	r3, #2
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	e09e      	b.n	8005f98 <UART_SetConfig+0x348>
 8005e5a:	2304      	movs	r3, #4
 8005e5c:	77fb      	strb	r3, [r7, #31]
 8005e5e:	e09b      	b.n	8005f98 <UART_SetConfig+0x348>
 8005e60:	2308      	movs	r3, #8
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e098      	b.n	8005f98 <UART_SetConfig+0x348>
 8005e66:	2310      	movs	r3, #16
 8005e68:	77fb      	strb	r3, [r7, #31]
 8005e6a:	e095      	b.n	8005f98 <UART_SetConfig+0x348>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a2f      	ldr	r2, [pc, #188]	; (8005f30 <UART_SetConfig+0x2e0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d125      	bne.n	8005ec2 <UART_SetConfig+0x272>
 8005e76:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <UART_SetConfig+0x2cc>)
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e84:	d017      	beq.n	8005eb6 <UART_SetConfig+0x266>
 8005e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e8a:	d817      	bhi.n	8005ebc <UART_SetConfig+0x26c>
 8005e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e90:	d00b      	beq.n	8005eaa <UART_SetConfig+0x25a>
 8005e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e96:	d811      	bhi.n	8005ebc <UART_SetConfig+0x26c>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <UART_SetConfig+0x254>
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea0:	d006      	beq.n	8005eb0 <UART_SetConfig+0x260>
 8005ea2:	e00b      	b.n	8005ebc <UART_SetConfig+0x26c>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e076      	b.n	8005f98 <UART_SetConfig+0x348>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	e073      	b.n	8005f98 <UART_SetConfig+0x348>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e070      	b.n	8005f98 <UART_SetConfig+0x348>
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e06d      	b.n	8005f98 <UART_SetConfig+0x348>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e06a      	b.n	8005f98 <UART_SetConfig+0x348>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <UART_SetConfig+0x2e4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d138      	bne.n	8005f3e <UART_SetConfig+0x2ee>
 8005ecc:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <UART_SetConfig+0x2cc>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ed6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eda:	d017      	beq.n	8005f0c <UART_SetConfig+0x2bc>
 8005edc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ee0:	d82a      	bhi.n	8005f38 <UART_SetConfig+0x2e8>
 8005ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee6:	d00b      	beq.n	8005f00 <UART_SetConfig+0x2b0>
 8005ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eec:	d824      	bhi.n	8005f38 <UART_SetConfig+0x2e8>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <UART_SetConfig+0x2aa>
 8005ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef6:	d006      	beq.n	8005f06 <UART_SetConfig+0x2b6>
 8005ef8:	e01e      	b.n	8005f38 <UART_SetConfig+0x2e8>
 8005efa:	2300      	movs	r3, #0
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e04b      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f00:	2302      	movs	r3, #2
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e048      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f06:	2304      	movs	r3, #4
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e045      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e042      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f12:	bf00      	nop
 8005f14:	efff69f3 	.word	0xefff69f3
 8005f18:	40011000 	.word	0x40011000
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40004400 	.word	0x40004400
 8005f24:	40004800 	.word	0x40004800
 8005f28:	40004c00 	.word	0x40004c00
 8005f2c:	40005000 	.word	0x40005000
 8005f30:	40011400 	.word	0x40011400
 8005f34:	40007800 	.word	0x40007800
 8005f38:	2310      	movs	r3, #16
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e02c      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a72      	ldr	r2, [pc, #456]	; (800610c <UART_SetConfig+0x4bc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d125      	bne.n	8005f94 <UART_SetConfig+0x344>
 8005f48:	4b71      	ldr	r3, [pc, #452]	; (8006110 <UART_SetConfig+0x4c0>)
 8005f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f56:	d017      	beq.n	8005f88 <UART_SetConfig+0x338>
 8005f58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f5c:	d817      	bhi.n	8005f8e <UART_SetConfig+0x33e>
 8005f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f62:	d00b      	beq.n	8005f7c <UART_SetConfig+0x32c>
 8005f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f68:	d811      	bhi.n	8005f8e <UART_SetConfig+0x33e>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <UART_SetConfig+0x326>
 8005f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f72:	d006      	beq.n	8005f82 <UART_SetConfig+0x332>
 8005f74:	e00b      	b.n	8005f8e <UART_SetConfig+0x33e>
 8005f76:	2300      	movs	r3, #0
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e00d      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e00a      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f82:	2304      	movs	r3, #4
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e007      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e004      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f8e:	2310      	movs	r3, #16
 8005f90:	77fb      	strb	r3, [r7, #31]
 8005f92:	e001      	b.n	8005f98 <UART_SetConfig+0x348>
 8005f94:	2310      	movs	r3, #16
 8005f96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa0:	d15b      	bne.n	800605a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005fa2:	7ffb      	ldrb	r3, [r7, #31]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d828      	bhi.n	8005ffa <UART_SetConfig+0x3aa>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <UART_SetConfig+0x360>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fdd 	.word	0x08005fdd
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	08005ffb 	.word	0x08005ffb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005ffb 	.word	0x08005ffb
 8005fc8:	08005ffb 	.word	0x08005ffb
 8005fcc:	08005ffb 	.word	0x08005ffb
 8005fd0:	08005ff3 	.word	0x08005ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe f8c0 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61b8      	str	r0, [r7, #24]
        break;
 8005fda:	e013      	b.n	8006004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7fe f8d0 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 8005fe0:	61b8      	str	r0, [r7, #24]
        break;
 8005fe2:	e00f      	b.n	8006004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	; (8006114 <UART_SetConfig+0x4c4>)
 8005fe6:	61bb      	str	r3, [r7, #24]
        break;
 8005fe8:	e00c      	b.n	8006004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fea:	f7fd ffa3 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8005fee:	61b8      	str	r0, [r7, #24]
        break;
 8005ff0:	e008      	b.n	8006004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff6:	61bb      	str	r3, [r7, #24]
        break;
 8005ff8:	e004      	b.n	8006004 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	77bb      	strb	r3, [r7, #30]
        break;
 8006002:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d074      	beq.n	80060f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	005a      	lsls	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	d916      	bls.n	8006054 <UART_SetConfig+0x404>
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602c:	d212      	bcs.n	8006054 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f023 030f 	bic.w	r3, r3, #15
 8006036:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	b29b      	uxth	r3, r3
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	b29a      	uxth	r2, r3
 8006044:	89fb      	ldrh	r3, [r7, #14]
 8006046:	4313      	orrs	r3, r2
 8006048:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	89fa      	ldrh	r2, [r7, #14]
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	e04f      	b.n	80060f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	77bb      	strb	r3, [r7, #30]
 8006058:	e04c      	b.n	80060f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800605a:	7ffb      	ldrb	r3, [r7, #31]
 800605c:	2b08      	cmp	r3, #8
 800605e:	d828      	bhi.n	80060b2 <UART_SetConfig+0x462>
 8006060:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <UART_SetConfig+0x418>)
 8006062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006066:	bf00      	nop
 8006068:	0800608d 	.word	0x0800608d
 800606c:	08006095 	.word	0x08006095
 8006070:	0800609d 	.word	0x0800609d
 8006074:	080060b3 	.word	0x080060b3
 8006078:	080060a3 	.word	0x080060a3
 800607c:	080060b3 	.word	0x080060b3
 8006080:	080060b3 	.word	0x080060b3
 8006084:	080060b3 	.word	0x080060b3
 8006088:	080060ab 	.word	0x080060ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800608c:	f7fe f864 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8006090:	61b8      	str	r0, [r7, #24]
        break;
 8006092:	e013      	b.n	80060bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006094:	f7fe f874 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 8006098:	61b8      	str	r0, [r7, #24]
        break;
 800609a:	e00f      	b.n	80060bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800609c:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <UART_SetConfig+0x4c4>)
 800609e:	61bb      	str	r3, [r7, #24]
        break;
 80060a0:	e00c      	b.n	80060bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060a2:	f7fd ff47 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 80060a6:	61b8      	str	r0, [r7, #24]
        break;
 80060a8:	e008      	b.n	80060bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ae:	61bb      	str	r3, [r7, #24]
        break;
 80060b0:	e004      	b.n	80060bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	77bb      	strb	r3, [r7, #30]
        break;
 80060ba:	bf00      	nop
    }

    if (pclk != 0U)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d018      	beq.n	80060f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	085a      	lsrs	r2, r3, #1
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	441a      	add	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2b0f      	cmp	r3, #15
 80060da:	d909      	bls.n	80060f0 <UART_SetConfig+0x4a0>
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e2:	d205      	bcs.n	80060f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	e001      	b.n	80060f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006100:	7fbb      	ldrb	r3, [r7, #30]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40007c00 	.word	0x40007c00
 8006110:	40023800 	.word	0x40023800
 8006114:	00f42400 	.word	0x00f42400

08006118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01a      	beq.n	800622e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006216:	d10a      	bne.n	800622e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
  }
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af02      	add	r7, sp, #8
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800626c:	f7fb fb40 	bl	80018f0 <HAL_GetTick>
 8006270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b08      	cmp	r3, #8
 800627e:	d10e      	bne.n	800629e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f831 	bl	80062f6 <UART_WaitOnFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e027      	b.n	80062ee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d10e      	bne.n	80062ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f81b 	bl	80062f6 <UART_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e011      	b.n	80062ee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b09c      	sub	sp, #112	; 0x70
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	603b      	str	r3, [r7, #0]
 8006302:	4613      	mov	r3, r2
 8006304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006306:	e0a7      	b.n	8006458 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	f000 80a3 	beq.w	8006458 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006312:	f7fb faed 	bl	80018f0 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800631e:	429a      	cmp	r2, r3
 8006320:	d302      	bcc.n	8006328 <UART_WaitOnFlagUntilTimeout+0x32>
 8006322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006324:	2b00      	cmp	r3, #0
 8006326:	d13f      	bne.n	80063a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800633c:	667b      	str	r3, [r7, #100]	; 0x64
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006348:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800634c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e6      	bne.n	8006328 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	663b      	str	r3, [r7, #96]	; 0x60
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800637a:	64ba      	str	r2, [r7, #72]	; 0x48
 800637c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e5      	bne.n	800635a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e068      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d050      	beq.n	8006458 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c4:	d148      	bne.n	8006458 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ee:	637b      	str	r3, [r7, #52]	; 0x34
 80063f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e6      	bne.n	80063d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3308      	adds	r3, #8
 8006408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	613b      	str	r3, [r7, #16]
   return(result);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f023 0301 	bic.w	r3, r3, #1
 8006418:	66bb      	str	r3, [r7, #104]	; 0x68
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3308      	adds	r3, #8
 8006420:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006422:	623a      	str	r2, [r7, #32]
 8006424:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	69f9      	ldr	r1, [r7, #28]
 8006428:	6a3a      	ldr	r2, [r7, #32]
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e5      	bne.n	8006402 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e010      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69da      	ldr	r2, [r3, #28]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4013      	ands	r3, r2
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	429a      	cmp	r2, r3
 8006466:	bf0c      	ite	eq
 8006468:	2301      	moveq	r3, #1
 800646a:	2300      	movne	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	429a      	cmp	r2, r3
 8006474:	f43f af48 	beq.w	8006308 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3770      	adds	r7, #112	; 0x70
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006484:	b084      	sub	sp, #16
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	f107 001c 	add.w	r0, r7, #28
 8006492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d120      	bne.n	80064de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	4b20      	ldr	r3, [pc, #128]	; (8006530 <USB_CoreInit+0xac>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d105      	bne.n	80064d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fa96 	bl	8006a04 <USB_CoreReset>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]
 80064dc:	e010      	b.n	8006500 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fa8a 	bl	8006a04 <USB_CoreReset>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	2b01      	cmp	r3, #1
 8006504:	d10b      	bne.n	800651e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f043 0206 	orr.w	r2, r3, #6
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f043 0220 	orr.w	r2, r3, #32
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800652a:	b004      	add	sp, #16
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	ffbdffbf 	.word	0xffbdffbf

08006534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f023 0201 	bic.w	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d115      	bne.n	80065a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006584:	2001      	movs	r0, #1
 8006586:	f7fb f9bf 	bl	8001908 <HAL_Delay>
      ms++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fa29 	bl	80069e8 <USB_GetMode>
 8006596:	4603      	mov	r3, r0
 8006598:	2b01      	cmp	r3, #1
 800659a:	d01e      	beq.n	80065da <USB_SetCurrentMode+0x84>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b31      	cmp	r3, #49	; 0x31
 80065a0:	d9f0      	bls.n	8006584 <USB_SetCurrentMode+0x2e>
 80065a2:	e01a      	b.n	80065da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d115      	bne.n	80065d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065b6:	2001      	movs	r0, #1
 80065b8:	f7fb f9a6 	bl	8001908 <HAL_Delay>
      ms++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa10 	bl	80069e8 <USB_GetMode>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <USB_SetCurrentMode+0x84>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b31      	cmp	r3, #49	; 0x31
 80065d2:	d9f0      	bls.n	80065b6 <USB_SetCurrentMode+0x60>
 80065d4:	e001      	b.n	80065da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e005      	b.n	80065e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b32      	cmp	r3, #50	; 0x32
 80065de:	d101      	bne.n	80065e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065f0:	b084      	sub	sp, #16
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	e009      	b.n	8006624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3340      	adds	r3, #64	; 0x40
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	2200      	movs	r2, #0
 800661c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	3301      	adds	r3, #1
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b0e      	cmp	r3, #14
 8006628:	d9f2      	bls.n	8006610 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800662a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d11c      	bne.n	800666a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800663e:	f043 0302 	orr.w	r3, r3, #2
 8006642:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e005      	b.n	8006676 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800667c:	461a      	mov	r2, r3
 800667e:	2300      	movs	r3, #0
 8006680:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006688:	4619      	mov	r1, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	461a      	mov	r2, r3
 8006692:	680b      	ldr	r3, [r1, #0]
 8006694:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	2b01      	cmp	r3, #1
 800669a:	d10c      	bne.n	80066b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d104      	bne.n	80066ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f965 	bl	8006974 <USB_SetDevSpeed>
 80066aa:	e008      	b.n	80066be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066ac:	2101      	movs	r1, #1
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f960 	bl	8006974 <USB_SetDevSpeed>
 80066b4:	e003      	b.n	80066be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066b6:	2103      	movs	r1, #3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f95b 	bl	8006974 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066be:	2110      	movs	r1, #16
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f8f3 	bl	80068ac <USB_FlushTxFifo>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f91f 	bl	8006914 <USB_FlushRxFifo>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e6:	461a      	mov	r2, r3
 80066e8:	2300      	movs	r3, #0
 80066ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	461a      	mov	r2, r3
 80066f4:	2300      	movs	r3, #0
 80066f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	461a      	mov	r2, r3
 8006700:	2300      	movs	r3, #0
 8006702:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006704:	2300      	movs	r3, #0
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	e043      	b.n	8006792 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800671c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006720:	d118      	bne.n	8006754 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006734:	461a      	mov	r2, r3
 8006736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	e013      	b.n	8006766 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674a:	461a      	mov	r2, r3
 800674c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	e008      	b.n	8006766 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	461a      	mov	r2, r3
 8006762:	2300      	movs	r3, #0
 8006764:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	461a      	mov	r2, r3
 8006774:	2300      	movs	r3, #0
 8006776:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	461a      	mov	r2, r3
 8006786:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800678a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	3301      	adds	r3, #1
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	429a      	cmp	r2, r3
 8006798:	d3b7      	bcc.n	800670a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800679a:	2300      	movs	r3, #0
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	e043      	b.n	8006828 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b6:	d118      	bne.n	80067ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ca:	461a      	mov	r2, r3
 80067cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	e013      	b.n	80067fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e0:	461a      	mov	r2, r3
 80067e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	e008      	b.n	80067fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	461a      	mov	r2, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006808:	461a      	mov	r2, r3
 800680a:	2300      	movs	r3, #0
 800680c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681a:	461a      	mov	r2, r3
 800681c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006820:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	3301      	adds	r3, #1
 8006826:	613b      	str	r3, [r7, #16]
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	429a      	cmp	r2, r3
 800682e:	d3b7      	bcc.n	80067a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800683e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006842:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006850:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	2b00      	cmp	r3, #0
 8006856:	d105      	bne.n	8006864 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f043 0210 	orr.w	r2, r3, #16
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <USB_DevInit+0x2b4>)
 800686a:	4313      	orrs	r3, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f043 0208 	orr.w	r2, r3, #8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d105      	bne.n	8006894 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <USB_DevInit+0x2b8>)
 800688e:	4313      	orrs	r3, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006894:	7dfb      	ldrb	r3, [r7, #23]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068a0:	b004      	add	sp, #16
 80068a2:	4770      	bx	lr
 80068a4:	803c3800 	.word	0x803c3800
 80068a8:	40000004 	.word	0x40000004

080068ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3301      	adds	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a13      	ldr	r2, [pc, #76]	; (8006910 <USB_FlushTxFifo+0x64>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d901      	bls.n	80068cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e01b      	b.n	8006904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	daf2      	bge.n	80068ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	019b      	lsls	r3, r3, #6
 80068dc:	f043 0220 	orr.w	r2, r3, #32
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a08      	ldr	r2, [pc, #32]	; (8006910 <USB_FlushTxFifo+0x64>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d901      	bls.n	80068f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e006      	b.n	8006904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d0f0      	beq.n	80068e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	00030d40 	.word	0x00030d40

08006914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a11      	ldr	r2, [pc, #68]	; (8006970 <USB_FlushRxFifo+0x5c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d901      	bls.n	8006932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e018      	b.n	8006964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	daf2      	bge.n	8006920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2210      	movs	r2, #16
 8006942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4a08      	ldr	r2, [pc, #32]	; (8006970 <USB_FlushRxFifo+0x5c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e006      	b.n	8006964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b10      	cmp	r3, #16
 8006960:	d0f0      	beq.n	8006944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	00030d40 	.word	0x00030d40

08006974 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006994:	4313      	orrs	r3, r2
 8006996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069c0:	f023 0303 	bic.w	r3, r3, #3
 80069c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069d4:	f043 0302 	orr.w	r3, r3, #2
 80069d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	f003 0301 	and.w	r3, r3, #1
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a13      	ldr	r2, [pc, #76]	; (8006a68 <USB_CoreReset+0x64>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e01b      	b.n	8006a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	daf2      	bge.n	8006a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f043 0201 	orr.w	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a09      	ldr	r2, [pc, #36]	; (8006a68 <USB_CoreReset+0x64>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d901      	bls.n	8006a4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e006      	b.n	8006a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d0f0      	beq.n	8006a3a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	00030d40 	.word	0x00030d40

08006a6c <__errno>:
 8006a6c:	4b01      	ldr	r3, [pc, #4]	; (8006a74 <__errno+0x8>)
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	2000000c 	.word	0x2000000c

08006a78 <__libc_init_array>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4d0d      	ldr	r5, [pc, #52]	; (8006ab0 <__libc_init_array+0x38>)
 8006a7c:	4c0d      	ldr	r4, [pc, #52]	; (8006ab4 <__libc_init_array+0x3c>)
 8006a7e:	1b64      	subs	r4, r4, r5
 8006a80:	10a4      	asrs	r4, r4, #2
 8006a82:	2600      	movs	r6, #0
 8006a84:	42a6      	cmp	r6, r4
 8006a86:	d109      	bne.n	8006a9c <__libc_init_array+0x24>
 8006a88:	4d0b      	ldr	r5, [pc, #44]	; (8006ab8 <__libc_init_array+0x40>)
 8006a8a:	4c0c      	ldr	r4, [pc, #48]	; (8006abc <__libc_init_array+0x44>)
 8006a8c:	f000 fc8e 	bl	80073ac <_init>
 8006a90:	1b64      	subs	r4, r4, r5
 8006a92:	10a4      	asrs	r4, r4, #2
 8006a94:	2600      	movs	r6, #0
 8006a96:	42a6      	cmp	r6, r4
 8006a98:	d105      	bne.n	8006aa6 <__libc_init_array+0x2e>
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa0:	4798      	blx	r3
 8006aa2:	3601      	adds	r6, #1
 8006aa4:	e7ee      	b.n	8006a84 <__libc_init_array+0xc>
 8006aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aaa:	4798      	blx	r3
 8006aac:	3601      	adds	r6, #1
 8006aae:	e7f2      	b.n	8006a96 <__libc_init_array+0x1e>
 8006ab0:	08007460 	.word	0x08007460
 8006ab4:	08007460 	.word	0x08007460
 8006ab8:	08007460 	.word	0x08007460
 8006abc:	08007464 	.word	0x08007464

08006ac0 <memset>:
 8006ac0:	4402      	add	r2, r0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d100      	bne.n	8006aca <memset+0xa>
 8006ac8:	4770      	bx	lr
 8006aca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ace:	e7f9      	b.n	8006ac4 <memset+0x4>

08006ad0 <_vsiprintf_r>:
 8006ad0:	b500      	push	{lr}
 8006ad2:	b09b      	sub	sp, #108	; 0x6c
 8006ad4:	9100      	str	r1, [sp, #0]
 8006ad6:	9104      	str	r1, [sp, #16]
 8006ad8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006adc:	9105      	str	r1, [sp, #20]
 8006ade:	9102      	str	r1, [sp, #8]
 8006ae0:	4905      	ldr	r1, [pc, #20]	; (8006af8 <_vsiprintf_r+0x28>)
 8006ae2:	9103      	str	r1, [sp, #12]
 8006ae4:	4669      	mov	r1, sp
 8006ae6:	f000 f86f 	bl	8006bc8 <_svfiprintf_r>
 8006aea:	9b00      	ldr	r3, [sp, #0]
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	b01b      	add	sp, #108	; 0x6c
 8006af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006af6:	bf00      	nop
 8006af8:	ffff0208 	.word	0xffff0208

08006afc <vsiprintf>:
 8006afc:	4613      	mov	r3, r2
 8006afe:	460a      	mov	r2, r1
 8006b00:	4601      	mov	r1, r0
 8006b02:	4802      	ldr	r0, [pc, #8]	; (8006b0c <vsiprintf+0x10>)
 8006b04:	6800      	ldr	r0, [r0, #0]
 8006b06:	f7ff bfe3 	b.w	8006ad0 <_vsiprintf_r>
 8006b0a:	bf00      	nop
 8006b0c:	2000000c 	.word	0x2000000c

08006b10 <__ssputs_r>:
 8006b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b14:	688e      	ldr	r6, [r1, #8]
 8006b16:	429e      	cmp	r6, r3
 8006b18:	4682      	mov	sl, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	4690      	mov	r8, r2
 8006b1e:	461f      	mov	r7, r3
 8006b20:	d838      	bhi.n	8006b94 <__ssputs_r+0x84>
 8006b22:	898a      	ldrh	r2, [r1, #12]
 8006b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b28:	d032      	beq.n	8006b90 <__ssputs_r+0x80>
 8006b2a:	6825      	ldr	r5, [r4, #0]
 8006b2c:	6909      	ldr	r1, [r1, #16]
 8006b2e:	eba5 0901 	sub.w	r9, r5, r1
 8006b32:	6965      	ldr	r5, [r4, #20]
 8006b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	444b      	add	r3, r9
 8006b40:	106d      	asrs	r5, r5, #1
 8006b42:	429d      	cmp	r5, r3
 8006b44:	bf38      	it	cc
 8006b46:	461d      	movcc	r5, r3
 8006b48:	0553      	lsls	r3, r2, #21
 8006b4a:	d531      	bpl.n	8006bb0 <__ssputs_r+0xa0>
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f000 fb63 	bl	8007218 <_malloc_r>
 8006b52:	4606      	mov	r6, r0
 8006b54:	b950      	cbnz	r0, 8006b6c <__ssputs_r+0x5c>
 8006b56:	230c      	movs	r3, #12
 8006b58:	f8ca 3000 	str.w	r3, [sl]
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6c:	6921      	ldr	r1, [r4, #16]
 8006b6e:	464a      	mov	r2, r9
 8006b70:	f000 fabe 	bl	80070f0 <memcpy>
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7e:	81a3      	strh	r3, [r4, #12]
 8006b80:	6126      	str	r6, [r4, #16]
 8006b82:	6165      	str	r5, [r4, #20]
 8006b84:	444e      	add	r6, r9
 8006b86:	eba5 0509 	sub.w	r5, r5, r9
 8006b8a:	6026      	str	r6, [r4, #0]
 8006b8c:	60a5      	str	r5, [r4, #8]
 8006b8e:	463e      	mov	r6, r7
 8006b90:	42be      	cmp	r6, r7
 8006b92:	d900      	bls.n	8006b96 <__ssputs_r+0x86>
 8006b94:	463e      	mov	r6, r7
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	4632      	mov	r2, r6
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	f000 fab6 	bl	800710c <memmove>
 8006ba0:	68a3      	ldr	r3, [r4, #8]
 8006ba2:	1b9b      	subs	r3, r3, r6
 8006ba4:	60a3      	str	r3, [r4, #8]
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	4433      	add	r3, r6
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	2000      	movs	r0, #0
 8006bae:	e7db      	b.n	8006b68 <__ssputs_r+0x58>
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	f000 fba5 	bl	8007300 <_realloc_r>
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d1e1      	bne.n	8006b80 <__ssputs_r+0x70>
 8006bbc:	6921      	ldr	r1, [r4, #16]
 8006bbe:	4650      	mov	r0, sl
 8006bc0:	f000 fabe 	bl	8007140 <_free_r>
 8006bc4:	e7c7      	b.n	8006b56 <__ssputs_r+0x46>
	...

08006bc8 <_svfiprintf_r>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	4698      	mov	r8, r3
 8006bce:	898b      	ldrh	r3, [r1, #12]
 8006bd0:	061b      	lsls	r3, r3, #24
 8006bd2:	b09d      	sub	sp, #116	; 0x74
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	460d      	mov	r5, r1
 8006bd8:	4614      	mov	r4, r2
 8006bda:	d50e      	bpl.n	8006bfa <_svfiprintf_r+0x32>
 8006bdc:	690b      	ldr	r3, [r1, #16]
 8006bde:	b963      	cbnz	r3, 8006bfa <_svfiprintf_r+0x32>
 8006be0:	2140      	movs	r1, #64	; 0x40
 8006be2:	f000 fb19 	bl	8007218 <_malloc_r>
 8006be6:	6028      	str	r0, [r5, #0]
 8006be8:	6128      	str	r0, [r5, #16]
 8006bea:	b920      	cbnz	r0, 8006bf6 <_svfiprintf_r+0x2e>
 8006bec:	230c      	movs	r3, #12
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	e0d1      	b.n	8006d9a <_svfiprintf_r+0x1d2>
 8006bf6:	2340      	movs	r3, #64	; 0x40
 8006bf8:	616b      	str	r3, [r5, #20]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfe:	2320      	movs	r3, #32
 8006c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c08:	2330      	movs	r3, #48	; 0x30
 8006c0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006db4 <_svfiprintf_r+0x1ec>
 8006c0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c12:	f04f 0901 	mov.w	r9, #1
 8006c16:	4623      	mov	r3, r4
 8006c18:	469a      	mov	sl, r3
 8006c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c1e:	b10a      	cbz	r2, 8006c24 <_svfiprintf_r+0x5c>
 8006c20:	2a25      	cmp	r2, #37	; 0x25
 8006c22:	d1f9      	bne.n	8006c18 <_svfiprintf_r+0x50>
 8006c24:	ebba 0b04 	subs.w	fp, sl, r4
 8006c28:	d00b      	beq.n	8006c42 <_svfiprintf_r+0x7a>
 8006c2a:	465b      	mov	r3, fp
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4638      	mov	r0, r7
 8006c32:	f7ff ff6d 	bl	8006b10 <__ssputs_r>
 8006c36:	3001      	adds	r0, #1
 8006c38:	f000 80aa 	beq.w	8006d90 <_svfiprintf_r+0x1c8>
 8006c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c3e:	445a      	add	r2, fp
 8006c40:	9209      	str	r2, [sp, #36]	; 0x24
 8006c42:	f89a 3000 	ldrb.w	r3, [sl]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 80a2 	beq.w	8006d90 <_svfiprintf_r+0x1c8>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c56:	f10a 0a01 	add.w	sl, sl, #1
 8006c5a:	9304      	str	r3, [sp, #16]
 8006c5c:	9307      	str	r3, [sp, #28]
 8006c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c62:	931a      	str	r3, [sp, #104]	; 0x68
 8006c64:	4654      	mov	r4, sl
 8006c66:	2205      	movs	r2, #5
 8006c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6c:	4851      	ldr	r0, [pc, #324]	; (8006db4 <_svfiprintf_r+0x1ec>)
 8006c6e:	f7f9 fae7 	bl	8000240 <memchr>
 8006c72:	9a04      	ldr	r2, [sp, #16]
 8006c74:	b9d8      	cbnz	r0, 8006cae <_svfiprintf_r+0xe6>
 8006c76:	06d0      	lsls	r0, r2, #27
 8006c78:	bf44      	itt	mi
 8006c7a:	2320      	movmi	r3, #32
 8006c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c80:	0711      	lsls	r1, r2, #28
 8006c82:	bf44      	itt	mi
 8006c84:	232b      	movmi	r3, #43	; 0x2b
 8006c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c90:	d015      	beq.n	8006cbe <_svfiprintf_r+0xf6>
 8006c92:	9a07      	ldr	r2, [sp, #28]
 8006c94:	4654      	mov	r4, sl
 8006c96:	2000      	movs	r0, #0
 8006c98:	f04f 0c0a 	mov.w	ip, #10
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca2:	3b30      	subs	r3, #48	; 0x30
 8006ca4:	2b09      	cmp	r3, #9
 8006ca6:	d94e      	bls.n	8006d46 <_svfiprintf_r+0x17e>
 8006ca8:	b1b0      	cbz	r0, 8006cd8 <_svfiprintf_r+0x110>
 8006caa:	9207      	str	r2, [sp, #28]
 8006cac:	e014      	b.n	8006cd8 <_svfiprintf_r+0x110>
 8006cae:	eba0 0308 	sub.w	r3, r0, r8
 8006cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	9304      	str	r3, [sp, #16]
 8006cba:	46a2      	mov	sl, r4
 8006cbc:	e7d2      	b.n	8006c64 <_svfiprintf_r+0x9c>
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	1d19      	adds	r1, r3, #4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	9103      	str	r1, [sp, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfbb      	ittet	lt
 8006cca:	425b      	neglt	r3, r3
 8006ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8006cd0:	9307      	strge	r3, [sp, #28]
 8006cd2:	9307      	strlt	r3, [sp, #28]
 8006cd4:	bfb8      	it	lt
 8006cd6:	9204      	strlt	r2, [sp, #16]
 8006cd8:	7823      	ldrb	r3, [r4, #0]
 8006cda:	2b2e      	cmp	r3, #46	; 0x2e
 8006cdc:	d10c      	bne.n	8006cf8 <_svfiprintf_r+0x130>
 8006cde:	7863      	ldrb	r3, [r4, #1]
 8006ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce2:	d135      	bne.n	8006d50 <_svfiprintf_r+0x188>
 8006ce4:	9b03      	ldr	r3, [sp, #12]
 8006ce6:	1d1a      	adds	r2, r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	9203      	str	r2, [sp, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bfb8      	it	lt
 8006cf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cf4:	3402      	adds	r4, #2
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006dc4 <_svfiprintf_r+0x1fc>
 8006cfc:	7821      	ldrb	r1, [r4, #0]
 8006cfe:	2203      	movs	r2, #3
 8006d00:	4650      	mov	r0, sl
 8006d02:	f7f9 fa9d 	bl	8000240 <memchr>
 8006d06:	b140      	cbz	r0, 8006d1a <_svfiprintf_r+0x152>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	eba0 000a 	sub.w	r0, r0, sl
 8006d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	4303      	orrs	r3, r0
 8006d16:	3401      	adds	r4, #1
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1e:	4826      	ldr	r0, [pc, #152]	; (8006db8 <_svfiprintf_r+0x1f0>)
 8006d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d24:	2206      	movs	r2, #6
 8006d26:	f7f9 fa8b 	bl	8000240 <memchr>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d038      	beq.n	8006da0 <_svfiprintf_r+0x1d8>
 8006d2e:	4b23      	ldr	r3, [pc, #140]	; (8006dbc <_svfiprintf_r+0x1f4>)
 8006d30:	bb1b      	cbnz	r3, 8006d7a <_svfiprintf_r+0x1b2>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	3307      	adds	r3, #7
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	9303      	str	r3, [sp, #12]
 8006d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d40:	4433      	add	r3, r6
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
 8006d44:	e767      	b.n	8006c16 <_svfiprintf_r+0x4e>
 8006d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	e7a5      	b.n	8006c9c <_svfiprintf_r+0xd4>
 8006d50:	2300      	movs	r3, #0
 8006d52:	3401      	adds	r4, #1
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	4619      	mov	r1, r3
 8006d58:	f04f 0c0a 	mov.w	ip, #10
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d62:	3a30      	subs	r2, #48	; 0x30
 8006d64:	2a09      	cmp	r2, #9
 8006d66:	d903      	bls.n	8006d70 <_svfiprintf_r+0x1a8>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0c5      	beq.n	8006cf8 <_svfiprintf_r+0x130>
 8006d6c:	9105      	str	r1, [sp, #20]
 8006d6e:	e7c3      	b.n	8006cf8 <_svfiprintf_r+0x130>
 8006d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d74:	4604      	mov	r4, r0
 8006d76:	2301      	movs	r3, #1
 8006d78:	e7f0      	b.n	8006d5c <_svfiprintf_r+0x194>
 8006d7a:	ab03      	add	r3, sp, #12
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	462a      	mov	r2, r5
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <_svfiprintf_r+0x1f8>)
 8006d82:	a904      	add	r1, sp, #16
 8006d84:	4638      	mov	r0, r7
 8006d86:	f3af 8000 	nop.w
 8006d8a:	1c42      	adds	r2, r0, #1
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	d1d6      	bne.n	8006d3e <_svfiprintf_r+0x176>
 8006d90:	89ab      	ldrh	r3, [r5, #12]
 8006d92:	065b      	lsls	r3, r3, #25
 8006d94:	f53f af2c 	bmi.w	8006bf0 <_svfiprintf_r+0x28>
 8006d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d9a:	b01d      	add	sp, #116	; 0x74
 8006d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da0:	ab03      	add	r3, sp, #12
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	462a      	mov	r2, r5
 8006da6:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <_svfiprintf_r+0x1f8>)
 8006da8:	a904      	add	r1, sp, #16
 8006daa:	4638      	mov	r0, r7
 8006dac:	f000 f87a 	bl	8006ea4 <_printf_i>
 8006db0:	e7eb      	b.n	8006d8a <_svfiprintf_r+0x1c2>
 8006db2:	bf00      	nop
 8006db4:	08007424 	.word	0x08007424
 8006db8:	0800742e 	.word	0x0800742e
 8006dbc:	00000000 	.word	0x00000000
 8006dc0:	08006b11 	.word	0x08006b11
 8006dc4:	0800742a 	.word	0x0800742a

08006dc8 <_printf_common>:
 8006dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dcc:	4616      	mov	r6, r2
 8006dce:	4699      	mov	r9, r3
 8006dd0:	688a      	ldr	r2, [r1, #8]
 8006dd2:	690b      	ldr	r3, [r1, #16]
 8006dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	bfb8      	it	lt
 8006ddc:	4613      	movlt	r3, r2
 8006dde:	6033      	str	r3, [r6, #0]
 8006de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006de4:	4607      	mov	r7, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	b10a      	cbz	r2, 8006dee <_printf_common+0x26>
 8006dea:	3301      	adds	r3, #1
 8006dec:	6033      	str	r3, [r6, #0]
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	0699      	lsls	r1, r3, #26
 8006df2:	bf42      	ittt	mi
 8006df4:	6833      	ldrmi	r3, [r6, #0]
 8006df6:	3302      	addmi	r3, #2
 8006df8:	6033      	strmi	r3, [r6, #0]
 8006dfa:	6825      	ldr	r5, [r4, #0]
 8006dfc:	f015 0506 	ands.w	r5, r5, #6
 8006e00:	d106      	bne.n	8006e10 <_printf_common+0x48>
 8006e02:	f104 0a19 	add.w	sl, r4, #25
 8006e06:	68e3      	ldr	r3, [r4, #12]
 8006e08:	6832      	ldr	r2, [r6, #0]
 8006e0a:	1a9b      	subs	r3, r3, r2
 8006e0c:	42ab      	cmp	r3, r5
 8006e0e:	dc26      	bgt.n	8006e5e <_printf_common+0x96>
 8006e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e14:	1e13      	subs	r3, r2, #0
 8006e16:	6822      	ldr	r2, [r4, #0]
 8006e18:	bf18      	it	ne
 8006e1a:	2301      	movne	r3, #1
 8006e1c:	0692      	lsls	r2, r2, #26
 8006e1e:	d42b      	bmi.n	8006e78 <_printf_common+0xb0>
 8006e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e24:	4649      	mov	r1, r9
 8006e26:	4638      	mov	r0, r7
 8006e28:	47c0      	blx	r8
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d01e      	beq.n	8006e6c <_printf_common+0xa4>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	68e5      	ldr	r5, [r4, #12]
 8006e32:	6832      	ldr	r2, [r6, #0]
 8006e34:	f003 0306 	and.w	r3, r3, #6
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	bf08      	it	eq
 8006e3c:	1aad      	subeq	r5, r5, r2
 8006e3e:	68a3      	ldr	r3, [r4, #8]
 8006e40:	6922      	ldr	r2, [r4, #16]
 8006e42:	bf0c      	ite	eq
 8006e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e48:	2500      	movne	r5, #0
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	bfc4      	itt	gt
 8006e4e:	1a9b      	subgt	r3, r3, r2
 8006e50:	18ed      	addgt	r5, r5, r3
 8006e52:	2600      	movs	r6, #0
 8006e54:	341a      	adds	r4, #26
 8006e56:	42b5      	cmp	r5, r6
 8006e58:	d11a      	bne.n	8006e90 <_printf_common+0xc8>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e008      	b.n	8006e70 <_printf_common+0xa8>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4652      	mov	r2, sl
 8006e62:	4649      	mov	r1, r9
 8006e64:	4638      	mov	r0, r7
 8006e66:	47c0      	blx	r8
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d103      	bne.n	8006e74 <_printf_common+0xac>
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e74:	3501      	adds	r5, #1
 8006e76:	e7c6      	b.n	8006e06 <_printf_common+0x3e>
 8006e78:	18e1      	adds	r1, r4, r3
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	2030      	movs	r0, #48	; 0x30
 8006e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e82:	4422      	add	r2, r4
 8006e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e8c:	3302      	adds	r3, #2
 8006e8e:	e7c7      	b.n	8006e20 <_printf_common+0x58>
 8006e90:	2301      	movs	r3, #1
 8006e92:	4622      	mov	r2, r4
 8006e94:	4649      	mov	r1, r9
 8006e96:	4638      	mov	r0, r7
 8006e98:	47c0      	blx	r8
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d0e6      	beq.n	8006e6c <_printf_common+0xa4>
 8006e9e:	3601      	adds	r6, #1
 8006ea0:	e7d9      	b.n	8006e56 <_printf_common+0x8e>
	...

08006ea4 <_printf_i>:
 8006ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea8:	7e0f      	ldrb	r7, [r1, #24]
 8006eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006eac:	2f78      	cmp	r7, #120	; 0x78
 8006eae:	4691      	mov	r9, r2
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	469a      	mov	sl, r3
 8006eb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006eba:	d807      	bhi.n	8006ecc <_printf_i+0x28>
 8006ebc:	2f62      	cmp	r7, #98	; 0x62
 8006ebe:	d80a      	bhi.n	8006ed6 <_printf_i+0x32>
 8006ec0:	2f00      	cmp	r7, #0
 8006ec2:	f000 80d8 	beq.w	8007076 <_printf_i+0x1d2>
 8006ec6:	2f58      	cmp	r7, #88	; 0x58
 8006ec8:	f000 80a3 	beq.w	8007012 <_printf_i+0x16e>
 8006ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ed4:	e03a      	b.n	8006f4c <_printf_i+0xa8>
 8006ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eda:	2b15      	cmp	r3, #21
 8006edc:	d8f6      	bhi.n	8006ecc <_printf_i+0x28>
 8006ede:	a101      	add	r1, pc, #4	; (adr r1, 8006ee4 <_printf_i+0x40>)
 8006ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ee4:	08006f3d 	.word	0x08006f3d
 8006ee8:	08006f51 	.word	0x08006f51
 8006eec:	08006ecd 	.word	0x08006ecd
 8006ef0:	08006ecd 	.word	0x08006ecd
 8006ef4:	08006ecd 	.word	0x08006ecd
 8006ef8:	08006ecd 	.word	0x08006ecd
 8006efc:	08006f51 	.word	0x08006f51
 8006f00:	08006ecd 	.word	0x08006ecd
 8006f04:	08006ecd 	.word	0x08006ecd
 8006f08:	08006ecd 	.word	0x08006ecd
 8006f0c:	08006ecd 	.word	0x08006ecd
 8006f10:	0800705d 	.word	0x0800705d
 8006f14:	08006f81 	.word	0x08006f81
 8006f18:	0800703f 	.word	0x0800703f
 8006f1c:	08006ecd 	.word	0x08006ecd
 8006f20:	08006ecd 	.word	0x08006ecd
 8006f24:	0800707f 	.word	0x0800707f
 8006f28:	08006ecd 	.word	0x08006ecd
 8006f2c:	08006f81 	.word	0x08006f81
 8006f30:	08006ecd 	.word	0x08006ecd
 8006f34:	08006ecd 	.word	0x08006ecd
 8006f38:	08007047 	.word	0x08007047
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	1d1a      	adds	r2, r3, #4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	602a      	str	r2, [r5, #0]
 8006f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e0a3      	b.n	8007098 <_printf_i+0x1f4>
 8006f50:	6820      	ldr	r0, [r4, #0]
 8006f52:	6829      	ldr	r1, [r5, #0]
 8006f54:	0606      	lsls	r6, r0, #24
 8006f56:	f101 0304 	add.w	r3, r1, #4
 8006f5a:	d50a      	bpl.n	8006f72 <_printf_i+0xce>
 8006f5c:	680e      	ldr	r6, [r1, #0]
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	2e00      	cmp	r6, #0
 8006f62:	da03      	bge.n	8006f6c <_printf_i+0xc8>
 8006f64:	232d      	movs	r3, #45	; 0x2d
 8006f66:	4276      	negs	r6, r6
 8006f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f6c:	485e      	ldr	r0, [pc, #376]	; (80070e8 <_printf_i+0x244>)
 8006f6e:	230a      	movs	r3, #10
 8006f70:	e019      	b.n	8006fa6 <_printf_i+0x102>
 8006f72:	680e      	ldr	r6, [r1, #0]
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f7a:	bf18      	it	ne
 8006f7c:	b236      	sxthne	r6, r6
 8006f7e:	e7ef      	b.n	8006f60 <_printf_i+0xbc>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	6820      	ldr	r0, [r4, #0]
 8006f84:	1d19      	adds	r1, r3, #4
 8006f86:	6029      	str	r1, [r5, #0]
 8006f88:	0601      	lsls	r1, r0, #24
 8006f8a:	d501      	bpl.n	8006f90 <_printf_i+0xec>
 8006f8c:	681e      	ldr	r6, [r3, #0]
 8006f8e:	e002      	b.n	8006f96 <_printf_i+0xf2>
 8006f90:	0646      	lsls	r6, r0, #25
 8006f92:	d5fb      	bpl.n	8006f8c <_printf_i+0xe8>
 8006f94:	881e      	ldrh	r6, [r3, #0]
 8006f96:	4854      	ldr	r0, [pc, #336]	; (80070e8 <_printf_i+0x244>)
 8006f98:	2f6f      	cmp	r7, #111	; 0x6f
 8006f9a:	bf0c      	ite	eq
 8006f9c:	2308      	moveq	r3, #8
 8006f9e:	230a      	movne	r3, #10
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fa6:	6865      	ldr	r5, [r4, #4]
 8006fa8:	60a5      	str	r5, [r4, #8]
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	bfa2      	ittt	ge
 8006fae:	6821      	ldrge	r1, [r4, #0]
 8006fb0:	f021 0104 	bicge.w	r1, r1, #4
 8006fb4:	6021      	strge	r1, [r4, #0]
 8006fb6:	b90e      	cbnz	r6, 8006fbc <_printf_i+0x118>
 8006fb8:	2d00      	cmp	r5, #0
 8006fba:	d04d      	beq.n	8007058 <_printf_i+0x1b4>
 8006fbc:	4615      	mov	r5, r2
 8006fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8006fc6:	5dc7      	ldrb	r7, [r0, r7]
 8006fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fcc:	4637      	mov	r7, r6
 8006fce:	42bb      	cmp	r3, r7
 8006fd0:	460e      	mov	r6, r1
 8006fd2:	d9f4      	bls.n	8006fbe <_printf_i+0x11a>
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d10b      	bne.n	8006ff0 <_printf_i+0x14c>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	07de      	lsls	r6, r3, #31
 8006fdc:	d508      	bpl.n	8006ff0 <_printf_i+0x14c>
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	6861      	ldr	r1, [r4, #4]
 8006fe2:	4299      	cmp	r1, r3
 8006fe4:	bfde      	ittt	le
 8006fe6:	2330      	movle	r3, #48	; 0x30
 8006fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ff0:	1b52      	subs	r2, r2, r5
 8006ff2:	6122      	str	r2, [r4, #16]
 8006ff4:	f8cd a000 	str.w	sl, [sp]
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	aa03      	add	r2, sp, #12
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4640      	mov	r0, r8
 8007000:	f7ff fee2 	bl	8006dc8 <_printf_common>
 8007004:	3001      	adds	r0, #1
 8007006:	d14c      	bne.n	80070a2 <_printf_i+0x1fe>
 8007008:	f04f 30ff 	mov.w	r0, #4294967295
 800700c:	b004      	add	sp, #16
 800700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007012:	4835      	ldr	r0, [pc, #212]	; (80070e8 <_printf_i+0x244>)
 8007014:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007018:	6829      	ldr	r1, [r5, #0]
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007020:	6029      	str	r1, [r5, #0]
 8007022:	061d      	lsls	r5, r3, #24
 8007024:	d514      	bpl.n	8007050 <_printf_i+0x1ac>
 8007026:	07df      	lsls	r7, r3, #31
 8007028:	bf44      	itt	mi
 800702a:	f043 0320 	orrmi.w	r3, r3, #32
 800702e:	6023      	strmi	r3, [r4, #0]
 8007030:	b91e      	cbnz	r6, 800703a <_printf_i+0x196>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	f023 0320 	bic.w	r3, r3, #32
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	2310      	movs	r3, #16
 800703c:	e7b0      	b.n	8006fa0 <_printf_i+0xfc>
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	f043 0320 	orr.w	r3, r3, #32
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	2378      	movs	r3, #120	; 0x78
 8007048:	4828      	ldr	r0, [pc, #160]	; (80070ec <_printf_i+0x248>)
 800704a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800704e:	e7e3      	b.n	8007018 <_printf_i+0x174>
 8007050:	0659      	lsls	r1, r3, #25
 8007052:	bf48      	it	mi
 8007054:	b2b6      	uxthmi	r6, r6
 8007056:	e7e6      	b.n	8007026 <_printf_i+0x182>
 8007058:	4615      	mov	r5, r2
 800705a:	e7bb      	b.n	8006fd4 <_printf_i+0x130>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	6826      	ldr	r6, [r4, #0]
 8007060:	6961      	ldr	r1, [r4, #20]
 8007062:	1d18      	adds	r0, r3, #4
 8007064:	6028      	str	r0, [r5, #0]
 8007066:	0635      	lsls	r5, r6, #24
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	d501      	bpl.n	8007070 <_printf_i+0x1cc>
 800706c:	6019      	str	r1, [r3, #0]
 800706e:	e002      	b.n	8007076 <_printf_i+0x1d2>
 8007070:	0670      	lsls	r0, r6, #25
 8007072:	d5fb      	bpl.n	800706c <_printf_i+0x1c8>
 8007074:	8019      	strh	r1, [r3, #0]
 8007076:	2300      	movs	r3, #0
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	4615      	mov	r5, r2
 800707c:	e7ba      	b.n	8006ff4 <_printf_i+0x150>
 800707e:	682b      	ldr	r3, [r5, #0]
 8007080:	1d1a      	adds	r2, r3, #4
 8007082:	602a      	str	r2, [r5, #0]
 8007084:	681d      	ldr	r5, [r3, #0]
 8007086:	6862      	ldr	r2, [r4, #4]
 8007088:	2100      	movs	r1, #0
 800708a:	4628      	mov	r0, r5
 800708c:	f7f9 f8d8 	bl	8000240 <memchr>
 8007090:	b108      	cbz	r0, 8007096 <_printf_i+0x1f2>
 8007092:	1b40      	subs	r0, r0, r5
 8007094:	6060      	str	r0, [r4, #4]
 8007096:	6863      	ldr	r3, [r4, #4]
 8007098:	6123      	str	r3, [r4, #16]
 800709a:	2300      	movs	r3, #0
 800709c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a0:	e7a8      	b.n	8006ff4 <_printf_i+0x150>
 80070a2:	6923      	ldr	r3, [r4, #16]
 80070a4:	462a      	mov	r2, r5
 80070a6:	4649      	mov	r1, r9
 80070a8:	4640      	mov	r0, r8
 80070aa:	47d0      	blx	sl
 80070ac:	3001      	adds	r0, #1
 80070ae:	d0ab      	beq.n	8007008 <_printf_i+0x164>
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	079b      	lsls	r3, r3, #30
 80070b4:	d413      	bmi.n	80070de <_printf_i+0x23a>
 80070b6:	68e0      	ldr	r0, [r4, #12]
 80070b8:	9b03      	ldr	r3, [sp, #12]
 80070ba:	4298      	cmp	r0, r3
 80070bc:	bfb8      	it	lt
 80070be:	4618      	movlt	r0, r3
 80070c0:	e7a4      	b.n	800700c <_printf_i+0x168>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4632      	mov	r2, r6
 80070c6:	4649      	mov	r1, r9
 80070c8:	4640      	mov	r0, r8
 80070ca:	47d0      	blx	sl
 80070cc:	3001      	adds	r0, #1
 80070ce:	d09b      	beq.n	8007008 <_printf_i+0x164>
 80070d0:	3501      	adds	r5, #1
 80070d2:	68e3      	ldr	r3, [r4, #12]
 80070d4:	9903      	ldr	r1, [sp, #12]
 80070d6:	1a5b      	subs	r3, r3, r1
 80070d8:	42ab      	cmp	r3, r5
 80070da:	dcf2      	bgt.n	80070c2 <_printf_i+0x21e>
 80070dc:	e7eb      	b.n	80070b6 <_printf_i+0x212>
 80070de:	2500      	movs	r5, #0
 80070e0:	f104 0619 	add.w	r6, r4, #25
 80070e4:	e7f5      	b.n	80070d2 <_printf_i+0x22e>
 80070e6:	bf00      	nop
 80070e8:	08007435 	.word	0x08007435
 80070ec:	08007446 	.word	0x08007446

080070f0 <memcpy>:
 80070f0:	440a      	add	r2, r1
 80070f2:	4291      	cmp	r1, r2
 80070f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070f8:	d100      	bne.n	80070fc <memcpy+0xc>
 80070fa:	4770      	bx	lr
 80070fc:	b510      	push	{r4, lr}
 80070fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007106:	4291      	cmp	r1, r2
 8007108:	d1f9      	bne.n	80070fe <memcpy+0xe>
 800710a:	bd10      	pop	{r4, pc}

0800710c <memmove>:
 800710c:	4288      	cmp	r0, r1
 800710e:	b510      	push	{r4, lr}
 8007110:	eb01 0402 	add.w	r4, r1, r2
 8007114:	d902      	bls.n	800711c <memmove+0x10>
 8007116:	4284      	cmp	r4, r0
 8007118:	4623      	mov	r3, r4
 800711a:	d807      	bhi.n	800712c <memmove+0x20>
 800711c:	1e43      	subs	r3, r0, #1
 800711e:	42a1      	cmp	r1, r4
 8007120:	d008      	beq.n	8007134 <memmove+0x28>
 8007122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007126:	f803 2f01 	strb.w	r2, [r3, #1]!
 800712a:	e7f8      	b.n	800711e <memmove+0x12>
 800712c:	4402      	add	r2, r0
 800712e:	4601      	mov	r1, r0
 8007130:	428a      	cmp	r2, r1
 8007132:	d100      	bne.n	8007136 <memmove+0x2a>
 8007134:	bd10      	pop	{r4, pc}
 8007136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800713a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800713e:	e7f7      	b.n	8007130 <memmove+0x24>

08007140 <_free_r>:
 8007140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007142:	2900      	cmp	r1, #0
 8007144:	d044      	beq.n	80071d0 <_free_r+0x90>
 8007146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800714a:	9001      	str	r0, [sp, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f1a1 0404 	sub.w	r4, r1, #4
 8007152:	bfb8      	it	lt
 8007154:	18e4      	addlt	r4, r4, r3
 8007156:	f000 f913 	bl	8007380 <__malloc_lock>
 800715a:	4a1e      	ldr	r2, [pc, #120]	; (80071d4 <_free_r+0x94>)
 800715c:	9801      	ldr	r0, [sp, #4]
 800715e:	6813      	ldr	r3, [r2, #0]
 8007160:	b933      	cbnz	r3, 8007170 <_free_r+0x30>
 8007162:	6063      	str	r3, [r4, #4]
 8007164:	6014      	str	r4, [r2, #0]
 8007166:	b003      	add	sp, #12
 8007168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800716c:	f000 b90e 	b.w	800738c <__malloc_unlock>
 8007170:	42a3      	cmp	r3, r4
 8007172:	d908      	bls.n	8007186 <_free_r+0x46>
 8007174:	6825      	ldr	r5, [r4, #0]
 8007176:	1961      	adds	r1, r4, r5
 8007178:	428b      	cmp	r3, r1
 800717a:	bf01      	itttt	eq
 800717c:	6819      	ldreq	r1, [r3, #0]
 800717e:	685b      	ldreq	r3, [r3, #4]
 8007180:	1949      	addeq	r1, r1, r5
 8007182:	6021      	streq	r1, [r4, #0]
 8007184:	e7ed      	b.n	8007162 <_free_r+0x22>
 8007186:	461a      	mov	r2, r3
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	b10b      	cbz	r3, 8007190 <_free_r+0x50>
 800718c:	42a3      	cmp	r3, r4
 800718e:	d9fa      	bls.n	8007186 <_free_r+0x46>
 8007190:	6811      	ldr	r1, [r2, #0]
 8007192:	1855      	adds	r5, r2, r1
 8007194:	42a5      	cmp	r5, r4
 8007196:	d10b      	bne.n	80071b0 <_free_r+0x70>
 8007198:	6824      	ldr	r4, [r4, #0]
 800719a:	4421      	add	r1, r4
 800719c:	1854      	adds	r4, r2, r1
 800719e:	42a3      	cmp	r3, r4
 80071a0:	6011      	str	r1, [r2, #0]
 80071a2:	d1e0      	bne.n	8007166 <_free_r+0x26>
 80071a4:	681c      	ldr	r4, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	6053      	str	r3, [r2, #4]
 80071aa:	4421      	add	r1, r4
 80071ac:	6011      	str	r1, [r2, #0]
 80071ae:	e7da      	b.n	8007166 <_free_r+0x26>
 80071b0:	d902      	bls.n	80071b8 <_free_r+0x78>
 80071b2:	230c      	movs	r3, #12
 80071b4:	6003      	str	r3, [r0, #0]
 80071b6:	e7d6      	b.n	8007166 <_free_r+0x26>
 80071b8:	6825      	ldr	r5, [r4, #0]
 80071ba:	1961      	adds	r1, r4, r5
 80071bc:	428b      	cmp	r3, r1
 80071be:	bf04      	itt	eq
 80071c0:	6819      	ldreq	r1, [r3, #0]
 80071c2:	685b      	ldreq	r3, [r3, #4]
 80071c4:	6063      	str	r3, [r4, #4]
 80071c6:	bf04      	itt	eq
 80071c8:	1949      	addeq	r1, r1, r5
 80071ca:	6021      	streq	r1, [r4, #0]
 80071cc:	6054      	str	r4, [r2, #4]
 80071ce:	e7ca      	b.n	8007166 <_free_r+0x26>
 80071d0:	b003      	add	sp, #12
 80071d2:	bd30      	pop	{r4, r5, pc}
 80071d4:	20000a14 	.word	0x20000a14

080071d8 <sbrk_aligned>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	4e0e      	ldr	r6, [pc, #56]	; (8007214 <sbrk_aligned+0x3c>)
 80071dc:	460c      	mov	r4, r1
 80071de:	6831      	ldr	r1, [r6, #0]
 80071e0:	4605      	mov	r5, r0
 80071e2:	b911      	cbnz	r1, 80071ea <sbrk_aligned+0x12>
 80071e4:	f000 f8bc 	bl	8007360 <_sbrk_r>
 80071e8:	6030      	str	r0, [r6, #0]
 80071ea:	4621      	mov	r1, r4
 80071ec:	4628      	mov	r0, r5
 80071ee:	f000 f8b7 	bl	8007360 <_sbrk_r>
 80071f2:	1c43      	adds	r3, r0, #1
 80071f4:	d00a      	beq.n	800720c <sbrk_aligned+0x34>
 80071f6:	1cc4      	adds	r4, r0, #3
 80071f8:	f024 0403 	bic.w	r4, r4, #3
 80071fc:	42a0      	cmp	r0, r4
 80071fe:	d007      	beq.n	8007210 <sbrk_aligned+0x38>
 8007200:	1a21      	subs	r1, r4, r0
 8007202:	4628      	mov	r0, r5
 8007204:	f000 f8ac 	bl	8007360 <_sbrk_r>
 8007208:	3001      	adds	r0, #1
 800720a:	d101      	bne.n	8007210 <sbrk_aligned+0x38>
 800720c:	f04f 34ff 	mov.w	r4, #4294967295
 8007210:	4620      	mov	r0, r4
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	20000a18 	.word	0x20000a18

08007218 <_malloc_r>:
 8007218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721c:	1ccd      	adds	r5, r1, #3
 800721e:	f025 0503 	bic.w	r5, r5, #3
 8007222:	3508      	adds	r5, #8
 8007224:	2d0c      	cmp	r5, #12
 8007226:	bf38      	it	cc
 8007228:	250c      	movcc	r5, #12
 800722a:	2d00      	cmp	r5, #0
 800722c:	4607      	mov	r7, r0
 800722e:	db01      	blt.n	8007234 <_malloc_r+0x1c>
 8007230:	42a9      	cmp	r1, r5
 8007232:	d905      	bls.n	8007240 <_malloc_r+0x28>
 8007234:	230c      	movs	r3, #12
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	2600      	movs	r6, #0
 800723a:	4630      	mov	r0, r6
 800723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007240:	4e2e      	ldr	r6, [pc, #184]	; (80072fc <_malloc_r+0xe4>)
 8007242:	f000 f89d 	bl	8007380 <__malloc_lock>
 8007246:	6833      	ldr	r3, [r6, #0]
 8007248:	461c      	mov	r4, r3
 800724a:	bb34      	cbnz	r4, 800729a <_malloc_r+0x82>
 800724c:	4629      	mov	r1, r5
 800724e:	4638      	mov	r0, r7
 8007250:	f7ff ffc2 	bl	80071d8 <sbrk_aligned>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	4604      	mov	r4, r0
 8007258:	d14d      	bne.n	80072f6 <_malloc_r+0xde>
 800725a:	6834      	ldr	r4, [r6, #0]
 800725c:	4626      	mov	r6, r4
 800725e:	2e00      	cmp	r6, #0
 8007260:	d140      	bne.n	80072e4 <_malloc_r+0xcc>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	4631      	mov	r1, r6
 8007266:	4638      	mov	r0, r7
 8007268:	eb04 0803 	add.w	r8, r4, r3
 800726c:	f000 f878 	bl	8007360 <_sbrk_r>
 8007270:	4580      	cmp	r8, r0
 8007272:	d13a      	bne.n	80072ea <_malloc_r+0xd2>
 8007274:	6821      	ldr	r1, [r4, #0]
 8007276:	3503      	adds	r5, #3
 8007278:	1a6d      	subs	r5, r5, r1
 800727a:	f025 0503 	bic.w	r5, r5, #3
 800727e:	3508      	adds	r5, #8
 8007280:	2d0c      	cmp	r5, #12
 8007282:	bf38      	it	cc
 8007284:	250c      	movcc	r5, #12
 8007286:	4629      	mov	r1, r5
 8007288:	4638      	mov	r0, r7
 800728a:	f7ff ffa5 	bl	80071d8 <sbrk_aligned>
 800728e:	3001      	adds	r0, #1
 8007290:	d02b      	beq.n	80072ea <_malloc_r+0xd2>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	442b      	add	r3, r5
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	e00e      	b.n	80072b8 <_malloc_r+0xa0>
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	1b52      	subs	r2, r2, r5
 800729e:	d41e      	bmi.n	80072de <_malloc_r+0xc6>
 80072a0:	2a0b      	cmp	r2, #11
 80072a2:	d916      	bls.n	80072d2 <_malloc_r+0xba>
 80072a4:	1961      	adds	r1, r4, r5
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	6025      	str	r5, [r4, #0]
 80072aa:	bf18      	it	ne
 80072ac:	6059      	strne	r1, [r3, #4]
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	bf08      	it	eq
 80072b2:	6031      	streq	r1, [r6, #0]
 80072b4:	5162      	str	r2, [r4, r5]
 80072b6:	604b      	str	r3, [r1, #4]
 80072b8:	4638      	mov	r0, r7
 80072ba:	f104 060b 	add.w	r6, r4, #11
 80072be:	f000 f865 	bl	800738c <__malloc_unlock>
 80072c2:	f026 0607 	bic.w	r6, r6, #7
 80072c6:	1d23      	adds	r3, r4, #4
 80072c8:	1af2      	subs	r2, r6, r3
 80072ca:	d0b6      	beq.n	800723a <_malloc_r+0x22>
 80072cc:	1b9b      	subs	r3, r3, r6
 80072ce:	50a3      	str	r3, [r4, r2]
 80072d0:	e7b3      	b.n	800723a <_malloc_r+0x22>
 80072d2:	6862      	ldr	r2, [r4, #4]
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	bf0c      	ite	eq
 80072d8:	6032      	streq	r2, [r6, #0]
 80072da:	605a      	strne	r2, [r3, #4]
 80072dc:	e7ec      	b.n	80072b8 <_malloc_r+0xa0>
 80072de:	4623      	mov	r3, r4
 80072e0:	6864      	ldr	r4, [r4, #4]
 80072e2:	e7b2      	b.n	800724a <_malloc_r+0x32>
 80072e4:	4634      	mov	r4, r6
 80072e6:	6876      	ldr	r6, [r6, #4]
 80072e8:	e7b9      	b.n	800725e <_malloc_r+0x46>
 80072ea:	230c      	movs	r3, #12
 80072ec:	603b      	str	r3, [r7, #0]
 80072ee:	4638      	mov	r0, r7
 80072f0:	f000 f84c 	bl	800738c <__malloc_unlock>
 80072f4:	e7a1      	b.n	800723a <_malloc_r+0x22>
 80072f6:	6025      	str	r5, [r4, #0]
 80072f8:	e7de      	b.n	80072b8 <_malloc_r+0xa0>
 80072fa:	bf00      	nop
 80072fc:	20000a14 	.word	0x20000a14

08007300 <_realloc_r>:
 8007300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007304:	4680      	mov	r8, r0
 8007306:	4614      	mov	r4, r2
 8007308:	460e      	mov	r6, r1
 800730a:	b921      	cbnz	r1, 8007316 <_realloc_r+0x16>
 800730c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007310:	4611      	mov	r1, r2
 8007312:	f7ff bf81 	b.w	8007218 <_malloc_r>
 8007316:	b92a      	cbnz	r2, 8007324 <_realloc_r+0x24>
 8007318:	f7ff ff12 	bl	8007140 <_free_r>
 800731c:	4625      	mov	r5, r4
 800731e:	4628      	mov	r0, r5
 8007320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007324:	f000 f838 	bl	8007398 <_malloc_usable_size_r>
 8007328:	4284      	cmp	r4, r0
 800732a:	4607      	mov	r7, r0
 800732c:	d802      	bhi.n	8007334 <_realloc_r+0x34>
 800732e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007332:	d812      	bhi.n	800735a <_realloc_r+0x5a>
 8007334:	4621      	mov	r1, r4
 8007336:	4640      	mov	r0, r8
 8007338:	f7ff ff6e 	bl	8007218 <_malloc_r>
 800733c:	4605      	mov	r5, r0
 800733e:	2800      	cmp	r0, #0
 8007340:	d0ed      	beq.n	800731e <_realloc_r+0x1e>
 8007342:	42bc      	cmp	r4, r7
 8007344:	4622      	mov	r2, r4
 8007346:	4631      	mov	r1, r6
 8007348:	bf28      	it	cs
 800734a:	463a      	movcs	r2, r7
 800734c:	f7ff fed0 	bl	80070f0 <memcpy>
 8007350:	4631      	mov	r1, r6
 8007352:	4640      	mov	r0, r8
 8007354:	f7ff fef4 	bl	8007140 <_free_r>
 8007358:	e7e1      	b.n	800731e <_realloc_r+0x1e>
 800735a:	4635      	mov	r5, r6
 800735c:	e7df      	b.n	800731e <_realloc_r+0x1e>
	...

08007360 <_sbrk_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d06      	ldr	r5, [pc, #24]	; (800737c <_sbrk_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f7fa f9fe 	bl	800176c <_sbrk>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_sbrk_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_sbrk_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	20000a1c 	.word	0x20000a1c

08007380 <__malloc_lock>:
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__malloc_lock+0x8>)
 8007382:	f000 b811 	b.w	80073a8 <__retarget_lock_acquire_recursive>
 8007386:	bf00      	nop
 8007388:	20000a20 	.word	0x20000a20

0800738c <__malloc_unlock>:
 800738c:	4801      	ldr	r0, [pc, #4]	; (8007394 <__malloc_unlock+0x8>)
 800738e:	f000 b80c 	b.w	80073aa <__retarget_lock_release_recursive>
 8007392:	bf00      	nop
 8007394:	20000a20 	.word	0x20000a20

08007398 <_malloc_usable_size_r>:
 8007398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739c:	1f18      	subs	r0, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfbc      	itt	lt
 80073a2:	580b      	ldrlt	r3, [r1, r0]
 80073a4:	18c0      	addlt	r0, r0, r3
 80073a6:	4770      	bx	lr

080073a8 <__retarget_lock_acquire_recursive>:
 80073a8:	4770      	bx	lr

080073aa <__retarget_lock_release_recursive>:
 80073aa:	4770      	bx	lr

080073ac <_init>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr

080073b8 <_fini>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr
