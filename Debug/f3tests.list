
f3tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000449c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800464c  0800464c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004654  08004654  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800465c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000024  08004680  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004680  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b0b  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b3  00000000  00000000  00030b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00032f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00033cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001724e  00000000  00000000  00034990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb86  00000000  00000000  0004bbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e688  00000000  00000000  0005b764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9dec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad8  00000000  00000000  000e9e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800461c 	.word	0x0800461c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	0800461c 	.word	0x0800461c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b974 	b.w	8000e24 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9d08      	ldr	r5, [sp, #32]
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	468e      	mov	lr, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d14d      	bne.n	8000bfe <__udivmoddi4+0xaa>
 8000b62:	428a      	cmp	r2, r1
 8000b64:	4694      	mov	ip, r2
 8000b66:	d969      	bls.n	8000c3c <__udivmoddi4+0xe8>
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	b152      	cbz	r2, 8000b84 <__udivmoddi4+0x30>
 8000b6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b72:	f1c2 0120 	rsb	r1, r2, #32
 8000b76:	fa20 f101 	lsr.w	r1, r0, r1
 8000b7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b82:	4094      	lsls	r4, r2
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	0c21      	lsrs	r1, r4, #16
 8000b8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b8e:	fa1f f78c 	uxth.w	r7, ip
 8000b92:	fb08 e316 	mls	r3, r8, r6, lr
 8000b96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b9a:	fb06 f107 	mul.w	r1, r6, r7
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	d90a      	bls.n	8000bb8 <__udivmoddi4+0x64>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000baa:	f080 811f 	bcs.w	8000dec <__udivmoddi4+0x298>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 811c 	bls.w	8000dec <__udivmoddi4+0x298>
 8000bb4:	3e02      	subs	r6, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb00 f707 	mul.w	r7, r0, r7
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x92>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd8:	f080 810a 	bcs.w	8000df0 <__udivmoddi4+0x29c>
 8000bdc:	42a7      	cmp	r7, r4
 8000bde:	f240 8107 	bls.w	8000df0 <__udivmoddi4+0x29c>
 8000be2:	4464      	add	r4, ip
 8000be4:	3802      	subs	r0, #2
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	1be4      	subs	r4, r4, r7
 8000bec:	2600      	movs	r6, #0
 8000bee:	b11d      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bf0:	40d4      	lsrs	r4, r2
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0xc2>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	f000 80ef 	beq.w	8000de6 <__udivmoddi4+0x292>
 8000c08:	2600      	movs	r6, #0
 8000c0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0e:	4630      	mov	r0, r6
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	fab3 f683 	clz	r6, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d14a      	bne.n	8000cb4 <__udivmoddi4+0x160>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xd4>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 80f9 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	469e      	mov	lr, r3
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d0e0      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c3a:	e7dd      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c3c:	b902      	cbnz	r2, 8000c40 <__udivmoddi4+0xec>
 8000c3e:	deff      	udf	#255	; 0xff
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	f040 8092 	bne.w	8000d6e <__udivmoddi4+0x21a>
 8000c4a:	eba1 010c 	sub.w	r1, r1, ip
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2601      	movs	r6, #1
 8000c58:	0c20      	lsrs	r0, r4, #16
 8000c5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c66:	fb0e f003 	mul.w	r0, lr, r3
 8000c6a:	4288      	cmp	r0, r1
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x12c>
 8000c6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x12a>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000c7e:	4643      	mov	r3, r8
 8000c80:	1a09      	subs	r1, r1, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c88:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x156>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x154>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2ca>
 8000ca8:	4608      	mov	r0, r1
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cb2:	e79c      	b.n	8000bee <__udivmoddi4+0x9a>
 8000cb4:	f1c6 0720 	rsb	r7, r6, #32
 8000cb8:	40b3      	lsls	r3, r6
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cca:	431c      	orrs	r4, r3
 8000ccc:	40f9      	lsrs	r1, r7
 8000cce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cda:	0c20      	lsrs	r0, r4, #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ce4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cec:	4288      	cmp	r0, r1
 8000cee:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2bc>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2bc>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	1a09      	subs	r1, r1, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d14:	fb09 1110 	mls	r1, r9, r0, r1
 8000d18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d20:	458e      	cmp	lr, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1e2>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2b4>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2b4>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d3e:	eba1 010e 	sub.w	r1, r1, lr
 8000d42:	42a1      	cmp	r1, r4
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46a6      	mov	lr, r4
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x2a4>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x2a0>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x212>
 8000d4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d52:	eb61 010e 	sbc.w	r1, r1, lr
 8000d56:	fa01 f707 	lsl.w	r7, r1, r7
 8000d5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d5e:	40f1      	lsrs	r1, r6
 8000d60:	431f      	orrs	r7, r3
 8000d62:	e9c5 7100 	strd	r7, r1, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	40d8      	lsrs	r0, r3
 8000d74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d78:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4301      	orrs	r1, r0
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d90:	0c0b      	lsrs	r3, r1, #16
 8000d92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d96:	fb00 f60e 	mul.w	r6, r0, lr
 8000d9a:	429e      	cmp	r6, r3
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x260>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b8>
 8000dac:	429e      	cmp	r6, r3
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b8>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	1b9b      	subs	r3, r3, r6
 8000db6:	b289      	uxth	r1, r1
 8000db8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x28a>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2b0>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2b0>
 8000dda:	3e02      	subs	r6, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	1ac9      	subs	r1, r1, r3
 8000de0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0x104>
 8000de6:	462e      	mov	r6, r5
 8000de8:	4628      	mov	r0, r5
 8000dea:	e705      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000dec:	4606      	mov	r6, r0
 8000dee:	e6e3      	b.n	8000bb8 <__udivmoddi4+0x64>
 8000df0:	4618      	mov	r0, r3
 8000df2:	e6f8      	b.n	8000be6 <__udivmoddi4+0x92>
 8000df4:	454b      	cmp	r3, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f8>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e00:	3801      	subs	r0, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f8>
 8000e04:	4646      	mov	r6, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x28a>
 8000e08:	4620      	mov	r0, r4
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1e2>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x260>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b8>
 8000e14:	3b02      	subs	r3, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x12c>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e709      	b.n	8000c32 <__udivmoddi4+0xde>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x156>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <initEncoder>:
#define MEGA 1000000.0
#define PERIOD SAMPLE_PERIOD/MEGA
#define FREQ MEGA/SAMPLE_PERIOD
#define GEAR_BOX 1/45.0
#define COUNT_PER_REV 64.0 * GEAR_BOX
void initEncoder(Encoder * enc, TIM_HandleTypeDef * intTIM, TIM_HandleTypeDef * InputTIM,PID_Params pidParams){
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
	enc->INT_Timer = intTIM;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
	enc->encoderInputTimer = InputTIM;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
	enc->distance = 0;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
	enc->lastCounterValue =0;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
	enc->lastMeasurement =0;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
	enc->sampleCount =0;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
	enc->sampleRate= 10;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	220a      	movs	r2, #10
 8000e60:	611a      	str	r2, [r3, #16]
	enc->sampleSum =0;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
	enc->speedController = pidParams.uPID;
 8000e68:	6a3a      	ldr	r2, [r7, #32]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	629a      	str	r2, [r3, #40]	; 0x28
	enc->desiredSpeed = pidParams.Setpoint;
 8000e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	621a      	str	r2, [r3, #32]
	enc->realSpeed = pidParams.Input;
 8000e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	61da      	str	r2, [r3, #28]
	enc->motorSpeed = pidParams.Output;
 8000e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
	PID(enc->speedController,enc->realSpeed , enc->motorSpeed, enc->desiredSpeed, pidParams.Kp,pidParams.Ki, pidParams.Kd, pidParams.POn, pidParams.ControllerDirection);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	69d9      	ldr	r1, [r3, #28]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6a1d      	ldr	r5, [r3, #32]
 8000e90:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e94:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8000e98:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8000e9c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ea0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8000ea4:	9201      	str	r2, [sp, #4]
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	eeb0 2a45 	vmov.f32	s4, s10
 8000eac:	eef0 2a65 	vmov.f32	s5, s11
 8000eb0:	eeb0 1a46 	vmov.f32	s2, s12
 8000eb4:	eef0 1a66 	vmov.f32	s3, s13
 8000eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8000ebc:	eef0 0a67 	vmov.f32	s1, s15
 8000ec0:	462b      	mov	r3, r5
 8000ec2:	4622      	mov	r2, r4
 8000ec4:	f000 fe9c 	bl	8001c00 <PID>
	PID_SetMode(enc->speedController, _PID_MODE_AUTOMATIC);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fee2 	bl	8001c98 <PID_SetMode>
	PID_SetSampleTime(enc->speedController,500);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 f84f 	bl	8001f80 <PID_SetSampleTime>
	PID_SetOutputLimits(enc->speedController, 0, 90);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee6:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8000f00 <initEncoder+0xd8>
 8000eea:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8000f08 <initEncoder+0xe0>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fef0 	bl	8001cd4 <PID_SetOutputLimits>


}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bdb0      	pop	{r4, r5, r7, pc}
 8000efc:	f3af 8000 	nop.w
 8000f00:	00000000 	.word	0x00000000
 8000f04:	40568000 	.word	0x40568000
	...

08000f10 <getCounter>:
int getCounter(Encoder * enc){
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	return  -1*__HAL_TIM_GET_COUNTER(enc->encoderInputTimer);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	425b      	negs	r3, r3

}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <Encoder_IT_Handler>:
//	int distance = angleRad * WHEEL_RADIUS; //cm
	float distance = (counterDiff * PI * wheel_radius) / ticks_per_rev;
	enc->lastCounterValue = current;
	return distance;
}
void Encoder_IT_Handler(Encoder * enc){
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
	__disable_irq();
	int current = getCounter(enc);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ffe7 	bl	8000f10 <getCounter>
 8000f42:	6178      	str	r0, [r7, #20]
	enc->counterValue = current;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	609a      	str	r2, [r3, #8]
	int diff = (current - enc->lastCounterValue);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	613b      	str	r3, [r7, #16]
//	float rps = (diff) / (COUNT_PER_REV);
//	float revCount = rps * PERIOD;
	float revCount = diff / COUNT_PER_REV;
 8000f54:	6938      	ldr	r0, [r7, #16]
 8000f56:	f7ff fa91 	bl	800047c <__aeabi_i2d>
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b36      	ldr	r3, [pc, #216]	; (8001038 <Encoder_IT_Handler+0x108>)
 8000f60:	f7ff fc20 	bl	80007a4 <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b32      	ldr	r3, [pc, #200]	; (800103c <Encoder_IT_Handler+0x10c>)
 8000f72:	f7ff fc17 	bl	80007a4 <__aeabi_ddiv>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fd81 	bl	8000a84 <__aeabi_d2f>
 8000f82:	4603      	mov	r3, r0
 8000f84:	60fb      	str	r3, [r7, #12]
	enc->distance = revCount *2 * PI * WHEEL_RADIUS_CM; //cm
 8000f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f8e:	ee17 0a90 	vmov	r0, s15
 8000f92:	f7ff fa85 	bl	80004a0 <__aeabi_f2d>
 8000f96:	a322      	add	r3, pc, #136	; (adr r3, 8001020 <Encoder_IT_Handler+0xf0>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff fad8 	bl	8000550 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <Encoder_IT_Handler+0x110>)
 8000fae:	f7ff facf 	bl	8000550 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	a31b      	add	r3, pc, #108	; (adr r3, 8001028 <Encoder_IT_Handler+0xf8>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fac6 	bl	8000550 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fd5a 	bl	8000a84 <__aeabi_d2f>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	605a      	str	r2, [r3, #4]
	*enc->realSpeed = enc->distance * FREQ;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa60 	bl	80004a0 <__aeabi_f2d>
 8000fe0:	a313      	add	r3, pc, #76	; (adr r3, 8001030 <Encoder_IT_Handler+0x100>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fab3 	bl	8000550 <__aeabi_dmul>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69dc      	ldr	r4, [r3, #28]
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <Encoder_IT_Handler+0x114>)
 8000ffc:	f7ff fbd2 	bl	80007a4 <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	e9c4 2300 	strd	r2, r3, [r4]
	enc->lastCounterValue = current;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800100e:	b662      	cpsie	i
}
 8001010:	bf00      	nop
//		return;
//	}
//	 enc->currentSpeed= enc->sampleSum / enc->sampleRate;
//	 enc->sampleSum =0;
//	 enc->sampleCount =0;
}
 8001012:	bf00      	nop
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	51eb851f 	.word	0x51eb851f
 8001024:	40091eb8 	.word	0x40091eb8
 8001028:	851eb852 	.word	0x851eb852
 800102c:	400451eb 	.word	0x400451eb
 8001030:	00000000 	.word	0x00000000
 8001034:	412e8480 	.word	0x412e8480
 8001038:	40500000 	.word	0x40500000
 800103c:	40468000 	.word	0x40468000
 8001040:	40080000 	.word	0x40080000
 8001044:	408f4000 	.word	0x408f4000

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800104e:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001050:	f001 fabc 	bl	80025cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001054:	f000 f9b0 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001058:	f000 fbca 	bl	80017f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800105c:	f000 fb9e 	bl	800179c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001060:	f000 fab6 	bl	80015d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001064:	f000 fb00 	bl	8001668 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001068:	f000 fb4a 	bl	8001700 <MX_TIM5_Init>
  MX_TIM2_Init();
 800106c:	f000 fa5c 	bl	8001528 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001070:	f000 fa02 	bl	8001478 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
	  PIDPON_TypeDef POn = _PID_P_ON_E;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3327 	strb.w	r3, [r7, #807]	; 0x327
	  PIDCD_TypeDef ControllerDirection = _PID_CD_DIRECT;
 800107a:	2300      	movs	r3, #0
 800107c:	f887 3326 	strb.w	r3, [r7, #806]	; 0x326
	PID_TypeDef EncoderA_PID;
	double EncoderA_Out =0;
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
	double EncoderA_In =0;
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
	double EncoderA_SS=0;
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
	PID_Params EncoderA_PID_Params = {
 80010a4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80010a8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80010ac:	4bb0      	ldr	r3, [pc, #704]	; (8001370 <main+0x328>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
 80010b6:	4baf      	ldr	r3, [pc, #700]	; (8001374 <main+0x32c>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 80010c0:	4bad      	ldr	r3, [pc, #692]	; (8001378 <main+0x330>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
 80010ca:	f897 3327 	ldrb.w	r3, [r7, #807]	; 0x327
 80010ce:	f887 3288 	strb.w	r3, [r7, #648]	; 0x288
 80010d2:	f897 3326 	ldrb.w	r3, [r7, #806]	; 0x326
 80010d6:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
 80010da:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80010de:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80010e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80010e6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80010ea:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80010ee:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	  .ControllerDirection = ControllerDirection,
	  .Input = &EncoderA_In,
	  .Output = &EncoderA_Out,
	  .Setpoint = &EncoderA_SS
  };
	double EncoderB_Out =0;
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
	double EncoderB_In =0;
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
	double EncoderB_SS=0;
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
	PID_TypeDef EncoderB_PID;
	PID_Params EncoderB_PID_Params = {
 8001116:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800111a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800111e:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	4b92      	ldr	r3, [pc, #584]	; (8001370 <main+0x328>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f507 714a 	add.w	r1, r7, #808	; 0x328
 800112e:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8001132:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001136:	4b8f      	ldr	r3, [pc, #572]	; (8001374 <main+0x32c>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f507 714a 	add.w	r1, r7, #808	; 0x328
 8001140:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8001144:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001148:	4b8b      	ldr	r3, [pc, #556]	; (8001378 <main+0x330>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f507 714a 	add.w	r1, r7, #808	; 0x328
 8001152:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8001156:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800115a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800115e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001162:	f897 2327 	ldrb.w	r2, [r7, #807]	; 0x327
 8001166:	f883 2020 	strb.w	r2, [r3, #32]
 800116a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800116e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001172:	f897 2326 	ldrb.w	r2, [r7, #806]	; 0x326
 8001176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800117a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800117e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001182:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
 8001188:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800118c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001190:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
 8001196:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800119a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800119e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
	  .ControllerDirection = ControllerDirection,
	  .Input = &EncoderB_In,
	  .Output = &EncoderB_Out,
	  .Setpoint = &EncoderB_SS
  };
	initEncoder(&EncoderA, &htim5, &htim2,EncoderA_PID_Params);
 80011a4:	466d      	mov	r5, sp
 80011a6:	f507 741a 	add.w	r4, r7, #616	; 0x268
 80011aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011ba:	4a70      	ldr	r2, [pc, #448]	; (800137c <main+0x334>)
 80011bc:	4970      	ldr	r1, [pc, #448]	; (8001380 <main+0x338>)
 80011be:	4871      	ldr	r0, [pc, #452]	; (8001384 <main+0x33c>)
 80011c0:	f7ff fe32 	bl	8000e28 <initEncoder>
	initEncoder(&EncoderB, &htim5, &htim1, EncoderB_PID_Params);
 80011c4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80011c8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80011cc:	466c      	mov	r4, sp
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011e0:	4a69      	ldr	r2, [pc, #420]	; (8001388 <main+0x340>)
 80011e2:	4967      	ldr	r1, [pc, #412]	; (8001380 <main+0x338>)
 80011e4:	4869      	ldr	r0, [pc, #420]	; (800138c <main+0x344>)
 80011e6:	f7ff fe1f 	bl	8000e28 <initEncoder>
	initVirtualTimer(&MotorATimer, driverSpeed, baseDutyCycle,
 80011ea:	4b69      	ldr	r3, [pc, #420]	; (8001390 <main+0x348>)
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f2:	4a68      	ldr	r2, [pc, #416]	; (8001394 <main+0x34c>)
 80011f4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80011f8:	2164      	movs	r1, #100	; 0x64
 80011fa:	4867      	ldr	r0, [pc, #412]	; (8001398 <main+0x350>)
 80011fc:	f001 f914 	bl	8002428 <initVirtualTimer>
	MotorAPWM_GPIO_Port, MotorAPWM_Pin, &htim3);
	initVirtualTimer(&MotorBTimer, driverSpeed, baseDutyCycle,
 8001200:	4b66      	ldr	r3, [pc, #408]	; (800139c <main+0x354>)
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2304      	movs	r3, #4
 8001206:	4a63      	ldr	r2, [pc, #396]	; (8001394 <main+0x34c>)
 8001208:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	4864      	ldr	r0, [pc, #400]	; (80013a0 <main+0x358>)
 8001210:	f001 f90a 	bl	8002428 <initVirtualTimer>
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
	MotorBPWMOutput_GPIO_Port, MotorBPWMOutput_Pin, &htim4);
	__disable_irq();
	HAL_TIM_Encoder_Start_IT(EncoderA.encoderInputTimer, TIM_CHANNEL_ALL);
 8001218:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <main+0x33c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	213c      	movs	r1, #60	; 0x3c
 800121e:	4618      	mov	r0, r3
 8001220:	f002 faa6 	bl	8003770 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(EncoderB.encoderInputTimer,TIM_CHANNEL_ALL);
 8001224:	4b59      	ldr	r3, [pc, #356]	; (800138c <main+0x344>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	213c      	movs	r1, #60	; 0x3c
 800122a:	4618      	mov	r0, r3
 800122c:	f002 faa0 	bl	8003770 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(EncoderB.INT_Timer);
 8001230:	4b56      	ldr	r3, [pc, #344]	; (800138c <main+0x344>)
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	4618      	mov	r0, r3
 8001236:	f002 f993 	bl	8003560 <HAL_TIM_Base_Start_IT>
	start_IT(&MotorATimer);
 800123a:	4857      	ldr	r0, [pc, #348]	; (8001398 <main+0x350>)
 800123c:	f001 f98f 	bl	800255e <start_IT>
	start_IT(&MotorBTimer);
 8001240:	4857      	ldr	r0, [pc, #348]	; (80013a0 <main+0x358>)
 8001242:	f001 f98c 	bl	800255e <start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8001246:	b662      	cpsie	i
}
 8001248:	bf00      	nop
	__enable_irq();

	setOverallSpeed(&MD, 0);
 800124a:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001360 <main+0x318>
 800124e:	4855      	ldr	r0, [pc, #340]	; (80013a4 <main+0x35c>)
 8001250:	f000 fc6a 	bl	8001b28 <setOverallSpeed>
	double xdist = 0;
 8001254:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	e9c1 2300 	strd	r2, r3, [r1]
	double ydist = 0;
 8001266:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e941 2302 	strd	r2, r3, [r1, #-8]
	double xout = 0;
 8001278:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c1 2300 	strd	r2, r3, [r1]
	double yout = 0;
 800128a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	e941 2302 	strd	r2, r3, [r1, #-8]
	double steadyStateY = 90;
 800129c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b40      	ldr	r3, [pc, #256]	; (80013a8 <main+0x360>)
 80012a8:	e9c1 2300 	strd	r2, r3, [r1]
	double steadyStateX = 0;
 80012ac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	e941 2302 	strd	r2, r3, [r1, #-8]
	double V_l, V_r;
	PID_TypeDef xctrl;
	PID_TypeDef yctrl;
	MD.encA =&EncoderA;
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <main+0x35c>)
 80012c0:	4a30      	ldr	r2, [pc, #192]	; (8001384 <main+0x33c>)
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
	MD.encB =&EncoderB;
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <main+0x35c>)
 80012c6:	4a31      	ldr	r2, [pc, #196]	; (800138c <main+0x344>)
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
	MotorDriverInit(&MD, &xdist, &ydist, &xout, &yout, &steadyStateX,
 80012ca:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80012ce:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80012d2:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 80012d6:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <main+0x358>)
 80012d8:	9306      	str	r3, [sp, #24]
 80012da:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <main+0x350>)
 80012dc:	9305      	str	r3, [sp, #20]
 80012de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012e2:	9304      	str	r3, [sp, #16]
 80012e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012e8:	9303      	str	r3, [sp, #12]
 80012ea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4603      	mov	r3, r0
 80012fe:	4829      	ldr	r0, [pc, #164]	; (80013a4 <main+0x35c>)
 8001300:	f000 fb32 	bl	8001968 <MotorDriverInit>
			&steadyStateY, &xctrl, &yctrl, &MotorATimer, &MotorBTimer);

	fastStop(&MD);
 8001304:	4827      	ldr	r0, [pc, #156]	; (80013a4 <main+0x35c>)
 8001306:	f000 fbcf 	bl	8001aa8 <fastStop>
	char buffer[RPI_BUFFER_SIZE];
	RPIPacket packet;
	UARTClient piUART;
	piUART.port = &huart1;
 800130a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800130e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8001312:	4a26      	ldr	r2, [pc, #152]	; (80013ac <main+0x364>)
 8001314:	601a      	str	r2, [r3, #0]
	RPIClientInit(&pi, buffer, &packet, &piUART);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	f107 0214 	add.w	r2, r7, #20
 800131e:	f107 0120 	add.w	r1, r7, #32
 8001322:	4823      	ldr	r0, [pc, #140]	; (80013b0 <main+0x368>)
 8001324:	f000 fe67 	bl	8001ff6 <RPIClientInit>
	int PIDUpdateRet = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
		//		Parser_TEST(&pi);
//		DATA_TEST(&pi);
//		setOverallSpeed(&MD, 75);
//		Acceleration_TEST(&MD);
//		setOverallSpeed(&MD,50);
		*MD.encA->desiredSpeed =50;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <main+0x35c>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	6a19      	ldr	r1, [r3, #32]
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <main+0x36c>)
 800133a:	e9c1 2300 	strd	r2, r3, [r1]
		*MD.encB->desiredSpeed =50;
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <main+0x35c>)
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	6a19      	ldr	r1, [r3, #32]
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <main+0x36c>)
 800134a:	e9c1 2300 	strd	r2, r3, [r1]
		goForward(&MD);
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <main+0x35c>)
 8001350:	f000 fbca 	bl	8001ae8 <goForward>
//		while(1){};
		while(1){
//			*MD.enc->desiredSpeed =100;
			setOverallSpeed(&MD, 50);
 8001354:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001368 <main+0x320>
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <main+0x35c>)
 800135a:	f000 fbe5 	bl	8001b28 <setOverallSpeed>
 800135e:	e7f9      	b.n	8001354 <main+0x30c>
	...
 800136c:	40490000 	.word	0x40490000
 8001370:	20000000 	.word	0x20000000
 8001374:	20000008 	.word	0x20000008
 8001378:	20000010 	.word	0x20000010
 800137c:	20000088 	.word	0x20000088
 8001380:	20000160 	.word	0x20000160
 8001384:	2000022c 	.word	0x2000022c
 8001388:	20000040 	.word	0x20000040
 800138c:	20000260 	.word	0x20000260
 8001390:	200000d0 	.word	0x200000d0
 8001394:	40020000 	.word	0x40020000
 8001398:	200001ec 	.word	0x200001ec
 800139c:	20000118 	.word	0x20000118
 80013a0:	2000020c 	.word	0x2000020c
 80013a4:	20000294 	.word	0x20000294
 80013a8:	40568000 	.word	0x40568000
 80013ac:	200001a8 	.word	0x200001a8
 80013b0:	200002c0 	.word	0x200002c0
 80013b4:	40490000 	.word	0x40490000

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2230      	movs	r2, #48	; 0x30
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 f920 	bl	800460c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <SystemClock_Config+0xb8>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a22      	ldr	r2, [pc, #136]	; (8001470 <SystemClock_Config+0xb8>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <SystemClock_Config+0xb8>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <SystemClock_Config+0xbc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001404:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <SystemClock_Config+0xbc>)
 8001406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <SystemClock_Config+0xbc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001418:	2302      	movs	r3, #2
 800141a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141c:	2301      	movs	r3, #1
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001420:	2310      	movs	r3, #16
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fbef 	bl	8002c10 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001438:	f000 fa90 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fe51 	bl	8003100 <HAL_RCC_ClockConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001464:	f000 fa7a 	bl	800195c <Error_Handler>
  }
}
 8001468:	bf00      	nop
 800146a:	3750      	adds	r7, #80	; 0x50
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	40007000 	.word	0x40007000

08001478 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	2224      	movs	r2, #36	; 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f003 f8c0 	bl	800460c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <MX_TIM1_Init+0xa8>)
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <MX_TIM1_Init+0xac>)
 8001498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_TIM1_Init+0xa8>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_TIM1_Init+0xa8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_TIM1_Init+0xa8>)
 80014a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_TIM1_Init+0xa8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_TIM1_Init+0xa8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_TIM1_Init+0xa8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014c0:	2303      	movs	r3, #3
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014d0:	230a      	movs	r3, #10
 80014d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014d8:	2301      	movs	r3, #1
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80014e0:	230a      	movs	r3, #10
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_TIM1_Init+0xa8>)
 80014ec:	f002 f89a 	bl	8003624 <HAL_TIM_Encoder_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014f6:	f000 fa31 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_TIM1_Init+0xa8>)
 8001508:	f002 fd18 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001512:	f000 fa23 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	; 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000040 	.word	0x20000040
 8001524:	40010000 	.word	0x40010000

08001528 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	; 0x30
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	2224      	movs	r2, #36	; 0x24
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f003 f868 	bl	800460c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_TIM2_Init+0xa4>)
 8001546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_TIM2_Init+0xa4>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_TIM2_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_TIM2_Init+0xa4>)
 800155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_TIM2_Init+0xa4>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_TIM2_Init+0xa4>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800156c:	2303      	movs	r3, #3
 800156e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001574:	2301      	movs	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800157c:	230a      	movs	r3, #10
 800157e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001584:	2301      	movs	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800158c:	230a      	movs	r3, #10
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_TIM2_Init+0xa4>)
 8001598:	f002 f844 	bl	8003624 <HAL_TIM_Encoder_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015a2:	f000 f9db 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_TIM2_Init+0xa4>)
 80015b4:	f002 fcc2 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015be:	f000 f9cd 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000088 	.word	0x20000088

080015d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_TIM3_Init+0x90>)
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <MX_TIM3_Init+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_TIM3_Init+0x90>)
 80015f4:	220f      	movs	r2, #15
 80015f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_TIM3_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = driverSpeed -1;
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_TIM3_Init+0x90>)
 8001600:	2263      	movs	r2, #99	; 0x63
 8001602:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_TIM3_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_TIM3_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001610:	4813      	ldr	r0, [pc, #76]	; (8001660 <MX_TIM3_Init+0x90>)
 8001612:	f001 ff55 	bl	80034c0 <HAL_TIM_Base_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800161c:	f000 f99e 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <MX_TIM3_Init+0x90>)
 800162e:	f002 fa55 	bl	8003adc <HAL_TIM_ConfigClockSource>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001638:	f000 f990 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_TIM3_Init+0x90>)
 800164a:	f002 fc77 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001654:	f000 f982 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200000d0 	.word	0x200000d0
 8001664:	40000400 	.word	0x40000400

08001668 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_TIM4_Init+0x90>)
 8001686:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <MX_TIM4_Init+0x94>)
 8001688:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_TIM4_Init+0x90>)
 800168c:	220f      	movs	r2, #15
 800168e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_TIM4_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = driverSpeed -1;
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_TIM4_Init+0x90>)
 8001698:	2263      	movs	r2, #99	; 0x63
 800169a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_TIM4_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_TIM4_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <MX_TIM4_Init+0x90>)
 80016aa:	f001 ff09 	bl	80034c0 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80016b4:	f000 f952 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_TIM4_Init+0x90>)
 80016c6:	f002 fa09 	bl	8003adc <HAL_TIM_ConfigClockSource>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80016d0:	f000 f944 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM4_Init+0x90>)
 80016e2:	f002 fc2b 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80016ec:	f000 f936 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000118 	.word	0x20000118
 80016fc:	40000800 	.word	0x40000800

08001700 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_TIM5_Init+0x94>)
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <MX_TIM5_Init+0x98>)
 8001720:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_TIM5_Init+0x94>)
 8001724:	220f      	movs	r2, #15
 8001726:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_TIM5_Init+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = SAMPLE_PERIOD-1;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_TIM5_Init+0x94>)
 8001730:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001734:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_TIM5_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_TIM5_Init+0x94>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001742:	4814      	ldr	r0, [pc, #80]	; (8001794 <MX_TIM5_Init+0x94>)
 8001744:	f001 febc 	bl	80034c0 <HAL_TIM_Base_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800174e:	f000 f905 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	4619      	mov	r1, r3
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_TIM5_Init+0x94>)
 8001760:	f002 f9bc 	bl	8003adc <HAL_TIM_ConfigClockSource>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800176a:	f000 f8f7 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001776:	463b      	mov	r3, r7
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <MX_TIM5_Init+0x94>)
 800177c:	f002 fbde 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001786:	f000 f8e9 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000160 	.word	0x20000160
 8001798:	40000c00 	.word	0x40000c00

0800179c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <MX_USART1_UART_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017d4:	f002 fc34 	bl	8004040 <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017de:	f000 f8bd 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200001a8 	.word	0x200001a8
 80017ec:	40011000 	.word	0x40011000

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <MX_GPIO_Init+0xfc>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a37      	ldr	r2, [pc, #220]	; (80018ec <MX_GPIO_Init+0xfc>)
 8001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b35      	ldr	r3, [pc, #212]	; (80018ec <MX_GPIO_Init+0xfc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <MX_GPIO_Init+0xfc>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a30      	ldr	r2, [pc, #192]	; (80018ec <MX_GPIO_Init+0xfc>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <MX_GPIO_Init+0xfc>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <MX_GPIO_Init+0xfc>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a29      	ldr	r2, [pc, #164]	; (80018ec <MX_GPIO_Init+0xfc>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b27      	ldr	r3, [pc, #156]	; (80018ec <MX_GPIO_Init+0xfc>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <MX_GPIO_Init+0xfc>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <MX_GPIO_Init+0xfc>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <MX_GPIO_Init+0xfc>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorBPWMOutput_Pin|MotorAPWM_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f240 4104 	movw	r1, #1028	; 0x404
 800187c:	481c      	ldr	r0, [pc, #112]	; (80018f0 <MX_GPIO_Init+0x100>)
 800187e:	f001 f9ad 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorAIn1_Pin|MotorAIn2_Pin|MotorBIn1_Pin|MotorBIn2_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001888:	481a      	ldr	r0, [pc, #104]	; (80018f4 <MX_GPIO_Init+0x104>)
 800188a:	f001 f9a7 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorBPWMOutput_Pin MotorAPWM_Pin */
  GPIO_InitStruct.Pin = MotorBPWMOutput_Pin|MotorAPWM_Pin;
 800188e:	f240 4304 	movw	r3, #1028	; 0x404
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001898:	2301      	movs	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4812      	ldr	r0, [pc, #72]	; (80018f0 <MX_GPIO_Init+0x100>)
 80018a8:	f001 f814 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018ac:	2304      	movs	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <MX_GPIO_Init+0x108>)
 80018c0:	f001 f808 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorAIn1_Pin MotorAIn2_Pin MotorBIn1_Pin MotorBIn2_Pin */
  GPIO_InitStruct.Pin = MotorAIn1_Pin|MotorAIn2_Pin|MotorBIn1_Pin|MotorBIn2_Pin;
 80018c4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_GPIO_Init+0x104>)
 80018de:	f000 fff9 	bl	80028d4 <HAL_GPIO_Init>

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020400 	.word	0x40020400

080018fc <HAL_TIM_PeriodElapsedCallback>:
//    		encoderValue--;
//    	}
//    }
//}
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == MotorATimer.htim) {
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d102      	bne.n	8001914 <HAL_TIM_PeriodElapsedCallback+0x18>
//		HAL_GPIO_TogglePin(MotorBPWMOutput_GPIO_Port,  MotorBPWMOutput_Pin);
//		HAL_GPIO_WritePin(MotorBPWMOutput_GPIO_Port, MotorBPWMOutput_Pin, GPIO_PIN_SET);
		VirtualPWM_IT_Handler(&MotorATimer);
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001910:	f000 fdbc 	bl	800248c <VirtualPWM_IT_Handler>

	}
	if (htim == MotorBTimer.htim) {
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	d102      	bne.n	8001924 <HAL_TIM_PeriodElapsedCallback+0x28>
//	HAL_GPIO_TogglePin(MotorAPWM_GPIO_Port,  MotorAPWM_Pin);
//		HAL_GPIO_WritePin(MotorAPWM_GPIO_Port,MotorAPWM_Pin, GPIO_PIN_SET);
		VirtualPWM_IT_Handler(&MotorBTimer);
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001920:	f000 fdb4 	bl	800248c <VirtualPWM_IT_Handler>
	}

	if (htim == EncoderA.INT_Timer) {
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	d102      	bne.n	8001934 <HAL_TIM_PeriodElapsedCallback+0x38>
		Encoder_IT_Handler(&EncoderA);
 800192e:	4809      	ldr	r0, [pc, #36]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001930:	f7ff fafe 	bl	8000f30 <Encoder_IT_Handler>
	}
	if(htim==EncoderB.INT_Timer){
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	d102      	bne.n	8001944 <HAL_TIM_PeriodElapsedCallback+0x48>
		Encoder_IT_Handler(&EncoderB);
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001940:	f7ff faf6 	bl	8000f30 <Encoder_IT_Handler>
	}

}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200001ec 	.word	0x200001ec
 8001950:	2000020c 	.word	0x2000020c
 8001954:	2000022c 	.word	0x2000022c
 8001958:	20000260 	.word	0x20000260

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>
	...

08001968 <MotorDriverInit>:
#include "math.h"
#include  "encoder.h"
void MotorDriverInit(MotorDriver *driver, double *xdist, double *ydist,
		double *xout, double *yout, double *ssX, double *ssY,
		PID_TypeDef *xctrl, PID_TypeDef *yctrl, VirtualTimer *vtA,
		VirtualTimer *vtB) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
	driver->xdistance = xdist;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	601a      	str	r2, [r3, #0]
	driver->ydistance = ydist;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	605a      	str	r2, [r3, #4]
	driver->xcontOut = xout;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	609a      	str	r2, [r3, #8]
	driver->ycontOut = yout;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	60da      	str	r2, [r3, #12]
	driver->X_Controller = xctrl;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001992:	615a      	str	r2, [r3, #20]
	driver->Y_Controller = yctrl;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001998:	619a      	str	r2, [r3, #24]
	driver->vtA = vtA;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199e:	61da      	str	r2, [r3, #28]
	driver->vtB = vtB;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019a4:	621a      	str	r2, [r3, #32]
//	driver->steadyStateX = ssX;
	PID(driver->X_Controller, driver->xdistance, driver->xcontOut, ssX, KpX, KiX, KdX, _PID_P_ON_E,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6958      	ldr	r0, [r3, #20]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	2300      	movs	r3, #0
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2301      	movs	r3, #1
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	ed9f 2b23 	vldr	d2, [pc, #140]	; 8001a48 <MotorDriverInit+0xe0>
 80019be:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001a48 <MotorDriverInit+0xe0>
 80019c2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8001a50 <MotorDriverInit+0xe8>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f000 f91a 	bl	8001c00 <PID>
			_PID_CD_DIRECT);
	PID(driver->Y_Controller, driver->ydistance, driver->ycontOut,
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6998      	ldr	r0, [r3, #24]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2301      	movs	r3, #1
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8001a58 <MotorDriverInit+0xf0>
 80019e4:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001a60 <MotorDriverInit+0xf8>
 80019e8:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001a68 <MotorDriverInit+0x100>
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	f000 f907 	bl	8001c00 <PID>
			ssY, KpY, KiY, KdY, _PID_P_ON_E,
			_PID_CD_DIRECT);
	initPIDController(driver->X_Controller, driver->xdistance, driver->xcontOut,
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6958      	ldr	r0, [r3, #20]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6819      	ldr	r1, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f000 f83e 	bl	8001a80 <initPIDController>
			ssX);
	initPIDController(driver->Y_Controller, driver->ydistance, driver->ycontOut,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6998      	ldr	r0, [r3, #24]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f000 f835 	bl	8001a80 <initPIDController>
			ssY);
	PID_SetOutputLimits(driver->X_Controller, -30, 30);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001a70 <MotorDriverInit+0x108>
 8001a1e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001a78 <MotorDriverInit+0x110>
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f956 	bl	8001cd4 <PID_SetOutputLimits>
//	PID_SetOutputLimits(driver->Y_Controller, -100.0, 100.0);
	PID_SetOutputLimits(driver->Y_Controller, -30.0, 0);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8001a48 <MotorDriverInit+0xe0>
 8001a30:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001a78 <MotorDriverInit+0x110>
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f94d 	bl	8001cd4 <PID_SetOutputLimits>
//	PID_SetOutputLimits(driver->X_Controller, 0, 100);
//	PID_SetOutputLimits(driver->Y_Controller, -370, 370);
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	f3af 8000 	nop.w
	...
 8001a54:	3fe00000 	.word	0x3fe00000
 8001a58:	9999999a 	.word	0x9999999a
 8001a5c:	3fa99999 	.word	0x3fa99999
 8001a60:	00000000 	.word	0x00000000
 8001a64:	3ff80000 	.word	0x3ff80000
 8001a68:	47ae147b 	.word	0x47ae147b
 8001a6c:	3f847ae1 	.word	0x3f847ae1
 8001a70:	00000000 	.word	0x00000000
 8001a74:	403e0000 	.word	0x403e0000
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	c03e0000 	.word	0xc03e0000

08001a80 <initPIDController>:
void initPIDController(PID_TypeDef *cont, double *inputVar, double *outputVar,
		double *steadyState) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
//	PID(cont, inputVar, outputVar, steadyState, Kp, Ki, Kd, _PID_P_ON_E,
//			_PID_CD_DIRECT);
	PID_SetMode(cont, _PID_MODE_AUTOMATIC);
 8001a8e:	2101      	movs	r1, #1
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f901 	bl	8001c98 <PID_SetMode>
	PID_SetSampleTime(cont, CONTROLLER_SAMPLE_RATE);
 8001a96:	2164      	movs	r1, #100	; 0x64
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 fa71 	bl	8001f80 <PID_SetSampleTime>
//	PID_SetOutputLimits(cont, 1, CONTROLLER_OUTPUT_LIMIT);
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <fastStop>:
	HAL_GPIO_WritePin(MotorBIn1_GPIO_Port, MotorBIn1_Pin, 0);
	HAL_GPIO_WritePin(MotorBIn2_GPIO_Port, MotorBIn2_Pin, 1);

}

void fastStop(MotorDriver *motorDriver) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MotorAIn1_GPIO_Port, MotorAIn1_Pin, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <fastStop+0x3c>)
 8001ab6:	f001 f891 	bl	8002bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIn2_GPIO_Port, MotorAIn2_Pin, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <fastStop+0x3c>)
 8001ac0:	f001 f88c 	bl	8002bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBIn1_GPIO_Port, MotorBIn1_Pin, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <fastStop+0x3c>)
 8001acc:	f001 f886 	bl	8002bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBIn2_GPIO_Port, MotorBIn2_Pin, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad6:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <fastStop+0x3c>)
 8001ad8:	f001 f880 	bl	8002bdc <HAL_GPIO_WritePin>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40020800 	.word	0x40020800

08001ae8 <goForward>:
		rpm = MAX_SPEED;
	}
	double percentage = rpm /MAX_SPEED;
	gradualSetDutyCycle(vt, percentage, 5);
}
void goForward(MotorDriver *motorDriver) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	// code to make the motor driver move backwards
	HAL_GPIO_WritePin(MotorAIn1_GPIO_Port, MotorAIn1_Pin, 1); //0
 8001af0:	2201      	movs	r2, #1
 8001af2:	2140      	movs	r1, #64	; 0x40
 8001af4:	480b      	ldr	r0, [pc, #44]	; (8001b24 <goForward+0x3c>)
 8001af6:	f001 f871 	bl	8002bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIn2_GPIO_Port, MotorAIn2_Pin, 0); //1
 8001afa:	2200      	movs	r2, #0
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	4809      	ldr	r0, [pc, #36]	; (8001b24 <goForward+0x3c>)
 8001b00:	f001 f86c 	bl	8002bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBIn1_GPIO_Port, MotorBIn1_Pin, 1);//0
 8001b04:	2201      	movs	r2, #1
 8001b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <goForward+0x3c>)
 8001b0c:	f001 f866 	bl	8002bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBIn2_GPIO_Port, MotorBIn2_Pin, 0); //1
 8001b10:	2200      	movs	r2, #0
 8001b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <goForward+0x3c>)
 8001b18:	f001 f860 	bl	8002bdc <HAL_GPIO_WritePin>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40020800 	.word	0x40020800

08001b28 <setOverallSpeed>:

void setOverallSpeed(MotorDriver *motorDriver, double speedInCMpS) {
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	ed87 0b00 	vstr	d0, [r7]
	double percentage = speedInCMpS /MAX_SPEED;
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <setOverallSpeed+0x5c>)
 8001b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3e:	f7fe fe31 	bl	80007a4 <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	e9c7 2304 	strd	r2, r3, [r7, #16]
	setDutyCycle(motorDriver->vtA, percentage);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	69dc      	ldr	r4, [r3, #28]
 8001b4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b52:	f7fe ff97 	bl	8000a84 <__aeabi_d2f>
 8001b56:	4603      	mov	r3, r0
 8001b58:	ee00 3a10 	vmov	s0, r3
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f000 fce8 	bl	8002532 <setDutyCycle>
	setDutyCycle(motorDriver->vtB,  percentage);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a1c      	ldr	r4, [r3, #32]
 8001b66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6a:	f7fe ff8b 	bl	8000a84 <__aeabi_d2f>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	ee00 3a10 	vmov	s0, r3
 8001b74:	4620      	mov	r0, r4
 8001b76:	f000 fcdc 	bl	8002532 <setDutyCycle>

}
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	404e0000 	.word	0x404e0000

08001b88 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001bb8:	f7fe ff5a 	bl	8000a70 <__aeabi_dcmpgt>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8001bce:	e011      	b.n	8001bf4 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001bdc:	f7fe ff2a 	bl	8000a34 <__aeabi_dcmplt>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d100      	bne.n	8001be8 <PID_Init+0x60>
}
 8001be6:	e005      	b.n	8001bf4 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	0000      	movs	r0, r0
	...

08001c00 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6278      	str	r0, [r7, #36]	; 0x24
 8001c08:	6239      	str	r1, [r7, #32]
 8001c0a:	61fa      	str	r2, [r7, #28]
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c12:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c16:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	6a3a      	ldr	r2, [r7, #32]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	2200      	movs	r2, #0
 8001c30:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001c32:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001c88 <PID+0x88>
 8001c36:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001c90 <PID+0x90>
 8001c3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c3c:	f000 f84a 	bl	8001cd4 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	2264      	movs	r2, #100	; 0x64
 8001c44:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8001c46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c4e:	f000 f957 	bl	8001f00 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001c52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c56:	4619      	mov	r1, r3
 8001c58:	ed97 2b00 	vldr	d2, [r7]
 8001c5c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001c60:	ed97 0b04 	vldr	d0, [r7, #16]
 8001c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c66:	f000 f8a3 	bl	8001db0 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001c6a:	f000 fd15 	bl	8002698 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	1ad2      	subs	r2, r2, r3
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	605a      	str	r2, [r3, #4]
	
}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	; 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	f3af 8000 	nop.w
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	406fe000 	.word	0x406fe000
	...

08001c98 <PID_SetMode>:
	
}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	bf0c      	ite	eq
 8001caa:	2301      	moveq	r3, #1
 8001cac:	2300      	movne	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <PID_SetMode+0x2e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	785b      	ldrb	r3, [r3, #1]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff61 	bl	8001b88 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	705a      	strb	r2, [r3, #1]
	
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6178      	str	r0, [r7, #20]
 8001cdc:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ce0:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ce8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cec:	f7fe feb6 	bl	8000a5c <__aeabi_dcmpge>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d158      	bne.n	8001da8 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8001cf6:	6979      	ldr	r1, [r7, #20]
 8001cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cfc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8001d00:	6979      	ldr	r1, [r7, #20]
 8001d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d06:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	785b      	ldrb	r3, [r3, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d04b      	beq.n	8001daa <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001d20:	f7fe fea6 	bl	8000a70 <__aeabi_dcmpgt>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001d34:	e9c1 2300 	strd	r2, r3, [r1]
 8001d38:	e012      	b.n	8001d60 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d48:	f7fe fe74 	bl	8000a34 <__aeabi_dcmplt>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d5c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001d6c:	f7fe fe80 	bl	8000a70 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001d7c:	6979      	ldr	r1, [r7, #20]
 8001d7e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001d82:	e012      	b.n	8001daa <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d90:	f7fe fe50 	bl	8000a34 <__aeabi_dcmplt>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001da0:	6979      	ldr	r1, [r7, #20]
 8001da2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001da6:	e000      	b.n	8001daa <PID_SetOutputLimits+0xd6>
		return;
 8001da8:	bf00      	nop
		}
		else { }
		
	}
	
}
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	61f8      	str	r0, [r7, #28]
 8001db8:	ed87 0b04 	vstr	d0, [r7, #16]
 8001dbc:	ed87 1b02 	vstr	d1, [r7, #8]
 8001dc0:	ed87 2b00 	vstr	d2, [r7]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dd4:	f7fe fe2e 	bl	8000a34 <__aeabi_dcmplt>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 8089 	bne.w	8001ef2 <PID_SetTunings2+0x142>
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dec:	f7fe fe22 	bl	8000a34 <__aeabi_dcmplt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d17d      	bne.n	8001ef2 <PID_SetTunings2+0x142>
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e02:	f7fe fe17 	bl	8000a34 <__aeabi_dcmplt>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d172      	bne.n	8001ef2 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	7efa      	ldrb	r2, [r7, #27]
 8001e10:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001e12:	7efb      	ldrb	r3, [r7, #27]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001e24:	69f9      	ldr	r1, [r7, #28]
 8001e26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001e2e:	69f9      	ldr	r1, [r7, #28]
 8001e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e34:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001e38:	69f9      	ldr	r1, [r7, #28]
 8001e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e3e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb08 	bl	800045c <__aeabi_ui2d>
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <PID_SetTunings2+0x14c>)
 8001e52:	f7fe fca7 	bl	80007a4 <__aeabi_ddiv>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8001e5e:	69f9      	ldr	r1, [r7, #28]
 8001e60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e64:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001e68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e70:	f7fe fb6e 	bl	8000550 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	69f9      	ldr	r1, [r7, #28]
 8001e7a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e86:	f7fe fc8d 	bl	80007a4 <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	69f9      	ldr	r1, [r7, #28]
 8001e90:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d12b      	bne.n	8001ef4 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	f7fe f999 	bl	80001e0 <__aeabi_dsub>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	69f9      	ldr	r1, [r7, #28]
 8001eb4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ebe:	f04f 0000 	mov.w	r0, #0
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	f7fe f98b 	bl	80001e0 <__aeabi_dsub>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	69f9      	ldr	r1, [r7, #28]
 8001ed0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001eda:	f04f 0000 	mov.w	r0, #0
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	f7fe f97d 	bl	80001e0 <__aeabi_dsub>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	69f9      	ldr	r1, [r7, #28]
 8001eec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001ef0:	e000      	b.n	8001ef4 <PID_SetTunings2+0x144>
		return;
 8001ef2:	bf00      	nop
		
	}
	
}
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	408f4000 	.word	0x408f4000

08001f00 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	785b      	ldrb	r3, [r3, #1]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d02e      	beq.n	8001f72 <PID_SetControllerDirection+0x72>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	78db      	ldrb	r3, [r3, #3]
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d029      	beq.n	8001f72 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f24:	f04f 0000 	mov.w	r0, #0
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	f7fe f958 	bl	80001e0 <__aeabi_dsub>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f40:	f04f 0000 	mov.w	r0, #0
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	f7fe f94a 	bl	80001e0 <__aeabi_dsub>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f5c:	f04f 0000 	mov.w	r0, #0
 8001f60:	f04f 0100 	mov.w	r1, #0
 8001f64:	f7fe f93c 	bl	80001e0 <__aeabi_dsub>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	70da      	strb	r2, [r3, #3]
	
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dd2e      	ble.n	8001fee <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001f90:	6838      	ldr	r0, [r7, #0]
 8001f92:	f7fe fa73 	bl	800047c <__aeabi_i2d>
 8001f96:	4604      	mov	r4, r0
 8001f98:	460d      	mov	r5, r1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fa5c 	bl	800045c <__aeabi_ui2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4620      	mov	r0, r4
 8001faa:	4629      	mov	r1, r5
 8001fac:	f7fe fbfa 	bl	80007a4 <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001fbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc2:	f7fe fac5 	bl	8000550 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fda:	f7fe fbe3 	bl	80007a4 <__aeabi_ddiv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bdb0      	pop	{r4, r5, r7, pc}

08001ff6 <RPIClientInit>:
	strncpy(SeperatedBuffer[packetItemIdx], currentString, charIdx);
	packet->xdistance = atoi(SeperatedBuffer[0]);
	packet->ydistance = atoi(SeperatedBuffer[1]);
}
void RPIClientInit(RPIClient *client, char *buffer, RPIPacket *mostRecentPacket,
		UARTClient *uart) {
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	603b      	str	r3, [r7, #0]
	client->buffer = buffer;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	601a      	str	r2, [r3, #0]
	client->mostRecentPacket = mostRecentPacket;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	605a      	str	r2, [r3, #4]
	client->uart = uart;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	609a      	str	r2, [r3, #8]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_MspInit+0x4c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <HAL_MspInit+0x4c>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_MspInit+0x4c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_MspInit+0x4c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_MspInit+0x4c>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_MspInit+0x4c>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a46      	ldr	r2, [pc, #280]	; (80021ac <HAL_TIM_Encoder_MspInit+0x138>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d14d      	bne.n	8002132 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	4b45      	ldr	r3, [pc, #276]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a44      	ldr	r2, [pc, #272]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a3d      	ldr	r2, [pc, #244]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	4832      	ldr	r0, [pc, #200]	; (80021b4 <HAL_TIM_Encoder_MspInit+0x140>)
 80020ec:	f000 fbf2 	bl	80028d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	2018      	movs	r0, #24
 80020f6:	f000 fbb6 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80020fa:	2018      	movs	r0, #24
 80020fc:	f000 fbcf 	bl	800289e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	2019      	movs	r0, #25
 8002106:	f000 fbae 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800210a:	2019      	movs	r0, #25
 800210c:	f000 fbc7 	bl	800289e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	201a      	movs	r0, #26
 8002116:	f000 fba6 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800211a:	201a      	movs	r0, #26
 800211c:	f000 fbbf 	bl	800289e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	201b      	movs	r0, #27
 8002126:	f000 fb9e 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800212a:	201b      	movs	r0, #27
 800212c:	f000 fbb7 	bl	800289e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002130:	e038      	b.n	80021a4 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213a:	d133      	bne.n	80021a4 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002174:	2303      	movs	r3, #3
 8002176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217c:	2301      	movs	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002184:	2301      	movs	r3, #1
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4809      	ldr	r0, [pc, #36]	; (80021b4 <HAL_TIM_Encoder_MspInit+0x140>)
 8002190:	f000 fba0 	bl	80028d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	201c      	movs	r0, #28
 800219a:	f000 fb64 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800219e:	201c      	movs	r0, #28
 80021a0:	f000 fb7d 	bl	800289e <HAL_NVIC_EnableIRQ>
}
 80021a4:	bf00      	nop
 80021a6:	3730      	adds	r7, #48	; 0x30
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000

080021b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <HAL_TIM_Base_MspInit+0xb8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d116      	bne.n	80021f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_TIM_Base_MspInit+0xbc>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a28      	ldr	r2, [pc, #160]	; (8002274 <HAL_TIM_Base_MspInit+0xbc>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_TIM_Base_MspInit+0xbc>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	201d      	movs	r0, #29
 80021ec:	f000 fb3b 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021f0:	201d      	movs	r0, #29
 80021f2:	f000 fb54 	bl	800289e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021f6:	e036      	b.n	8002266 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1e      	ldr	r2, [pc, #120]	; (8002278 <HAL_TIM_Base_MspInit+0xc0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d116      	bne.n	8002230 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_TIM_Base_MspInit+0xbc>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a1a      	ldr	r2, [pc, #104]	; (8002274 <HAL_TIM_Base_MspInit+0xbc>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_TIM_Base_MspInit+0xbc>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	201e      	movs	r0, #30
 8002224:	f000 fb1f 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002228:	201e      	movs	r0, #30
 800222a:	f000 fb38 	bl	800289e <HAL_NVIC_EnableIRQ>
}
 800222e:	e01a      	b.n	8002266 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_TIM_Base_MspInit+0xc4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d115      	bne.n	8002266 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_TIM_Base_MspInit+0xbc>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <HAL_TIM_Base_MspInit+0xbc>)
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_TIM_Base_MspInit+0xbc>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2032      	movs	r0, #50	; 0x32
 800225c:	f000 fb03 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002260:	2032      	movs	r0, #50	; 0x32
 8002262:	f000 fb1c 	bl	800289e <HAL_NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40000400 	.word	0x40000400
 8002274:	40023800 	.word	0x40023800
 8002278:	40000800 	.word	0x40000800
 800227c:	40000c00 	.word	0x40000c00

08002280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_UART_MspInit+0x84>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d12b      	bne.n	80022fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_UART_MspInit+0x88>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_UART_MspInit+0x88>)
 80022ac:	f043 0310 	orr.w	r3, r3, #16
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_UART_MspInit+0x88>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_UART_MspInit+0x88>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_UART_MspInit+0x88>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_UART_MspInit+0x88>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RPI_TX_Pin|RPI_RX_Pin;
 80022da:	23c0      	movs	r3, #192	; 0xc0
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ea:	2307      	movs	r3, #7
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_UART_MspInit+0x8c>)
 80022f6:	f000 faed 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	; 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40011000 	.word	0x40011000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020400 	.word	0x40020400

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235c:	f000 f988 	bl	8002670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800236a:	f001 faaf 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000040 	.word	0x20000040

08002378 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800237e:	f001 faa5 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000040 	.word	0x20000040

0800238c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002392:	f001 fa9b 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000040 	.word	0x20000040

080023a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <TIM1_CC_IRQHandler+0x10>)
 80023a6:	f001 fa91 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000040 	.word	0x20000040

080023b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <TIM2_IRQHandler+0x10>)
 80023ba:	f001 fa87 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000088 	.word	0x20000088

080023c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <TIM3_IRQHandler+0x10>)
 80023ce:	f001 fa7d 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200000d0 	.word	0x200000d0

080023dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <TIM4_IRQHandler+0x10>)
 80023e2:	f001 fa73 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000118 	.word	0x20000118

080023f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <TIM5_IRQHandler+0x10>)
 80023f6:	f001 fa69 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000160 	.word	0x20000160

08002404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <SystemInit+0x20>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <SystemInit+0x20>)
 8002410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <initVirtualTimer>:

#include "virtualTimer.h"

void initVirtualTimer(VirtualTimer *vt, int timerPeriod, float dutyCycle,
		GPIO_TypeDef *outputChannelPort, uint16_t outputChannelPin,
		TIM_HandleTypeDef *htim) {
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6178      	str	r0, [r7, #20]
 8002430:	6139      	str	r1, [r7, #16]
 8002432:	ed87 0a03 	vstr	s0, [r7, #12]
 8002436:	60ba      	str	r2, [r7, #8]
 8002438:	80fb      	strh	r3, [r7, #6]
	vt->timerCount = 0;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
	vt->timerPeriod = timerPeriod; //driverSpeed
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	605a      	str	r2, [r3, #4]
	vt->dutyCycle = dutyCycle;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	609a      	str	r2, [r3, #8]
	vt->timerStepDownCount = (int) (vt->dutyCycle * vt->timerPeriod);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002466:	ee17 2a90 	vmov	r2, s15
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	611a      	str	r2, [r3, #16]
	vt->outputChannelPort = outputChannelPort;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	619a      	str	r2, [r3, #24]
	vt->outputChannelPin = outputChannelPin;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	829a      	strh	r2, [r3, #20]
	vt->htim = htim;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	6a3a      	ldr	r2, [r7, #32]
 800247e:	61da      	str	r2, [r3, #28]


}
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <VirtualPWM_IT_Handler>:
void VirtualPWM_IT_Handler(VirtualTimer *vt) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002494:	b672      	cpsid	i
}
 8002496:	bf00      	nop
	__disable_irq();
	if (vt->updateFlag) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d016      	beq.n	80024ce <VirtualPWM_IT_Handler+0x42>
		vt->timerStepDownCount = (int) (vt->dutyCycle * vt->timerPeriod);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ba:	ee17 2a90 	vmov	r2, s15
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]
		vt->updateFlag = 0;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80024c8:	b662      	cpsie	i
}
 80024ca:	bf00      	nop
		__enable_irq();
		return;
 80024cc:	e02e      	b.n	800252c <VirtualPWM_IT_Handler+0xa0>
	}
	if (vt->timerCount <= vt->timerStepDownCount) {
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dc07      	bgt.n	80024ea <VirtualPWM_IT_Handler+0x5e>
		HAL_GPIO_WritePin(vt->outputChannelPort, vt->outputChannelPin,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6998      	ldr	r0, [r3, #24]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8a9b      	ldrh	r3, [r3, #20]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4619      	mov	r1, r3
 80024e6:	f000 fb79 	bl	8002bdc <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
	}
	if (vt->timerCount > vt->timerStepDownCount) {
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dd07      	ble.n	8002506 <VirtualPWM_IT_Handler+0x7a>
		HAL_GPIO_WritePin(vt->outputChannelPort, vt->outputChannelPin,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6998      	ldr	r0, [r3, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8a9b      	ldrh	r3, [r3, #20]
 80024fe:	2200      	movs	r2, #0
 8002500:	4619      	mov	r1, r3
 8002502:	f000 fb6b 	bl	8002bdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
	}
	if (vt->timerCount == vt->timerPeriod) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	d105      	bne.n	800251e <VirtualPWM_IT_Handler+0x92>
		vt->timerCount = 0;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002518:	b662      	cpsie	i
}
 800251a:	bf00      	nop
		__enable_irq();
		return;
 800251c:	e006      	b.n	800252c <VirtualPWM_IT_Handler+0xa0>
	}
	vt->timerCount++;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002528:	b662      	cpsie	i
}
 800252a:	bf00      	nop
	__enable_irq();
}
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <setDutyCycle>:
void setDutyCycle(VirtualTimer *vt, float amount) {
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	ed87 0a00 	vstr	s0, [r7]
	vt->dutyCycle = amount;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	bf00      	nop
	__disable_irq();
	vt->updateFlag = 1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800254e:	b662      	cpsie	i
}
 8002550:	bf00      	nop
	__enable_irq();
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <start_IT>:
	}



}
void start_IT(VirtualTimer * vt){
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(vt->htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fff8 	bl	8003560 <HAL_TIM_Base_Start_IT>
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800257e:	490e      	ldr	r1, [pc, #56]	; (80025b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002584:	e002      	b.n	800258c <LoopCopyDataInit>

08002586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258a:	3304      	adds	r3, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800258c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002590:	d3f9      	bcc.n	8002586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002594:	4c0b      	ldr	r4, [pc, #44]	; (80025c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002598:	e001      	b.n	800259e <LoopFillZerobss>

0800259a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800259c:	3204      	adds	r2, #4

0800259e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a0:	d3fb      	bcc.n	800259a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025a2:	f7ff ff2f 	bl	8002404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a6:	f002 f80d 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7fe fd4d 	bl	8001048 <main>
  bx  lr    
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80025bc:	0800465c 	.word	0x0800465c
  ldr r2, =_sbss
 80025c0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80025c4:	200002d0 	.word	0x200002d0

080025c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC_IRQHandler>
	...

080025cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <HAL_Init+0x40>)
 80025d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_Init+0x40>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_Init+0x40>)
 80025e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <HAL_Init+0x40>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f000 f92b 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fa:	200f      	movs	r0, #15
 80025fc:	f000 f808 	bl	8002610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002600:	f7ff fd10 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00

08002610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_InitTick+0x54>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_InitTick+0x58>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002626:	fbb3 f3f1 	udiv	r3, r3, r1
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f943 	bl	80028ba <HAL_SYSTICK_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00e      	b.n	800265c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d80a      	bhi.n	800265a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002644:	2200      	movs	r2, #0
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f000 f90b 	bl	8002866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_InitTick+0x5c>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000018 	.word	0x20000018
 8002668:	20000020 	.word	0x20000020
 800266c:	2000001c 	.word	0x2000001c

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000020 	.word	0x20000020
 8002694:	200002cc 	.word	0x200002cc

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	200002cc 	.word	0x200002cc

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	; (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff29 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002878:	f7ff ff3e 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 800287c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff8e 	bl	80027a4 <NVIC_EncodePriority>
 8002888:	4602      	mov	r2, r0
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <__NVIC_SetPriority>
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff31 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ffa2 	bl	800280c <SysTick_Config>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	e159      	b.n	8002ba4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f0:	2201      	movs	r2, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 8148 	bne.w	8002b9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d005      	beq.n	8002926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002922:	2b02      	cmp	r3, #2
 8002924:	d130      	bne.n	8002988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 0201 	and.w	r2, r3, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b03      	cmp	r3, #3
 8002992:	d017      	beq.n	80029c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d123      	bne.n	8002a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	08da      	lsrs	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3208      	adds	r2, #8
 80029d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	220f      	movs	r2, #15
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3208      	adds	r2, #8
 8002a12:	69b9      	ldr	r1, [r7, #24]
 8002a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0203 	and.w	r2, r3, #3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80a2 	beq.w	8002b9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	4b57      	ldr	r3, [pc, #348]	; (8002bbc <HAL_GPIO_Init+0x2e8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a56      	ldr	r2, [pc, #344]	; (8002bbc <HAL_GPIO_Init+0x2e8>)
 8002a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <HAL_GPIO_Init+0x2e8>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a76:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_GPIO_Init+0x2ec>)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a49      	ldr	r2, [pc, #292]	; (8002bc4 <HAL_GPIO_Init+0x2f0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d019      	beq.n	8002ad6 <HAL_GPIO_Init+0x202>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a48      	ldr	r2, [pc, #288]	; (8002bc8 <HAL_GPIO_Init+0x2f4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <HAL_GPIO_Init+0x1fe>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a47      	ldr	r2, [pc, #284]	; (8002bcc <HAL_GPIO_Init+0x2f8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00d      	beq.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a46      	ldr	r2, [pc, #280]	; (8002bd0 <HAL_GPIO_Init+0x2fc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d007      	beq.n	8002aca <HAL_GPIO_Init+0x1f6>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a45      	ldr	r2, [pc, #276]	; (8002bd4 <HAL_GPIO_Init+0x300>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <HAL_GPIO_Init+0x1f2>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e008      	b.n	8002ad8 <HAL_GPIO_Init+0x204>
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x204>
 8002aca:	2303      	movs	r3, #3
 8002acc:	e004      	b.n	8002ad8 <HAL_GPIO_Init+0x204>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_Init+0x204>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_GPIO_Init+0x204>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	f002 0203 	and.w	r2, r2, #3
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	4093      	lsls	r3, r2
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae8:	4935      	ldr	r1, [pc, #212]	; (8002bc0 <HAL_GPIO_Init+0x2ec>)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	3302      	adds	r3, #2
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002af6:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <HAL_GPIO_Init+0x304>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <HAL_GPIO_Init+0x304>)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_GPIO_Init+0x304>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b44:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <HAL_GPIO_Init+0x304>)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_GPIO_Init+0x304>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b6e:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <HAL_GPIO_Init+0x304>)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_GPIO_Init+0x304>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b98:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <HAL_GPIO_Init+0x304>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	f67f aea2 	bls.w	80028f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40020800 	.word	0x40020800
 8002bd0:	40020c00 	.word	0x40020c00
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40013c00 	.word	0x40013c00

08002bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
 8002be8:	4613      	mov	r3, r2
 8002bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bec:	787b      	ldrb	r3, [r7, #1]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bf8:	e003      	b.n	8002c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	041a      	lsls	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	619a      	str	r2, [r3, #24]
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e267      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d075      	beq.n	8002d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c2e:	4b88      	ldr	r3, [pc, #544]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d00c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3a:	4b85      	ldr	r3, [pc, #532]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d112      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c46:	4b82      	ldr	r3, [pc, #520]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c52:	d10b      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	4b7e      	ldr	r3, [pc, #504]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05b      	beq.n	8002d18 <HAL_RCC_OscConfig+0x108>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d157      	bne.n	8002d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e242      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x74>
 8002c76:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a75      	ldr	r2, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0xb0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x98>
 8002c8e:	4b70      	ldr	r3, [pc, #448]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a6f      	ldr	r2, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b6d      	ldr	r3, [pc, #436]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6c      	ldr	r2, [pc, #432]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xb0>
 8002ca8:	4b69      	ldr	r3, [pc, #420]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a68      	ldr	r2, [pc, #416]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a65      	ldr	r2, [pc, #404]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7ff fce6 	bl	8002698 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7ff fce2 	bl	8002698 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e207      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xc0>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7ff fcd2 	bl	8002698 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7ff fcce 	bl	8002698 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1f3      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0xe8>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d063      	beq.n	8002dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d26:	4b4a      	ldr	r3, [pc, #296]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d32:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d11c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3e:	4b44      	ldr	r3, [pc, #272]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x152>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1c7      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4937      	ldr	r1, [pc, #220]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	e03a      	b.n	8002dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_RCC_OscConfig+0x244>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7ff fc87 	bl	8002698 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7ff fc83 	bl	8002698 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e1a8      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4925      	ldr	r1, [pc, #148]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc2:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_OscConfig+0x244>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7ff fc66 	bl	8002698 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7ff fc62 	bl	8002698 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e187      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d036      	beq.n	8002e68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_RCC_OscConfig+0x248>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7ff fc46 	bl	8002698 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e10:	f7ff fc42 	bl	8002698 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e167      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x200>
 8002e2e:	e01b      	b.n	8002e68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_OscConfig+0x248>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e36:	f7ff fc2f 	bl	8002698 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	e00e      	b.n	8002e5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7ff fc2b 	bl	8002698 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d907      	bls.n	8002e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e150      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	42470000 	.word	0x42470000
 8002e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b88      	ldr	r3, [pc, #544]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ea      	bne.n	8002e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8097 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b81      	ldr	r3, [pc, #516]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b7d      	ldr	r3, [pc, #500]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	4a7c      	ldr	r2, [pc, #496]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6413      	str	r3, [r2, #64]	; 0x40
 8002e96:	4b7a      	ldr	r3, [pc, #488]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	4b77      	ldr	r3, [pc, #476]	; (8003084 <HAL_RCC_OscConfig+0x474>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d118      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb2:	4b74      	ldr	r3, [pc, #464]	; (8003084 <HAL_RCC_OscConfig+0x474>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a73      	ldr	r2, [pc, #460]	; (8003084 <HAL_RCC_OscConfig+0x474>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ebe:	f7ff fbeb 	bl	8002698 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec6:	f7ff fbe7 	bl	8002698 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e10c      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_RCC_OscConfig+0x474>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x2ea>
 8002eec:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a63      	ldr	r2, [pc, #396]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x324>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x30c>
 8002f02:	4b5f      	ldr	r3, [pc, #380]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a5e      	ldr	r2, [pc, #376]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0e:	4b5c      	ldr	r3, [pc, #368]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4a5b      	ldr	r2, [pc, #364]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0x324>
 8002f1c:	4b58      	ldr	r3, [pc, #352]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a57      	ldr	r2, [pc, #348]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	4b55      	ldr	r3, [pc, #340]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a54      	ldr	r2, [pc, #336]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	f023 0304 	bic.w	r3, r3, #4
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d015      	beq.n	8002f68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7ff fbac 	bl	8002698 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7ff fba8 	bl	8002698 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e0cb      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	4b49      	ldr	r3, [pc, #292]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ee      	beq.n	8002f44 <HAL_RCC_OscConfig+0x334>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7ff fb96 	bl	8002698 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7ff fb92 	bl	8002698 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e0b5      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ee      	bne.n	8002f70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	4a38      	ldr	r2, [pc, #224]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80a1 	beq.w	80030f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fae:	4b34      	ldr	r3, [pc, #208]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d05c      	beq.n	8003074 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d141      	bne.n	8003046 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <HAL_RCC_OscConfig+0x478>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff fb66 	bl	8002698 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7ff fb62 	bl	8002698 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e087      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	491b      	ldr	r1, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_RCC_OscConfig+0x478>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7ff fb3b 	bl	8002698 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003026:	f7ff fb37 	bl	8002698 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e05c      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x416>
 8003044:	e054      	b.n	80030f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x478>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7ff fb24 	bl	8002698 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7ff fb20 	bl	8002698 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e045      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x444>
 8003072:	e03d      	b.n	80030f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e038      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
 8003080:	40023800 	.word	0x40023800
 8003084:	40007000 	.word	0x40007000
 8003088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_RCC_OscConfig+0x4ec>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d028      	beq.n	80030ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d121      	bne.n	80030ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d11a      	bne.n	80030ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d111      	bne.n	80030ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	3b01      	subs	r3, #1
 80030d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d107      	bne.n	80030ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800

08003100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0cc      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003114:	4b68      	ldr	r3, [pc, #416]	; (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d90c      	bls.n	800313c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b65      	ldr	r3, [pc, #404]	; (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0b8      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d020      	beq.n	800318a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003154:	4b59      	ldr	r3, [pc, #356]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a58      	ldr	r2, [pc, #352]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800315e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800316c:	4b53      	ldr	r3, [pc, #332]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a52      	ldr	r2, [pc, #328]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003178:	4b50      	ldr	r3, [pc, #320]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	494d      	ldr	r1, [pc, #308]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d044      	beq.n	8003220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b47      	ldr	r3, [pc, #284]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d119      	bne.n	80031de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e07f      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d003      	beq.n	80031be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031be:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e06f      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ce:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e067      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031de:	4b37      	ldr	r3, [pc, #220]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f023 0203 	bic.w	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4934      	ldr	r1, [pc, #208]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f0:	f7ff fa52 	bl	8002698 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	e00a      	b.n	800320e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f8:	f7ff fa4e 	bl	8002698 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e04f      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 020c 	and.w	r2, r3, #12
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	429a      	cmp	r2, r3
 800321e:	d1eb      	bne.n	80031f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003220:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d20c      	bcs.n	8003248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e032      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003254:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4916      	ldr	r1, [pc, #88]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	490e      	ldr	r1, [pc, #56]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003286:	f000 f821 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 800328a:	4602      	mov	r2, r0
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	490a      	ldr	r1, [pc, #40]	; (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003298:	5ccb      	ldrb	r3, [r1, r3]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f9b2 	bl	8002610 <HAL_InitTick>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023c00 	.word	0x40023c00
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08004634 	.word	0x08004634
 80032c4:	20000018 	.word	0x20000018
 80032c8:	2000001c 	.word	0x2000001c

080032cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d0:	b090      	sub	sp, #64	; 0x40
 80032d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
 80032d8:	2300      	movs	r3, #0
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032dc:	2300      	movs	r3, #0
 80032de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e4:	4b59      	ldr	r3, [pc, #356]	; (800344c <HAL_RCC_GetSysClockFreq+0x180>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d00d      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x40>
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	f200 80a1 	bhi.w	8003438 <HAL_RCC_GetSysClockFreq+0x16c>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x34>
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d003      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x3a>
 80032fe:	e09b      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003300:	4b53      	ldr	r3, [pc, #332]	; (8003450 <HAL_RCC_GetSysClockFreq+0x184>)
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003304:	e09b      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003306:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_GetSysClockFreq+0x188>)
 8003308:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800330a:	e098      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800330c:	4b4f      	ldr	r3, [pc, #316]	; (800344c <HAL_RCC_GetSysClockFreq+0x180>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003316:	4b4d      	ldr	r3, [pc, #308]	; (800344c <HAL_RCC_GetSysClockFreq+0x180>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d028      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003322:	4b4a      	ldr	r3, [pc, #296]	; (800344c <HAL_RCC_GetSysClockFreq+0x180>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	099b      	lsrs	r3, r3, #6
 8003328:	2200      	movs	r2, #0
 800332a:	623b      	str	r3, [r7, #32]
 800332c:	627a      	str	r2, [r7, #36]	; 0x24
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003334:	2100      	movs	r1, #0
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCC_GetSysClockFreq+0x188>)
 8003338:	fb03 f201 	mul.w	r2, r3, r1
 800333c:	2300      	movs	r3, #0
 800333e:	fb00 f303 	mul.w	r3, r0, r3
 8003342:	4413      	add	r3, r2
 8003344:	4a43      	ldr	r2, [pc, #268]	; (8003454 <HAL_RCC_GetSysClockFreq+0x188>)
 8003346:	fba0 1202 	umull	r1, r2, r0, r2
 800334a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800334c:	460a      	mov	r2, r1
 800334e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003352:	4413      	add	r3, r2
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	2200      	movs	r2, #0
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	61fa      	str	r2, [r7, #28]
 800335e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003362:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003366:	f7fd fbdd 	bl	8000b24 <__aeabi_uldivmod>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4613      	mov	r3, r2
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003372:	e053      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003374:	4b35      	ldr	r3, [pc, #212]	; (800344c <HAL_RCC_GetSysClockFreq+0x180>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	2200      	movs	r2, #0
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	617a      	str	r2, [r7, #20]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003386:	f04f 0b00 	mov.w	fp, #0
 800338a:	4652      	mov	r2, sl
 800338c:	465b      	mov	r3, fp
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339c:	0150      	lsls	r0, r2, #5
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	ebb2 080a 	subs.w	r8, r2, sl
 80033a6:	eb63 090b 	sbc.w	r9, r3, fp
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033be:	ebb2 0408 	subs.w	r4, r2, r8
 80033c2:	eb63 0509 	sbc.w	r5, r3, r9
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	00eb      	lsls	r3, r5, #3
 80033d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d4:	00e2      	lsls	r2, r4, #3
 80033d6:	4614      	mov	r4, r2
 80033d8:	461d      	mov	r5, r3
 80033da:	eb14 030a 	adds.w	r3, r4, sl
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	eb45 030b 	adc.w	r3, r5, fp
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f2:	4629      	mov	r1, r5
 80033f4:	028b      	lsls	r3, r1, #10
 80033f6:	4621      	mov	r1, r4
 80033f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033fc:	4621      	mov	r1, r4
 80033fe:	028a      	lsls	r2, r1, #10
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003406:	2200      	movs	r2, #0
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	60fa      	str	r2, [r7, #12]
 800340c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003410:	f7fd fb88 	bl	8000b24 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4613      	mov	r3, r2
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_GetSysClockFreq+0x180>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	3301      	adds	r3, #1
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800342c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003436:	e002      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetSysClockFreq+0x184>)
 800343a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800343c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003440:	4618      	mov	r0, r3
 8003442:	3740      	adds	r7, #64	; 0x40
 8003444:	46bd      	mov	sp, r7
 8003446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	00f42400 	.word	0x00f42400
 8003454:	017d7840 	.word	0x017d7840

08003458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_GetHCLKFreq+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000018 	.word	0x20000018

08003470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003474:	f7ff fff0 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	08004644 	.word	0x08004644

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800349c:	f7ff ffdc 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0b5b      	lsrs	r3, r3, #13
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4903      	ldr	r1, [pc, #12]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	08004644 	.word	0x08004644

080034c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e041      	b.n	8003556 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe fe66 	bl	80021b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f000 fbdc 	bl	8003cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d001      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e044      	b.n	8003602 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <HAL_TIM_Base_Start_IT+0xb0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d018      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x6c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a2:	d013      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x6c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_TIM_Base_Start_IT+0xb4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x6c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_TIM_Base_Start_IT+0xb8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x6c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_TIM_Base_Start_IT+0xbc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x6c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a16      	ldr	r2, [pc, #88]	; (8003620 <HAL_TIM_Base_Start_IT+0xc0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d111      	bne.n	80035f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d010      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ee:	e007      	b.n	8003600 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40014000 	.word	0x40014000

08003624 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e097      	b.n	8003768 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fe fd11 	bl	8002074 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003668:	f023 0307 	bic.w	r3, r3, #7
 800366c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f000 fb1f 	bl	8003cbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	4313      	orrs	r3, r2
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036c4:	f023 030c 	bic.w	r3, r3, #12
 80036c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	4313      	orrs	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	011a      	lsls	r2, r3, #4
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	031b      	lsls	r3, r3, #12
 80036f4:	4313      	orrs	r3, r2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	4313      	orrs	r3, r2
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003780:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003788:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003790:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003798:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d110      	bne.n	80037c2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037a6:	7b7b      	ldrb	r3, [r7, #13]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d001      	beq.n	80037b0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e089      	b.n	80038c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c0:	e031      	b.n	8003826 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d110      	bne.n	80037ea <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c8:	7bbb      	ldrb	r3, [r7, #14]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037ce:	7b3b      	ldrb	r3, [r7, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d001      	beq.n	80037d8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e075      	b.n	80038c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e8:	e01d      	b.n	8003826 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f0:	7bbb      	ldrb	r3, [r7, #14]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f6:	7b7b      	ldrb	r3, [r7, #13]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d102      	bne.n	8003802 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037fc:	7b3b      	ldrb	r3, [r7, #12]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d001      	beq.n	8003806 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e05e      	b.n	80038c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_TIM_Encoder_Start_IT+0xc4>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d010      	beq.n	8003854 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003832:	e01f      	b.n	8003874 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fb57 	bl	8003ef0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0202 	orr.w	r2, r2, #2
 8003850:	60da      	str	r2, [r3, #12]
      break;
 8003852:	e02e      	b.n	80038b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	2104      	movs	r1, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fb47 	bl	8003ef0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0204 	orr.w	r2, r2, #4
 8003870:	60da      	str	r2, [r3, #12]
      break;
 8003872:	e01e      	b.n	80038b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2201      	movs	r2, #1
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fb37 	bl	8003ef0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	2104      	movs	r1, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fb30 	bl	8003ef0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0202 	orr.w	r2, r2, #2
 800389e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0204 	orr.w	r2, r2, #4
 80038ae:	60da      	str	r2, [r3, #12]
      break;
 80038b0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d122      	bne.n	8003928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d11b      	bne.n	8003928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0202 	mvn.w	r2, #2
 80038f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f9b5 	bl	8003c7e <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f9a7 	bl	8003c6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f9b8 	bl	8003c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d122      	bne.n	800397c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b04      	cmp	r3, #4
 8003942:	d11b      	bne.n	800397c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0204 	mvn.w	r2, #4
 800394c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f98b 	bl	8003c7e <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f97d 	bl	8003c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f98e 	bl	8003c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b08      	cmp	r3, #8
 8003988:	d122      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d11b      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0208 	mvn.w	r2, #8
 80039a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2204      	movs	r2, #4
 80039a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f961 	bl	8003c7e <HAL_TIM_IC_CaptureCallback>
 80039bc:	e005      	b.n	80039ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f953 	bl	8003c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f964 	bl	8003c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d122      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d11b      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0210 	mvn.w	r2, #16
 80039f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2208      	movs	r2, #8
 80039fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f937 	bl	8003c7e <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f929 	bl	8003c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f93a 	bl	8003c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0201 	mvn.w	r2, #1
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd ff56 	bl	80018fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d10e      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b80      	cmp	r3, #128	; 0x80
 8003a6a:	d107      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fad8 	bl	800402c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8ff 	bl	8003ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0220 	mvn.w	r2, #32
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 faa2 	bl	8004018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIM_ConfigClockSource+0x1c>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e0b4      	b.n	8003c62 <HAL_TIM_ConfigClockSource+0x186>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b30:	d03e      	beq.n	8003bb0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b36:	f200 8087 	bhi.w	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	f000 8086 	beq.w	8003c4e <HAL_TIM_ConfigClockSource+0x172>
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b46:	d87f      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b48:	2b70      	cmp	r3, #112	; 0x70
 8003b4a:	d01a      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0xa6>
 8003b4c:	2b70      	cmp	r3, #112	; 0x70
 8003b4e:	d87b      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b60      	cmp	r3, #96	; 0x60
 8003b52:	d050      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b54:	2b60      	cmp	r3, #96	; 0x60
 8003b56:	d877      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b50      	cmp	r3, #80	; 0x50
 8003b5a:	d03c      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b5c:	2b50      	cmp	r3, #80	; 0x50
 8003b5e:	d873      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d058      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x13a>
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	d86f      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b30      	cmp	r3, #48	; 0x30
 8003b6a:	d064      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x15a>
 8003b6c:	2b30      	cmp	r3, #48	; 0x30
 8003b6e:	d86b      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d060      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d867      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d05c      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d05a      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x15a>
 8003b80:	e062      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6899      	ldr	r1, [r3, #8]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f000 f98d 	bl	8003eb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ba4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	609a      	str	r2, [r3, #8]
      break;
 8003bae:	e04f      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6899      	ldr	r1, [r3, #8]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f000 f976 	bl	8003eb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bd2:	609a      	str	r2, [r3, #8]
      break;
 8003bd4:	e03c      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6859      	ldr	r1, [r3, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f000 f8ea 	bl	8003dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2150      	movs	r1, #80	; 0x50
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f943 	bl	8003e7a <TIM_ITRx_SetConfig>
      break;
 8003bf4:	e02c      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f000 f909 	bl	8003e1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2160      	movs	r1, #96	; 0x60
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f933 	bl	8003e7a <TIM_ITRx_SetConfig>
      break;
 8003c14:	e01c      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f000 f8ca 	bl	8003dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2140      	movs	r1, #64	; 0x40
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f923 	bl	8003e7a <TIM_ITRx_SetConfig>
      break;
 8003c34:	e00c      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f000 f91a 	bl	8003e7a <TIM_ITRx_SetConfig>
      break;
 8003c46:	e003      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4c:	e000      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a34      	ldr	r2, [pc, #208]	; (8003da0 <TIM_Base_SetConfig+0xe4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00f      	beq.n	8003cf4 <TIM_Base_SetConfig+0x38>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d00b      	beq.n	8003cf4 <TIM_Base_SetConfig+0x38>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a31      	ldr	r2, [pc, #196]	; (8003da4 <TIM_Base_SetConfig+0xe8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <TIM_Base_SetConfig+0x38>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <TIM_Base_SetConfig+0xec>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0x38>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a2f      	ldr	r2, [pc, #188]	; (8003dac <TIM_Base_SetConfig+0xf0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d108      	bne.n	8003d06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <TIM_Base_SetConfig+0xe4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01b      	beq.n	8003d46 <TIM_Base_SetConfig+0x8a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d017      	beq.n	8003d46 <TIM_Base_SetConfig+0x8a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <TIM_Base_SetConfig+0xe8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <TIM_Base_SetConfig+0x8a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <TIM_Base_SetConfig+0xec>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00f      	beq.n	8003d46 <TIM_Base_SetConfig+0x8a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a20      	ldr	r2, [pc, #128]	; (8003dac <TIM_Base_SetConfig+0xf0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00b      	beq.n	8003d46 <TIM_Base_SetConfig+0x8a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <TIM_Base_SetConfig+0xf4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_Base_SetConfig+0x8a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <TIM_Base_SetConfig+0xf8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_Base_SetConfig+0x8a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <TIM_Base_SetConfig+0xfc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d108      	bne.n	8003d58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <TIM_Base_SetConfig+0xe4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d103      	bne.n	8003d8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	615a      	str	r2, [r3, #20]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800
 8003dac:	40000c00 	.word	0x40000c00
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40014400 	.word	0x40014400
 8003db8:	40014800 	.word	0x40014800

08003dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f023 0201 	bic.w	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 030a 	bic.w	r3, r3, #10
 8003df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	621a      	str	r2, [r3, #32]
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b087      	sub	sp, #28
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f023 0210 	bic.w	r2, r3, #16
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	031b      	lsls	r3, r3, #12
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	621a      	str	r2, [r3, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f043 0307 	orr.w	r3, r3, #7
 8003e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	021a      	lsls	r2, r3, #8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	609a      	str	r2, [r3, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2201      	movs	r2, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	fa01 f303 	lsl.w	r3, r1, r3
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e050      	b.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d013      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a16      	ldr	r2, [pc, #88]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a13      	ldr	r2, [pc, #76]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40014000 	.word	0x40014000

08004018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e03f      	b.n	80040d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fe f90a 	bl	8002280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f829 	bl	80040dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e0:	b0c0      	sub	sp, #256	; 0x100
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	68d9      	ldr	r1, [r3, #12]
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	ea40 0301 	orr.w	r3, r0, r1
 8004104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	431a      	orrs	r2, r3
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	431a      	orrs	r2, r3
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004134:	f021 010c 	bic.w	r1, r1, #12
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004142:	430b      	orrs	r3, r1
 8004144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	6999      	ldr	r1, [r3, #24]
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	ea40 0301 	orr.w	r3, r0, r1
 8004162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4b8f      	ldr	r3, [pc, #572]	; (80043a8 <UART_SetConfig+0x2cc>)
 800416c:	429a      	cmp	r2, r3
 800416e:	d005      	beq.n	800417c <UART_SetConfig+0xa0>
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b8d      	ldr	r3, [pc, #564]	; (80043ac <UART_SetConfig+0x2d0>)
 8004178:	429a      	cmp	r2, r3
 800417a:	d104      	bne.n	8004186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7ff f98c 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8004180:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004184:	e003      	b.n	800418e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004186:	f7ff f973 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 800418a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004198:	f040 810c 	bne.w	80043b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800419c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041ae:	4622      	mov	r2, r4
 80041b0:	462b      	mov	r3, r5
 80041b2:	1891      	adds	r1, r2, r2
 80041b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80041b6:	415b      	adcs	r3, r3
 80041b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041be:	4621      	mov	r1, r4
 80041c0:	eb12 0801 	adds.w	r8, r2, r1
 80041c4:	4629      	mov	r1, r5
 80041c6:	eb43 0901 	adc.w	r9, r3, r1
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041de:	4690      	mov	r8, r2
 80041e0:	4699      	mov	r9, r3
 80041e2:	4623      	mov	r3, r4
 80041e4:	eb18 0303 	adds.w	r3, r8, r3
 80041e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041ec:	462b      	mov	r3, r5
 80041ee:	eb49 0303 	adc.w	r3, r9, r3
 80041f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004202:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800420a:	460b      	mov	r3, r1
 800420c:	18db      	adds	r3, r3, r3
 800420e:	653b      	str	r3, [r7, #80]	; 0x50
 8004210:	4613      	mov	r3, r2
 8004212:	eb42 0303 	adc.w	r3, r2, r3
 8004216:	657b      	str	r3, [r7, #84]	; 0x54
 8004218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800421c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004220:	f7fc fc80 	bl	8000b24 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4b61      	ldr	r3, [pc, #388]	; (80043b0 <UART_SetConfig+0x2d4>)
 800422a:	fba3 2302 	umull	r2, r3, r3, r2
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	011c      	lsls	r4, r3, #4
 8004232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004236:	2200      	movs	r2, #0
 8004238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800423c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004244:	4642      	mov	r2, r8
 8004246:	464b      	mov	r3, r9
 8004248:	1891      	adds	r1, r2, r2
 800424a:	64b9      	str	r1, [r7, #72]	; 0x48
 800424c:	415b      	adcs	r3, r3
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004254:	4641      	mov	r1, r8
 8004256:	eb12 0a01 	adds.w	sl, r2, r1
 800425a:	4649      	mov	r1, r9
 800425c:	eb43 0b01 	adc.w	fp, r3, r1
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800426c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004274:	4692      	mov	sl, r2
 8004276:	469b      	mov	fp, r3
 8004278:	4643      	mov	r3, r8
 800427a:	eb1a 0303 	adds.w	r3, sl, r3
 800427e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004282:	464b      	mov	r3, r9
 8004284:	eb4b 0303 	adc.w	r3, fp, r3
 8004288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004298:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800429c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042a0:	460b      	mov	r3, r1
 80042a2:	18db      	adds	r3, r3, r3
 80042a4:	643b      	str	r3, [r7, #64]	; 0x40
 80042a6:	4613      	mov	r3, r2
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	647b      	str	r3, [r7, #68]	; 0x44
 80042ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042b6:	f7fc fc35 	bl	8000b24 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <UART_SetConfig+0x2d4>)
 80042c2:	fba3 2301 	umull	r2, r3, r3, r1
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2264      	movs	r2, #100	; 0x64
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	1acb      	subs	r3, r1, r3
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042d6:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <UART_SetConfig+0x2d4>)
 80042d8:	fba3 2302 	umull	r2, r3, r3, r2
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042e4:	441c      	add	r4, r3
 80042e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042f8:	4642      	mov	r2, r8
 80042fa:	464b      	mov	r3, r9
 80042fc:	1891      	adds	r1, r2, r2
 80042fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004300:	415b      	adcs	r3, r3
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004308:	4641      	mov	r1, r8
 800430a:	1851      	adds	r1, r2, r1
 800430c:	6339      	str	r1, [r7, #48]	; 0x30
 800430e:	4649      	mov	r1, r9
 8004310:	414b      	adcs	r3, r1
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004320:	4659      	mov	r1, fp
 8004322:	00cb      	lsls	r3, r1, #3
 8004324:	4651      	mov	r1, sl
 8004326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800432a:	4651      	mov	r1, sl
 800432c:	00ca      	lsls	r2, r1, #3
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	4603      	mov	r3, r0
 8004334:	4642      	mov	r2, r8
 8004336:	189b      	adds	r3, r3, r2
 8004338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800433c:	464b      	mov	r3, r9
 800433e:	460a      	mov	r2, r1
 8004340:	eb42 0303 	adc.w	r3, r2, r3
 8004344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004354:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800435c:	460b      	mov	r3, r1
 800435e:	18db      	adds	r3, r3, r3
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
 8004362:	4613      	mov	r3, r2
 8004364:	eb42 0303 	adc.w	r3, r2, r3
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800436e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004372:	f7fc fbd7 	bl	8000b24 <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <UART_SetConfig+0x2d4>)
 800437c:	fba3 1302 	umull	r1, r3, r3, r2
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	2164      	movs	r1, #100	; 0x64
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	3332      	adds	r3, #50	; 0x32
 800438e:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <UART_SetConfig+0x2d4>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	f003 0207 	and.w	r2, r3, #7
 800439a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4422      	add	r2, r4
 80043a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043a4:	e105      	b.n	80045b2 <UART_SetConfig+0x4d6>
 80043a6:	bf00      	nop
 80043a8:	40011000 	.word	0x40011000
 80043ac:	40011400 	.word	0x40011400
 80043b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043c6:	4642      	mov	r2, r8
 80043c8:	464b      	mov	r3, r9
 80043ca:	1891      	adds	r1, r2, r2
 80043cc:	6239      	str	r1, [r7, #32]
 80043ce:	415b      	adcs	r3, r3
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d6:	4641      	mov	r1, r8
 80043d8:	1854      	adds	r4, r2, r1
 80043da:	4649      	mov	r1, r9
 80043dc:	eb43 0501 	adc.w	r5, r3, r1
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	00eb      	lsls	r3, r5, #3
 80043ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ee:	00e2      	lsls	r2, r4, #3
 80043f0:	4614      	mov	r4, r2
 80043f2:	461d      	mov	r5, r3
 80043f4:	4643      	mov	r3, r8
 80043f6:	18e3      	adds	r3, r4, r3
 80043f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043fc:	464b      	mov	r3, r9
 80043fe:	eb45 0303 	adc.w	r3, r5, r3
 8004402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004422:	4629      	mov	r1, r5
 8004424:	008b      	lsls	r3, r1, #2
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800442c:	4621      	mov	r1, r4
 800442e:	008a      	lsls	r2, r1, #2
 8004430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004434:	f7fc fb76 	bl	8000b24 <__aeabi_uldivmod>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4b60      	ldr	r3, [pc, #384]	; (80045c0 <UART_SetConfig+0x4e4>)
 800443e:	fba3 2302 	umull	r2, r3, r3, r2
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	011c      	lsls	r4, r3, #4
 8004446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004450:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004458:	4642      	mov	r2, r8
 800445a:	464b      	mov	r3, r9
 800445c:	1891      	adds	r1, r2, r2
 800445e:	61b9      	str	r1, [r7, #24]
 8004460:	415b      	adcs	r3, r3
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004468:	4641      	mov	r1, r8
 800446a:	1851      	adds	r1, r2, r1
 800446c:	6139      	str	r1, [r7, #16]
 800446e:	4649      	mov	r1, r9
 8004470:	414b      	adcs	r3, r1
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004480:	4659      	mov	r1, fp
 8004482:	00cb      	lsls	r3, r1, #3
 8004484:	4651      	mov	r1, sl
 8004486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448a:	4651      	mov	r1, sl
 800448c:	00ca      	lsls	r2, r1, #3
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	4603      	mov	r3, r0
 8004494:	4642      	mov	r2, r8
 8004496:	189b      	adds	r3, r3, r2
 8004498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800449c:	464b      	mov	r3, r9
 800449e:	460a      	mov	r2, r1
 80044a0:	eb42 0303 	adc.w	r3, r2, r3
 80044a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80044b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044c0:	4649      	mov	r1, r9
 80044c2:	008b      	lsls	r3, r1, #2
 80044c4:	4641      	mov	r1, r8
 80044c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ca:	4641      	mov	r1, r8
 80044cc:	008a      	lsls	r2, r1, #2
 80044ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044d2:	f7fc fb27 	bl	8000b24 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4b39      	ldr	r3, [pc, #228]	; (80045c0 <UART_SetConfig+0x4e4>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	; 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	3332      	adds	r3, #50	; 0x32
 80044ee:	4a34      	ldr	r2, [pc, #208]	; (80045c0 <UART_SetConfig+0x4e4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fa:	441c      	add	r4, r3
 80044fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004500:	2200      	movs	r2, #0
 8004502:	673b      	str	r3, [r7, #112]	; 0x70
 8004504:	677a      	str	r2, [r7, #116]	; 0x74
 8004506:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800450a:	4642      	mov	r2, r8
 800450c:	464b      	mov	r3, r9
 800450e:	1891      	adds	r1, r2, r2
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	415b      	adcs	r3, r3
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800451a:	4641      	mov	r1, r8
 800451c:	1851      	adds	r1, r2, r1
 800451e:	6039      	str	r1, [r7, #0]
 8004520:	4649      	mov	r1, r9
 8004522:	414b      	adcs	r3, r1
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004532:	4659      	mov	r1, fp
 8004534:	00cb      	lsls	r3, r1, #3
 8004536:	4651      	mov	r1, sl
 8004538:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453c:	4651      	mov	r1, sl
 800453e:	00ca      	lsls	r2, r1, #3
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	4603      	mov	r3, r0
 8004546:	4642      	mov	r2, r8
 8004548:	189b      	adds	r3, r3, r2
 800454a:	66bb      	str	r3, [r7, #104]	; 0x68
 800454c:	464b      	mov	r3, r9
 800454e:	460a      	mov	r2, r1
 8004550:	eb42 0303 	adc.w	r3, r2, r3
 8004554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	663b      	str	r3, [r7, #96]	; 0x60
 8004560:	667a      	str	r2, [r7, #100]	; 0x64
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800456e:	4649      	mov	r1, r9
 8004570:	008b      	lsls	r3, r1, #2
 8004572:	4641      	mov	r1, r8
 8004574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004578:	4641      	mov	r1, r8
 800457a:	008a      	lsls	r2, r1, #2
 800457c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004580:	f7fc fad0 	bl	8000b24 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <UART_SetConfig+0x4e4>)
 800458a:	fba3 1302 	umull	r1, r3, r3, r2
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2164      	movs	r1, #100	; 0x64
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	3332      	adds	r3, #50	; 0x32
 800459c:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <UART_SetConfig+0x4e4>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	f003 020f 	and.w	r2, r3, #15
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4422      	add	r2, r4
 80045b0:	609a      	str	r2, [r3, #8]
}
 80045b2:	bf00      	nop
 80045b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045b8:	46bd      	mov	sp, r7
 80045ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045be:	bf00      	nop
 80045c0:	51eb851f 	.word	0x51eb851f

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4d0d      	ldr	r5, [pc, #52]	; (80045fc <__libc_init_array+0x38>)
 80045c8:	4c0d      	ldr	r4, [pc, #52]	; (8004600 <__libc_init_array+0x3c>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	2600      	movs	r6, #0
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	4d0b      	ldr	r5, [pc, #44]	; (8004604 <__libc_init_array+0x40>)
 80045d6:	4c0c      	ldr	r4, [pc, #48]	; (8004608 <__libc_init_array+0x44>)
 80045d8:	f000 f820 	bl	800461c <_init>
 80045dc:	1b64      	subs	r4, r4, r5
 80045de:	10a4      	asrs	r4, r4, #2
 80045e0:	2600      	movs	r6, #0
 80045e2:	42a6      	cmp	r6, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ec:	4798      	blx	r3
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f6:	4798      	blx	r3
 80045f8:	3601      	adds	r6, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	08004654 	.word	0x08004654
 8004600:	08004654 	.word	0x08004654
 8004604:	08004654 	.word	0x08004654
 8004608:	08004658 	.word	0x08004658

0800460c <memset>:
 800460c:	4402      	add	r2, r0
 800460e:	4603      	mov	r3, r0
 8004610:	4293      	cmp	r3, r2
 8004612:	d100      	bne.n	8004616 <memset+0xa>
 8004614:	4770      	bx	lr
 8004616:	f803 1b01 	strb.w	r1, [r3], #1
 800461a:	e7f9      	b.n	8004610 <memset+0x4>

0800461c <_init>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr

08004628 <_fini>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr
